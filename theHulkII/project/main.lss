
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008f50  00000000  00000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000410  40000000  00008f50  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000348  40000410  40000410  00018410  2**2
                  ALLOC
  3 .stack        00000400  40000800  40000800  00018410  2**0
                  ALLOC
  4 .stab         00009828  00000000  00000000  00018410  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00003fbd  00000000  00000000  00021c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      000003b1  00000000  00000000  00025bf5  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000120  00000000  00000000  00025fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000040f  00000000  00000000  000260c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000000b4  00000000  00000000  000264d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000007ba  00000000  00000000  0002658b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000078  00000000  00000000  00026d48  2**2
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <_boot>:

// Runtime Interrupt Vectors
// -------------------------
Vectors:
        b     _start                    // reset - _start
       0:	ea00000c 	b	38 <_mainCRTStartup>
        ldr   pc,_undf                  // undefined - _undf
       4:	e59ff014 	ldr	pc, [pc, #20]	; 20 <_undf>
        ldr   pc,_swi                   // SWI - _swi
       8:	e59ff014 	ldr	pc, [pc, #20]	; 24 <_swi>
        ldr   pc,_pabt                  // program abort - _pabt
       c:	e59ff014 	ldr	pc, [pc, #20]	; 28 <_pabt>
        ldr   pc,_dabt                  // data abort - _dabt
      10:	e59ff014 	ldr	pc, [pc, #20]	; 2c <_dabt>
        nop                             // reserved
      14:	e1a00000 	nop			(mov r0,r0)
        ldr   pc,[pc,#-0xFF0]           // IRQ - read the VIC
      18:	e51ffff0 	ldr	pc, [pc, #-4080]	; fffff030 <_stack+0xbfffe430>
        ldr   pc,_fiq                   // FIQ - _fiq
      1c:	e59ff010 	ldr	pc, [pc, #16]	; 34 <_fiq>

00000020 <_undf>:
      20:	000000d4 	ldreqd	r0, [r0], -r4

00000024 <_swi>:
      24:	000000d4 	ldreqd	r0, [r0], -r4

00000028 <_pabt>:
      28:	000000d4 	ldreqd	r0, [r0], -r4

0000002c <_dabt>:
      2c:	000000d4 	ldreqd	r0, [r0], -r4

00000030 <_irq>:
      30:	000000d4 	ldreqd	r0, [r0], -r4

00000034 <_fiq>:
      34:	000000d4 	ldreqd	r0, [r0], -r4

00000038 <_mainCRTStartup>:

#if 1
// Use this group for production
_undf:  .word _reset                    // undefined - _reset
_swi:   .word _reset                    // SWI - _reset
_pabt:  .word _reset                    // program abort - _reset
_dabt:  .word _reset                    // data abort - _reset
_irq:   .word _reset                    // IRQ - _reset
_fiq:   .word _reset                    // FIQ - _reset

#else
// Use this group for development
_undf:  .word __undf                    // undefined
_swi:   .word __swi                     // SWI
_pabt:  .word __pabt                    // program abort
_dabt:  .word __dabt                    // data abort
_irq:   .word __irq                     // IRQ
_fiq:   .word __fiq                     // FIQ

__undf: b     .                         // undefined
__swi:  b     .                         // SWI
__pabt: b     .                         // program abort
__dabt: b     .                         // data abort
__irq:  b     .                         // IRQ
__fiq:  b     .                         // FIQ
#endif
        .size _boot, . - _boot
        .endfunc


// Setup the operating mode & stack.
// ---------------------------------
        .global _start, start, _mainCRTStartup
        .func   _start

_start:
start:
_mainCRTStartup:

// Initialize Interrupt System
// - Set stack location for each mode
// - Leave in System Mode with Interrupts Disabled
// -----------------------------------------------
        ldr   r0,=_stack
      38:	e59f0098 	ldr	r0, [pc, #152]	; d8 <.text+0xd8>
        msr   CPSR_c,#MODE_UND|I_BIT|F_BIT // Undefined Instruction Mode
      3c:	e321f0db 	msr	CPSR_c, #219	; 0xdb
        mov   sp,r0
      40:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#UND_STACK_SIZE
      44:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_ABT|I_BIT|F_BIT // Abort Mode
      48:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
        mov   sp,r0
      4c:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#ABT_STACK_SIZE
      50:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_FIQ|I_BIT|F_BIT // FIQ Mode
      54:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
        mov   sp,r0
      58:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#FIQ_STACK_SIZE
      5c:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_IRQ|I_BIT|F_BIT // IRQ Mode
      60:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
        mov   sp,r0
      64:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#IRQ_STACK_SIZE
      68:	e2400080 	sub	r0, r0, #128	; 0x80
        msr   CPSR_c,#MODE_SVC|I_BIT|F_BIT // Supervisor Mode
      6c:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
        mov   sp,r0
      70:	e1a0d000 	mov	sp, r0
        sub   r0,r0,#SVC_STACK_SIZE
      74:	e2400004 	sub	r0, r0, #4	; 0x4
        msr   CPSR_c,#MODE_SYS|I_BIT|F_BIT // System Mode
      78:	e321f0df 	msr	CPSR_c, #223	; 0xdf
        mov   sp,r0
      7c:	e1a0d000 	mov	sp, r0

// Copy initialized data to its execution address in RAM
// -----------------------------------------------------
#ifdef ROM_RUN
        ldr   r1,=_etext                // -> ROM data start
      80:	e59f1054 	ldr	r1, [pc, #84]	; dc <.text+0xdc>
        ldr   r2,=_data                 // -> data start
      84:	e59f2054 	ldr	r2, [pc, #84]	; e0 <.text+0xe0>
        ldr   r3,=_edata                // -> end of data
      88:	e59f3054 	ldr	r3, [pc, #84]	; e4 <.text+0xe4>
1:      cmp   r2,r3                     // check if data to move
      8c:	e1520003 	cmp	r2, r3
        ldrlo r0,[r1],#4                // copy it
      90:	34910004 	ldrcc	r0, [r1], #4
        strlo r0,[r2],#4
      94:	34820004 	strcc	r0, [r2], #4
        blo   1b                        // loop until done
      98:	3afffffb 	bcc	8c <IRQ_STACK_SIZE+0xc>
#endif
// Clear .bss
// ----------
        mov   r0,#0                     // get a zero
      9c:	e3a00000 	mov	r0, #0	; 0x0
        ldr   r1,=__bss_start           // -> bss start
      a0:	e59f1040 	ldr	r1, [pc, #64]	; e8 <.text+0xe8>
        ldr   r2,=__bss_end__           // -> bss end
      a4:	e59f2040 	ldr	r2, [pc, #64]	; ec <.text+0xec>
2:      cmp   r1,r2                     // check if data to clear
      a8:	e1510002 	cmp	r1, r2
        strlo r0,[r1],#4                // clear 4 bytes
      ac:	34810004 	strcc	r0, [r1], #4
        blo   2b                        // loop until done
      b0:	3afffffc 	bcc	a8 <IRQ_STACK_SIZE+0x28>

// Call main program: main(0)
// --------------------------
        mov   r0,#0                     // no arguments (argc = 0)
      b4:	e3a00000 	mov	r0, #0	; 0x0
        mov   r1,r0
      b8:	e1a01000 	mov	r1, r0
        mov   r2,r0
      bc:	e1a02000 	mov	r2, r0
        mov   fp,r0                     // null frame pointer
      c0:	e1a0b000 	mov	fp, r0
        mov   r7,r0                     // null frame pointer for thumb
      c4:	e1a07000 	mov	r7, r0
        ldr   r10,=main
      c8:	e59fa020 	ldr	sl, [pc, #32]	; f0 <.text+0xf0>
        mov   lr,pc
      cc:	e1a0e00f 	mov	lr, pc
        bx    r10                       // enter main()
      d0:	e12fff1a 	bx	sl

000000d4 <_reset>:
      d4:	eafffffe 	b	d4 <_reset>
      d8:	40000c00 	andmi	r0, r0, r0, lsl #24
      dc:	00008f50 	andeq	r8, r0, r0, asr pc
      e0:	40000000 	andmi	r0, r0, r0
      e4:	40000410 	andmi	r0, r0, r0, lsl r4
      e8:	40000410 	andmi	r0, r0, r0, lsl r4
      ec:	40000758 	andmi	r0, r0, r8, asr r7
      f0:	00000f38 	andeq	r0, r0, r8, lsr pc

000000f4 <wdtISR>:
//

void wdtISR( void )
{
	ISR_ENTRY();
      f4:	e24ee004 	sub	lr, lr, #4	; 0x4
      f8:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
      fc:	e14f1000 	mrs	r1, SPSR
     100:	e92d0002 	stmdb	sp!, {r1}
	
	if ( !( IOPIN1 & PIO1_FAN_BIT ) ) {
     104:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     108:	e282290a 	add	r2, r2, #163840	; 0x28000
     10c:	e5923010 	ldr	r3, [r2, #16]
     110:	e3130701 	tst	r3, #262144	; 0x40000
		IOSET1 = PIO1_FAN_BIT;
     114:	03a03701 	moveq	r3, #262144	; 0x40000
	}
	else {
		IOCLR1 = PIO1_FAN_BIT;
     118:	13a03701 	movne	r3, #262144	; 0x40000
     11c:	05823014 	streq	r3, [r2, #20]
     120:	1582301c 	strne	r3, [r2, #28]
	}
	
	IOSET1 = PIO1_EHEATER_ELEMENTB_BIT;
     124:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     128:	e283390a 	add	r3, r3, #163840	; 0x28000
     12c:	e3a02502 	mov	r2, #8388608	; 0x800000
     130:	e5832014 	str	r2, [r3, #20]
	
	//WDMOD &= ~BIT(WDTOF);
	VICVectAddr = 0x00000000;	// Clear interrupt in 
     134:	e3a01000 	mov	r1, #0	; 0x0
     138:	e3e03000 	mvn	r3, #0	; 0x0
     13c:	e5031fcf 	str	r1, [r3, #-4047]

	ISR_EXIT();					// recover registers and return
     140:	e8bd0002 	ldmia	sp!, {r1}
     144:	e161f001 	msr	SPSR_c, r1
     148:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
}
     14c:	e12fff1e 	bx	lr

00000150 <getMajorVersion>:




/******************************************************************************
 *
 * Function Name: lowInit()
 *
 * Description:
 *    This function starts up the PLL then sets up the GPIO pins before
 *    waiting for the PLL to lock.  It finally engages the PLL and
 *    returns
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    void
 *
 *****************************************************************************/
static void lowInit( void )
{
	// set PLL multiplier & divisor.
	// values computed from config.h
	PLLCFG = PLLCFG_MSEL | PLLCFG_PSEL;

	// enable PLL
	PLLCON = PLLCON_PLLE;
	PLLFEED = 0xAA;      		// Make it happen.  These two updates
	PLLFEED = 0x55;             // MUST occur in sequence.
	
	// Setup A/D: 10-bit AIN0 @ 4,2MHz "Non-Burst"-Mode 
	//PINSEL1 |= ( 1UL << 22 ); // set function P0.27 as AIN0
	//PINSEL1 |= ( 1UL << 24 ); // set function P0.28 as AIN1
	PINSEL1 = ( PINSEL1 & ~0x03C00000 ) | 0x01600000;

	// setup the PIO0 port pin
	IOCLR0 = PIO0_ZERO_BITS;                // clear the ZEROs output
	IOSET0 = PIO0_ONE_BITS;                 // set the ONEs output
	IODIR0 = PIO0_OUTPUT_BITS;              // set the output bit direction
	
	// setup the PIO1 port pin
	IOCLR1 = PIO1_ZERO_BITS;                // clear the ZEROs output
	IOSET1 = PIO1_ONE_BITS;                 // set the ONEs output
	IODIR1 = PIO1_OUTPUT_BITS;              // set the output bit direction

	// wait for PLL lock
	while ( !(PLLSTAT & PLLSTAT_LOCK ) ) {
		continue;
	}

	// enable & connect PLL
	PLLCON = PLLCON_PLLE | PLLCON_PLLC;
	PLLFEED = 0xAA;                       // Make it happen.  These two updates
	PLLFEED = 0x55;                       // MUST occur in sequence.
	
	// setup & enable the MAM
	MAMTIM = MAMTIM_CYCLES;
	MAMCR = MAMCR_FULL;

	// set the peripheral bus speed
	// value computed from config.h
	VPBDIV = VPBDIV_VALUE;                // set the peripheral bus clock speed
	
}

/******************************************************************************
 *
 * Function Name: sysInit()
 *
 * Description:
 *    This function is responsible for initializing the program
 *    specific hardware
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:   
 *    void
 *
 *****************************************************************************/
static void sysInit( void )
{
	lowInit();                            	// setup clocks and processor port pins

	// set the interrupt controller defaults
#if defined(RAM_RUN)
	MEMMAP = MEMMAP_SRAM;                 	// map interrupt vectors space into SRAM
#elif defined(ROM_RUN)
	MEMMAP = MEMMAP_FLASH;                	// map interrupt vectors space into FLASH
#else
#error RUN_MODE not defined!
#endif
	VICIntEnClr = 0xFFFFFFFF;  				// clear all interrupts
	VICIntSelect = 0x00000000;           	// clear all FIQ selections
	VICDefVectAddr = (uint32_t)reset;   	// point unvectored IRQs to reset()
	
	initSysTime();                       	// initialize the system timer
	
	uart0Init( UART_BAUD( HOST_BAUD0 ), UART_8N1, UART_FIFO_8 ); // setup the UART
	uart1Init( UART_BAUD( HOST_BAUD1 ), UART_8N1, UART_FIFO_8 ); // setup the UART
	
	// Initiate I2C
	i2cInit();	

	// initialize the watchdog timer	
/*	VICIntSelect &= ~VIC_BIT (VIC_WDT );	// WDT selected as IRQ
	VICIntEnable = VIC_BIT( VIC_WDT );   	// WDT interrupt enabled
	VICVectCntl8 = VIC_ENABLE | VIC_WDT;
	VICVectAddr8 = (uint32_t)wdtISR;    	// address of the ISR
*/  
	WDTC = 15000000;						// One second = 15000000
	WDTV = 0;
	WDMOD = WDEN | WDRESET;  				// Activate watchdog
	WDFEED = 0xAA; WDFEED = 0x55;
	
}


/******************************************************************************
 *
 * Function Name: button_state()
 *
 * Description:
 *    This function checks if a key has been pressed. Assumes
 *    key to be "active low" (PIN-Bit==0 -> pressed). Does
 *    debouncing for given debounce time-difference
 *
 * Calling Sequence: 
 *    GPIO-Initialisation for Inputs
 *
 * Returns:
 *    -1 : key changed or bouncing
 *     0 : key released
 *     1 : key pressed
 *
 *****************************************************************************/

#define KEY_DEBOUNCE FIFTY_MS

static int button_state( uint8_t nButton )
{
	static uint32_t lastchangetime[ 6 ];
	static BOOL laststate[ 6 ] = { FALSE,
										FALSE,
										FALSE,
										FALSE,
										FALSE,
										FALSE };
	static BOOL actstate[ 6 ] = { FALSE, FALSE, FALSE, FALSE, FALSE, FALSE };
	
	switch ( nButton ) {
		
		case BUTTON_STATE0:
			// TRUE if pressed (active low)
			actstate[ nButton ] = ( IOPIN0 & PIO0_BTN_STATE0_BIT ) ? FALSE : TRUE; 
			break;

		case BUTTON_FORWARD:
			// TRUE if pressed (active low)
			actstate[ nButton ] = ( IOPIN0 & PIO0_BTN_PG_FORWARD_BIT ) ? FALSE : TRUE; 
			break;
			
		case BUTTON_UP:
			// TRUE if pressed (active low)
			actstate[ nButton ] = ( IOPIN0 & PIO0_BTN_UP_BIT ) ? FALSE : TRUE; 
			break;
			
		case BUTTON_DOWN:
			// TRUE if pressed (active low)
			actstate[ nButton ] = ( IOPIN0 & PIO0_BTN_DOWN_BIT ) ? FALSE : TRUE; 
			break;

		case BUTTON_ENTER:
			// TRUE if pressed (active low)
			actstate[ nButton ] = ( IOPIN0 & PIO0_BTN_ENTER_BIT ) ? FALSE : TRUE; 
			break;
			
		case BUTTON_FORCE_MOTOR_ON:
			// TRUE if pressed (active low)
			actstate[ nButton ] = ( IOPIN0 & PIO0_BTN_FORCE_MON_BIT ) ? FALSE : TRUE; 
			break;	
	}
	
	if ( laststate[ nButton ] != actstate[ nButton ] ) {
		lastchangetime[ nButton ] = getSysTICs();
		laststate[ nButton ] = actstate[ nButton ];
	}
	else {
		if ( getElapsedSysTICs( lastchangetime[ nButton ] ) > KEY_DEBOUNCE ) {
			if ( actstate[ nButton ] ) {
				return 1;
			}
			else {
				return 0;
			}
		}
	}
	
	return -1; // changed or bouncing
}




/******************************************************************************
 *
 * Function Name: main()
 *
 * Description:
 *    This function is the program entry point.  After initializing the
 *    system, it sends a greeting out UART0 then enters an endless loop
 *    echoing chracters on the UART and blinking an LED every half
 *    second.
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    void
 *
 *****************************************************************************/
int main(void)
{
	unsigned mycpsr;
	
	char txtFurnaceState[ 12 ];	// Furnace state in text for display
	char txtHeaterState[ 12 ];		// Heater state in text for display
	char wrkbuf[ 80 ];				// Buffer for temprary text strings
	
	// State machine states
	uint8_t state_furnace;	// Furnace states
	uint8_t state_heater;	// Heater states
	uint8_t state_display;	// Display states
	uint8_t state_config;	// Configuration states

	// Time keeping
	uint32_t startTime_millisec;
	uint32_t startTime_halfsec;
	uint32_t startTime_second;
	uint32_t startTime_fivesec;
	uint32_t startTime_minute;			
	
	uint32_t startTime_FuelLoad;			// Transport A+B run to load fuel in burning chamber
	uint32_t startTime_TransportEmpty;  	// Transport A run after preset temp reached
	uint32_t startTime_FireWait;			// Time to wait for fire in furnace
	uint32_t startTime_BurnOutWait;			// Time to wait for fuel to burn out before stop
	uint32_t startTime_WaterHeaterStage2; 	// Timer to activate water heater stage 2
	uint32_t startTime_LightDetect;			// Fire detected.
	uint32_t startTime_LightsOut;			// No fire detected.
		
	short config_val = 0;					// Current configuration value
	short nDispHulk = 0;					// Display state variable switch - HULK
	short nDispHeater = 0;					// Display state variable switch - Heater
	
	// One wire defines
	uint8_t timecnt;
	
  	// System initialization
	sysInit();
	
#if defined(UART0_TX_INT_MODE) || defined(UART0_RX_INT_MODE)
	enableIRQ();
#endif
		
	// Check VSCP persistent storage and
	// restore if needed
	
	if ( !vscp_check_pstorage() ) {	
		// Spoiled or not initialized - reinitialize
		init_app_eeprom();
	}
	
	// Initialize the VSCP functionality
	vscp_init();			

	// Init. Lawicel CAN adapter
	uart1Puts("C\r");	// Close in case channel is open
	uart1Puts("Z0\r");	// No timestamp
	uart1Puts("S6\r");	// 57600 kbps
	uart1Puts("O\r");	// Open
	
	startTime_millisec = getSysTICs();
	startTime_halfsec = getSysTICs();
	startTime_second = getSysTICs();
	startTime_fivesec = getSysTICs();
	startTime_minute = getSysTICs();
	
	startTime_FuelLoad = getSysTICs();
	startTime_TransportEmpty = getSysTICs();
	startTime_FireWait = getSysTICs();
	startTime_BurnOutWait = getSysTICs();
	startTime_WaterHeaterStage2 = getSysTICs();
	startTime_LightDetect = getSysTICs();
	startTime_LightsOut = getSysTICs();
	timecnt = 0;
	
	clrDisplayBuf();

	// LCD initialization
	LCDInit();                    		// LCD Initialization
 	
	LCDSendCommand( LCD_TWO_ROWS );   	// LCD Two rows
	LCDSendCommand( LCD_DISP_ON );      // LCD on
	LCDSendCommand( LCD_CLR_DISP );     // LCD clear
	
	// Start the show....
	DEBUGWRITE("\r\nthe HULK II\r\n");
	DEBUGWRITE("(Control for heat comfort @ home.)\r\n\r\n");	
			
	// Set default state
	state_furnace = FURNACE_STATE_REST;
	DEBUGWRITECRLF("state_furnace = FURNACE_STATE_START");
	
	state_heater = HEATER_STATE_REST;
	DEBUGWRITECRLF("state_heater = HEATER_STATE_REST");
	
	state_display = DISPLAY_STATE_HULK; // DISPLAY_STATE_HULK;
	state_config = CONFIG_STATE_FURNACE_ENABLE;
	
	
	
	// The water heater core temperature
	tempHeater = getHeaterTemp();
	
	while ( TRUE ) {
	
		// Feed the dog
		mycpsr = disableIRQ();
		WDFEED = 0xAA; WDFEED = 0x55;
		restoreIRQ( mycpsr );
				
		///////////////////////////////////////////////////////////////////////
		// 							Reset Buttons
		///////////////////////////////////////////////////////////////////////
		
		// release button locks
		if ( 0 == button_state( BUTTON_STATE0 ) ) {
			button_lock[ BUTTON_STATE0 ] = FALSE; 	// release lock if button is released
		}
		
		if ( 0 == button_state( BUTTON_FORWARD ) ) {
			button_lock[ BUTTON_FORWARD ] = FALSE; 	// release lock if button is released
		}
		
		if ( 0 == button_state( BUTTON_UP ) ) {
			button_lock[ BUTTON_UP ] = FALSE; 		// release lock if button is released
		}
		
		if ( 0 == button_state( BUTTON_DOWN ) ) {
			button_lock[ BUTTON_DOWN ] = FALSE; 	// release lock if button is released
		}
		
		if ( 0 == button_state( BUTTON_ENTER ) ) {
			button_lock[ BUTTON_ENTER ] = FALSE; 	// release lock if button is released
		}
		
		if ( 0 == button_state( BUTTON_FORCE_MOTOR_ON ) ) {
			button_lock[ BUTTON_FORCE_MOTOR_ON ] = FALSE; 	// release lock if button is released
		}
		
		//
		//  If the state0 button is pressed we reset the 
		//  machine.
		//
		if ( ( 1 == button_state( BUTTON_STATE0 ) ) && 
					!button_lock[ BUTTON_STATE0 ] && 
					( VSCP_STATE_INIT != vscp_node_state ) )  {
					
			uart0Puts("\r\nState 0 Button Pressed!\r\n");
			button_lock[ BUTTON_STATE0 ] = TRUE;
			
			// State 0 button pressed
			vscp_nickname = VSCP_ADDRESS_FREE;
			writeEEPROM( VSCP_EEPROM_NICKNAME, VSCP_ADDRESS_FREE );
			vscp_init();
			
			// Set default state
			state_furnace = FURNACE_STATE_REST;
			DEBUGWRITECRLF("state_furnace = FURNACE_STATE_START");
			state_heater = HEATER_STATE_REST;
			DEBUGWRITECRLF("state_heater = HEATER_STATE_REST");
			state_display = DISPLAY_STATE_HULK; // DISPLAY_STATE_HULK;
			state_config = CONFIG_STATE_FURNACE_ENABLE;
		}
		
		//
		// If the force motor ON button is pressed both the
		// transport motors should run
		//
		if ( BtnForceMotorOn() ) {
			
			ctrTransportMotorA( ON );
			ctrTransportMotorB( ON );
			
			// Wait until released
			while ( button_state( BUTTON_FORCE_MOTOR_ON ) ) {
				mycpsr = disableIRQ();
				WDFEED = 0xAA; WDFEED = 0x55;
				restoreIRQ( mycpsr );
			}
		}
		
		// Check for any valid CAN message
		vscp_imsg.flag = 0;
		vscp_receiveMsg();
		
		///////////////////////////////////////////////////////////////////////
		// 								VSCP 
		///////////////////////////////////////////////////////////////////////
		
		switch ( vscp_node_state ) {

			case VSCP_STATE_STARTUP:		// Cold/warm reset

				// Get nickname from EEPROM
				if ( VSCP_ADDRESS_FREE == vscp_nickname ) {
					// new on segment need a nickname
					vscp_node_state = VSCP_STATE_INIT; 	
				}
				else {
					// been here before - go on
					vscp_node_state = VSCP_STATE_ACTIVE;
					vscp_active();
				}
				break;

			case VSCP_STATE_INIT:			// Assigning nickname
				vscp_probe();
				break;

			case VSCP_STATE_PREACTIVE:		// Waiting for host initialisation
				vscp_rcv_preactive();					
				break;

			case VSCP_STATE_ACTIVE:			// The normal state
				
				if ( vscp_imsg.flag & VSCP_VALID_MSG ) {	// incoming message?
					
					// Yes, incoming message
					if ( VSCP_CLASS1_PROTOCOL == vscp_imsg.class ) {
						switch( vscp_imsg.type ) {

							case VSCP_TYPE_PROTOCOL_SEGCTRL_HEARTBEAT:
								vscp_rcv_heartbeat();
								break;

							case VSCP_TYPE_PROTOCOL_NEW_NODE_ONLINE:
								vscp_rcv_new_node_online();
								break;
							
							case VSCP_TYPE_PROTOCOL_SET_NICKNAME:
								vscp_rcv_set_nickname();
								break;
							
							case VSCP_TYPE_PROTOCOL_DROP_NICKNAME:
								vscp_rcv_drop_nickname();
								break;

							case VSCP_TYPE_PROTOCOL_READ_REGISTER:
								if ( ( 2 == ( vscp_imsg.flag & 0x0f ) ) && 
										( vscp_nickname == vscp_imsg.data[ 0 ] ) ) {

									if ( vscp_imsg.data[ 1 ] < 0x80 )  {
										// Read application specific register
										read_app_register( vscp_imsg.data[ 1 ] );
									}
									else {
										// Read VSCP register
										vscp_rcv_readreg();
									}
								}
								break;

							case VSCP_TYPE_PROTOCOL_WRITE_REGISTER:
								if ( ( 3 == ( vscp_imsg.flag & 0x0f ) ) && 
										( vscp_nickname == vscp_imsg.data[ 0 ] ) ) {
									if ( vscp_imsg.data[ 1 ] < 0x80 ) {
										// Write application specific register
										write_app_register( vscp_imsg.data[ 1 ], vscp_imsg.data[ 2 ] );
									}
									else {
										// Read VSCP register
										vscp_rcv_writereg();
									}
								}
								break;
								
							case VSCP_TYPE_PROTOCOL_ENTER_BOOT_LOADER:
								if ( ( vscp_nickname == vscp_imsg.data[ 0 ] ) &&
										( 1 == vscp_imsg.data[ 1 ] ) &&
										( readEEPROM( VSCP_EEPROM_REG_GUIID0 + 0 ) == vscp_imsg.data[ 2 ] ) &&
										( readEEPROM( VSCP_EEPROM_REG_GUIID0 + 3 ) == vscp_imsg.data[ 3 ] ) &&
										( readEEPROM( VSCP_EEPROM_REG_GUIID0 + 5 ) == vscp_imsg.data[ 4 ] ) &&
										( readEEPROM( VSCP_EEPROM_REG_GUIID0 + 7 ) == vscp_imsg.data[ 5 ] ) &&
										( ( vscp_page_select >> 8 ) == vscp_imsg.data[ 6 ] ) &&
										( ( vscp_page_select & 0xff ) == vscp_imsg.data[ 7 ] ) ) {											
									// OK, We should enter boot loader mode
									// 	First, activate bootloader mode
									writeEEPROM( VSCP_EEPROM_BOOTLOADER_FLAG, VSCP_BOOT_FLAG );
									while( 1 ); // Let bootloader Reset us
								}
								break;

							default:
								// Do work load
								break;
						}							
					}
				}
				break;

			case VSCP_STATE_ERROR:			// Everything is *very* *very* bad.
				vscp_error();
				break;

			default:					// Should not be here...
				vscp_node_state = VSCP_STATE_STARTUP;
				break;

		}
		
		///////////////////////////////////////////////////////////////////////
		// 						Every milli-Second
		///////////////////////////////////////////////////////////////////////
		if ( getElapsedSysTICs( startTime_millisec ) > ONE_MS ) {
			vscp_timer++;
			startTime_millisec += ONE_MS;
		}
		
		///////////////////////////////////////////////////////////////////////
		// 						Every Half Second 
		///////////////////////////////////////////////////////////////////////
		if ( getElapsedSysTICs( startTime_halfsec ) > HALF_SEC ) {

			// Toggle LED
			if ( IOPIN1 & PIO1_STATUS_LED ) {
				IOCLR1 = PIO1_STATUS_LED;
			}
			else {
				IOSET1 = PIO1_STATUS_LED; 
			}
			
			startTime_halfsec += HALF_SEC;
		}
		
		
		///////////////////////////////////////////////////////////////////////
		// 				            Every Second
		///////////////////////////////////////////////////////////////////////
		if ( getElapsedSysTICs( startTime_second ) > ONE_SEC ) {
						
			// Should the display be updated?				
			LCDSendCommand( LCD_DD_RAM_ADDR1 ); // Set first row
			LCDSendTxt( gdisplaybuf1 );
			LCDSendCommand(LCD_DD_RAM_ADDR2); 	// Set second row
			LCDSendTxt( gdisplaybuf2 );
			
			// Alarm if high temp on Transport B
/*			
			if ( tempTransportB > TRANSPORTB_ALARM_TEMP ) {
				ctrAlarm( ON );
			}
			else {
				ctrAlarm( OFF );
			}
*/			
			
			startTime_second += ONE_SEC;
		}
		
		///////////////////////////////////////////////////////////////////////
		// 						  Every Five Seconds 
		///////////////////////////////////////////////////////////////////////
		if ( getElapsedSysTICs( startTime_fivesec ) > ( 5 * ONE_SEC ) ) {
		
			// The water heater core temperature
			tempHeater = getHeaterTemp();
			
			// The Furnace Core temperature
			tempFurnace = getFurnaceTemp();
	
			DEBUGWRITECRLF( txtFurnaceState );
			
			uart0Puts("\r\n");
			
			startTime_fivesec += ( 5 * ONE_SEC );
		}
		
		///////////////////////////////////////////////////////////////////////
		// 						     Every Minute 
		///////////////////////////////////////////////////////////////////////
		if ( getElapsedSysTICs( startTime_minute ) > (uint32_t)( 60L * ONE_SEC ) ) {
				
			// Send heartbeat
			sendHeartBeat();
			
			// Send temperature info
			sendTempEvent( index_furnace_temp_out, tempFurnace );
			sendTempEvent( index_heater_temp_core, tempHeater );
			
			startTime_minute += ( 60L * ONE_SEC );
		}
		
		
		
		///////////////////////////////////////////////////////////////////////
		// 					   Furnace State Machine 
		///////////////////////////////////////////////////////////////////////
		
		switch ( state_furnace ) {
		
			// * * * * * * * * * * * * * * * * * * * * *
			// A failure has occured	
			//		Must be taken out of here manually
			//		or by a register write.
			// * * * * * * * * * * * * * * * * * * * * *
			case FURNACE_STATE_FAILURE:
			
				ctrFan( OFF );
				ctrFurnaceHeater ( OFF );
				ctrTransportMotorA( OFF );
				ctrTransportMotorB( OFF );
				strcpy( txtFurnaceState, "FAILURE   ");
				
				ctrAlarm( ON );
				
				// If enabled again go active
				if ( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) {
					state_furnace = FURNACE_STATE_REST;
					DEBUGWRITECRLF("state_furnace = FURNACE_STATE_REST");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *	
			// The HULK is off
			//		Must be taken out of here manually
			//		or by a register write.
			// * * * * * * * * * * * * * * * * * * * * *
			case FURNACE_STATE_OFF:
			
				ctrFan( OFF );
				ctrFurnaceHeater ( OFF );
				ctrTransportMotorA( OFF );
				ctrTransportMotorB( OFF );
				strcpy( txtFurnaceState, "OFF       ");
				
				// If enabled again go active
				if ( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) {
					state_furnace = FURNACE_STATE_REST;
					DEBUGWRITECRLF("state_furnace = FURNACE_STATE_REST");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *	
			// The HULK is about to rest
			// * * * * * * * * * * * * * * * * * * * * *	
			case FURNACE_STATE_PREREST:
				
				ctrFan( OFF );
				ctrFurnaceHeater ( OFF );
				ctrTransportMotorA( OFF );
				ctrTransportMotorB( ON );
				strcpy( txtFurnaceState, "PRE-REST  ");
				
				// Empty transport 
				if ( getElapsedSysTICs( startTime_TransportEmpty ) > 
						( ONE_SEC * readEEPROM( REGISTER_TRANSPORTB_POST_RUN_TIME + VSCP_EEPROM_VSCP_END ) ) ) {
					state_furnace = FURNACE_STATE_REST;
					DEBUGWRITECRLF("Tr B Timeout => state_furnace = FURNACE_STATE_REST");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *	
			// The HULK is resting
			//		Preset temp reached
			// * * * * * * * * * * * * * * * * * * * * *
			case FURNACE_STATE_REST:
			
				ctrFan( OFF );
				ctrFurnaceHeater ( OFF );
				ctrTransportMotorA( OFF );
				ctrTransportMotorB( OFF );
				strcpy( txtFurnaceState, "REST      ");
				
				if ( tempFurnace < 
						( readEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) - 
						readEEPROM( REGISTER_FURNACE_HYSTERERIS + VSCP_EEPROM_VSCP_END ) ) ) {
				//if ( !isOverTemp() ) {
					startTime_FireWait = getSysTICs();
					startTime_FuelLoad = getSysTICs();
					state_furnace = FURNACE_STATE_PRESTART;
					DEBUGWRITECRLF("temp low => state_furnace = FURNACE_STATE_PRESTART");
				}
				
				// If disabled go to off state
				if ( !( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) ) {
					DEBUGWRITECRLF( itoa( readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) );
					state_furnace = FURNACE_STATE_OFF;
					DEBUGWRITECRLF("Disabled => state_furnace = FURNACE_STATE_OFF");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
			// Furnace should be started up
			//	Fuel should be transported into the burning chamber
			// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
			case FURNACE_STATE_PRESTART:
			
				ctrFan( ON );
				ctrFurnaceHeater ( ON );
				ctrTransportMotorA( ON );
				ctrTransportMotorB( ON );
				strcpy( txtFurnaceState, "PRESTART  ");
				
				// If fire detected we go active
				if ( getFireDetectorLevel() < getFireReferenceLevel() ) {
					startTime_LightDetect = getSysTICs();
					state_furnace = FURNACE_STATE_FIREDETECT;
					DEBUGWRITECRLF("Fire detected => state_furnace = FURNACE_STATE_FIREDETECT");
				}
				
				// If the fuel load time has ellapsed.
				if ( getElapsedSysTICs( startTime_FuelLoad ) > 
						( ONE_SEC * readEEPROM( REGISTER_TRANSPORT_FUEL_FILL_TIME + VSCP_EEPROM_VSCP_END )  ) ) {
					
					ctrTransportMotorA( OFF );
					ctrTransportMotorB( OFF );
					
					startTime_FireWait = getSysTICs();	
					state_furnace = FURNACE_STATE_START;
					
					DEBUGWRITECRLF("fuel load done => state_furnace = FURNACE_STATE_START");
				}
				
				// If preset temp reached we go down
				if ( tempFurnace >= readEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) ) {
				//if ( isOverTemp() ) {
					startTime_TransportEmpty = getSysTICs();
					state_furnace = FURNACE_STATE_PREWAIT;
					DEBUGWRITECRLF("temp high => state_furnace = FURNACE_STATE_PREWAIT");
				}
				
				// If disabled go to prewait state
				if ( !( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) ) {
					startTime_TransportEmpty = getSysTICs();
					state_furnace = FURNACE_STATE_PREWAIT;
					DEBUGWRITECRLF("Deactivated => state_furnace = FURNACE_STATE_PREWAIT");
				}
	
				break;
			
			// * * * * * * * * * * * * * * * * * * * * *
			// Fire Detected
			//		Must be detected for a specific amount
			//		of time before recognized.
			// * * * * * * * * * * * * * * * * * * * * *	
			case FURNACE_STATE_FIREDETECT:
			
				// If fire detected we go active if wait time passed
				if ( getFireDetectorLevel() < getFireReferenceLevel() ) {
					// If timedout go to start
					if ( getElapsedSysTICs( startTime_LightDetect ) > ( FIRE_DETECT_TIMEOUT * ONE_SEC ) ) {
						state_furnace = FURNACE_STATE_ACTIVE;
						DEBUGWRITECRLF("Fire detected => state_furnace = FURNACE_STATE_ACTIVE");
					}
				}
				else {
					// Go back to Pre-start
					state_furnace = FURNACE_STATE_START;
					DEBUGWRITECRLF("return from fire detected => state_furnace = FURNACE_STATE_START");
				}
				break;	
			
			// * * * * * * * * * * * * * * * * * * * * *
			// Start
			//		Wait until fire is detected	
			// * * * * * * * * * * * * * * * * * * * * *
			case FURNACE_STATE_START:
				
				ctrFurnaceHeater ( ON );
				ctrFan( ON );
				ctrTransportMotorA( OFF );
				ctrTransportMotorB( OFF );
				strcpy( txtFurnaceState, "START     ");
				
				// If preset temp reached we go down
				if ( tempFurnace >= readEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) ) {
				//if ( isOverTemp() ) {
					startTime_TransportEmpty = getSysTICs();
					state_furnace = FURNACE_STATE_PREWAIT;
					DEBUGWRITECRLF("Furnace temp reached.");
					DEBUGWRITECRLF("state_furnace = FURNACE_STATE_PREWAIT");
				}
				
				// If fire detected we go active
				if ( getFireDetectorLevel() < getFireReferenceLevel() ) {
					startTime_LightDetect = getSysTICs();
					state_furnace = FURNACE_STATE_FIREDETECT;
					DEBUGWRITECRLF("Fire detected => state_furnace = FURNACE_STATE_FIREDETECT");
				}
				
				// Check for timeout
				if ( getElapsedSysTICs( startTime_FireWait ) > ( 60L * ONE_SEC * (uint32_t)readEEPROM( REGISTER_FURNACE_RESTART_TIMEOUT + VSCP_EEPROM_VSCP_END ) ) ) {
					
					cntRestarts++;	// Another start attempt
					
					if ( cntRestarts < readEEPROM( REGISTER_FURNACE_RESTART_ATTEMPTS + VSCP_EEPROM_VSCP_END ) ) {
						startTime_FireWait = getSysTICs();
						startTime_FuelLoad = getSysTICs();
						state_furnace = FURNACE_STATE_PRESTART;
						DEBUGWRITECRLF("Another restart.");
						DEBUGWRITECRLF("state_furnace = FURNACE_STATE_PRESTART");
					}
					else {
						
						state_furnace = FURNACE_STATE_FAILURE;
						DEBUGWRITECRLF("Final restart attempt.");
						DEBUGWRITECRLF("state_furnace = FURNACE_STATE_FAILURE");
						
						// Disable Furnace
						writeEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END, 
										( 0x7f & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) );
					}
				}
				
				// If disabled go to prewait state
				if ( !( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) ) {
					startTime_TransportEmpty = getSysTICs();
					state_furnace = FURNACE_STATE_PREWAIT;
					DEBUGWRITECRLF("Furnace disabled.");
					DEBUGWRITECRLF("state_furnace = FURNACE_STATE_PREWAIT");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *
			// Prewait
			//	Preset Temp reached
			//	Get ready to wait 
			// * * * * * * * * * * * * * * * * * * * * *	
			case FURNACE_STATE_PREWAIT:
			
				ctrFurnaceHeater ( OFF );
				ctrFan( ON );
				ctrTransportMotorA( OFF );
				ctrTransportMotorB( ON );
				strcpy( txtFurnaceState, "PREWAIT   ");
				
				// First transport empty
				if ( getElapsedSysTICs( startTime_TransportEmpty ) > ( ONE_SEC * 7 ) ) {
					startTime_BurnOutWait = getSysTICs();
					state_furnace = FURNACE_STATE_WAIT;
					DEBUGWRITECRLF("Tr B Timeout => state_furnace = FURNACE_STATE_WAIT");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *
			// Wait
			// 		Preset Temp reached
			//		Burn out fule in burning chamber
			// * * * * * * * * * * * * * * * * * * * * *
			case FURNACE_STATE_WAIT:
			
				ctrFurnaceHeater ( OFF );
				ctrFan( ON );
				ctrTransportMotorA( OFF );
				ctrTransportMotorB( OFF );
				strcpy( txtFurnaceState, "WAIT      ");
				
				// If temp low start up again
				if ( tempFurnace < 
						( readEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) - 
						readEEPROM( REGISTER_FURNACE_HYSTERERIS + VSCP_EEPROM_VSCP_END ) ) ) {
				//if ( !isOverTemp() ) {
							
					// Must be active to turn on again
					if ( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) {
						startTime_FuelLoad = getSysTICs();
						state_furnace = FURNACE_STATE_PRESTART;
						DEBUGWRITECRLF("Temp Low => state_furnace = FURNACE_STATE_PRESTART");
					}
					
				}
				
				// If fan timeout go to rest
				if (  getElapsedSysTICs( startTime_BurnOutWait ) > ( 60L * ONE_SEC * (uint32_t)readEEPROM( REGISTER_FAN_POST_RUN_TIME + VSCP_EEPROM_VSCP_END ) ) ) {
					startTime_TransportEmpty = getSysTICs();
					state_furnace = FURNACE_STATE_PREREST;
					DEBUGWRITECRLF("Fan Timeout => state_furnace = FURNACE_STATE_PREREST");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *
			// Furnace Active
			// 		Wait for fire out and preset temp reached
			// * * * * * * * * * * * * * * * * * * * * *
			case FURNACE_STATE_ACTIVE:
			
				cntRestarts = 0;	
				
				ctrFurnaceHeater ( OFF );
				ctrFan( ON );
				ctrTransportMotorA( ON );
				ctrTransportMotorB( ON );
				strcpy( txtFurnaceState, "ACTIVE    ");
				
				// Check that we still detect a fire
				if ( getFireDetectorLevel() > 
						( getFireReferenceLevel() + ( 256 * readEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_MSB + VSCP_EEPROM_VSCP_END ) + 
							readEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_LSB + VSCP_EEPROM_VSCP_END ) ) ) ) {
					state_furnace = FURNACE_STATE_LIGHTS_OUT;
					startTime_LightsOut = getSysTICs();
					DEBUGWRITECRLF("state_furnace = FURNACE_STATE_LIGHTS_OUT");
				}
				
				// Have preset temp been reached
				if ( tempFurnace >= readEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) ) {
				//if ( isOverTemp() ) {
					startTime_TransportEmpty = getSysTICs();
					state_furnace = FURNACE_STATE_PREWAIT;
					DEBUGWRITECRLF("state_furnace = FURNACE_STATE_PREWAIT");
				}
				
				// If disabled go to prewait state
				if ( !( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) ) {
					startTime_TransportEmpty = getSysTICs();
					state_furnace = FURNACE_STATE_PREWAIT;
					DEBUGWRITECRLF("state_furnace = FURNACE_STATE_PREWAIT");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *
			// Fire gone out in active state
			//		Try to restart
			// * * * * * * * * * * * * * * * * * * * * *
			case FURNACE_STATE_LIGHTS_OUT:
			
				ctrFurnaceHeater ( ON );
				ctrFan( ON );
				ctrTransportMotorA( OFF );
				ctrTransportMotorB( OFF );
				strcpy( txtFurnaceState, "LIGHTS OUT");
				
				startTime_FireWait = getSysTICs();
				
				// If disabled go to prewait state
				if ( !( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) ) {
					startTime_TransportEmpty = getSysTICs();
					state_furnace = FURNACE_STATE_PREWAIT;
					DEBUGWRITECRLF("state_furnace = FURNACE_STATE_PREWAIT");
				}
				else {
				
					// Lights out has been detected for timeout period and
					// we try to go back to a running state again
					if ( getElapsedSysTICs( startTime_LightsOut ) > ( LIGHTS_OUT_TIMEOUT * ONE_SEC ) ) {
						startTime_FireWait = getSysTICs();
						state_furnace = FURNACE_STATE_START;
						DEBUGWRITECRLF("state_furnace = FURNACE_STATE_PRESTART");
					}
					
					// Have preset temp been reached
					if ( tempFurnace >= readEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) ) {
					//if ( isOverTemp() ) {
						startTime_TransportEmpty = getSysTICs();
						state_furnace = FURNACE_STATE_PREWAIT;
						DEBUGWRITECRLF("state_furnace = FURNACE_STATE_PREWAIT");
					}
					
					// If disabled go to prewait state
					if ( !( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) ) {
						startTime_TransportEmpty = getSysTICs();
						state_furnace = FURNACE_STATE_PREWAIT;
						DEBUGWRITECRLF("state_furnace = FURNACE_STATE_PREWAIT");
					}
					
				}
				
				break;
			
			default:
				// This should not happen - set known state.
				state_furnace = FURNACE_STATE_WAIT;
				DEBUGWRITECRLF("state_furnace = FURNACE_STATE_WAIT");
				break;
				
		}
			
		
		///////////////////////////////////////////////////////////////////////
		// 					  Water heater state machine
		///////////////////////////////////////////////////////////////////////
		
		switch ( state_heater ) {
			
			// * * * * * * * * * * * * * * * * * * * * *
			// The Water heater is off
			//		Must be taken out of here manually
			//		or by a register write. 
			// * * * * * * * * * * * * * * * * * * * * *
			case HEATER_STATE_OFF:
				
				ctrElementA( OFF );
				ctrElementB( OFF );
				strcpy( txtHeaterState, "OFF" );
				
				// If enabled again go active
				if ( 0x80 & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END ) ) {
					state_heater = HEATER_STATE_REST;
					DEBUGWRITECRLF("state_heater = HEATER_STATE_REST");
				}
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *
			// Rest state
			//		 The preset temp has been reached.
			// * * * * * * * * * * * * * * * * * * * * *	
			case HEATER_STATE_REST:
			
				ctrElementA( OFF );
				ctrElementB( OFF );
				strcpy( txtHeaterState, "Rest" );
				
				if ( tempHeater < 
						( readEEPROM( REGISTER_WATER_HEATER_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) - 
						readEEPROM( REGISTER_WATER_HEATER_HYSTERERIS + VSCP_EEPROM_VSCP_END ) ) ) {
					startTime_WaterHeaterStage2 = getSysTICs();
					state_heater = HEATER_STATE_ON_LEVEL1;
					DEBUGWRITECRLF("state_heater = HEATER_STATE_ON_LEVEL1");
				}
				
				// If disabled go to off state
				if ( !( 0x80 & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END ) ) ) {
					state_heater = HEATER_STATE_OFF;
					DEBUGWRITECRLF("state_heater = HEATER_STATE_OFF");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *
			// Active State 1
			//		 Element A on
			// * * * * * * * * * * * * * * * * * * * * *	
			case HEATER_STATE_ON_LEVEL1:
				
				ctrElementA( ON );
				ctrElementB( OFF );
				strcpy( txtHeaterState, "A" );
				
				if ( tempHeater > ( readEEPROM( REGISTER_WATER_HEATER_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) ) ) {
					state_heater = HEATER_STATE_REST;
					DEBUGWRITECRLF("state_heater = HEATER_STATE_REST");
				}
				
				if ( getElapsedSysTICs( startTime_WaterHeaterStage2 ) > 
						( ONE_SEC * ( ( readEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_MSB + VSCP_EEPROM_VSCP_END ) << 8 ) + 
							readEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_LSB + VSCP_EEPROM_VSCP_END ) ) ) * ONE_SEC ) {
					state_heater = HEATER_STATE_ON_LEVEL2;
					DEBUGWRITECRLF("state_heater = HEATER_STATE_ON_LEVEL2");
				}
				
				// If disabled go to off state
				if ( !( 0x80 & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END ) ) ) {
					state_heater = HEATER_STATE_OFF;
					DEBUGWRITECRLF("state_heater = HEATER_STATE_OFF");
				}
				
				break;
				
			// * * * * * * * * * * * * * * * * * * * * *
			// Active State 2
			//		Element A on
			//		Element B on
			// * * * * * * * * * * * * * * * * * * * * *	
			case HEATER_STATE_ON_LEVEL2:
			
				ctrElementA( ON );
				ctrElementB( ON );
				strcpy( txtHeaterState, "A+B" );
				
				if ( tempHeater > 
						( readEEPROM( REGISTER_WATER_HEATER_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) ) ) {
					state_heater = HEATER_STATE_REST;
					DEBUGWRITECRLF("state_heater = HEATER_STATE_REST");
				}
				
				// If disabled go to off state
				if ( !( 0x80 & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END ) ) ) {
					state_heater = HEATER_STATE_OFF;
					DEBUGWRITECRLF("state_heater = HEATER_STATE_OFF");
				}
				
				break;
				
			default:
				// This should not happen - set known state.
				state_heater = HEATER_STATE_REST;
				DEBUGWRITECRLF("state_heater = HEATER_STATE_REST");
				break;
				
		}
		
		
		
		///////////////////////////////////////////////////////////////////////
		// 						Display state machine
		///////////////////////////////////////////////////////////////////////
		switch ( state_display ) {
		
			// * * * * * * * * * * * * * * * *
			//            STARTUP
			// * * * * * * * * * * * * * * * *
			case DISPLAY_STATE_STARTUP:
			
				strcpy( gdisplaybuf1, "the HULK II" );
				strcpy( gdisplaybuf2, FIRMWARE_TEXT_VERSION );
				break;
			
			// * * * * * * * * * * * * * * * *
			//             HULK 
			// * * * * * * * * * * * * * * * *
			case DISPLAY_STATE_HULK:
			
				strcpy( gdisplaybuf1, "HULK: " );
				strcat( gdisplaybuf1, txtFurnaceState );
				
				// Check buttons
				if ( BtnUp() ) {
					nDispHulk++;
					if ( nDispHulk > 2 ) nDispHulk = 0;
				}
				
				if ( BtnDown() ) {
					nDispHulk--;
					if ( nDispHulk < 0 ) nDispHulk = 2;
				}
				
				if ( BtnForward() ) {
					// Next menu
					state_display = DISPLAY_STATE_HEATER;
				}
				
				switch( nDispHulk ) {
				
					case 0:
						strcpy( gdisplaybuf2, "Temp out: " );
						strcat( gdisplaybuf2, _itoa( tempFurnace, wrkbuf, 10 ) );
						strcat( gdisplaybuf2, "C" );
						break;
						
					case 1:
						strcpy( gdisplaybuf2, "Temp return: " );
						strcat( gdisplaybuf2, _itoa( tempHeater, wrkbuf, 10 ) );
						strcat( gdisplaybuf2, "C" );
						break;
	
					case 2:
						strcpy( gdisplaybuf2, "Temp Tr.B: " );
						strcat( gdisplaybuf2, _itoa( tempFurnace, wrkbuf, 10 ) );
						strcat( gdisplaybuf2, "C" );
						break;
	
					default:	
						nDispHulk = 0;
						break;
						
				}
				
				break;
				
				
				
			// * * * * * * * * * * * * * * * *
			//            HEATER
			// * * * * * * * * * * * * * * * *	
			case DISPLAY_STATE_HEATER:
			
				// Check buttons
				if ( BtnUp() ) {
					nDispHeater++;
					if ( nDispHeater > 1 ) nDispHeater = 0;
				}
				
				if ( BtnDown() ) {
					nDispHeater--;
					if ( nDispHeater < 0 ) nDispHeater = 1;
				}
				
				if ( BtnForward() ) {
					// Next menu
					state_display = DISPLAY_STATE_STATUS1;
				}
			
				strcpy( gdisplaybuf1, "Heater: " );
				strcat( gdisplaybuf1, txtHeaterState );
				
				switch( nDispHeater ) {
				
					case 0:
						strcpy( gdisplaybuf2, "Temp core: " );
						strcat( gdisplaybuf2, _itoa( tempHeater, wrkbuf, 10 ) );
						strcat( gdisplaybuf2, "C" );
						break;
						
					case 1:
						strcpy( gdisplaybuf2, "Temp water: " );
						strcat( gdisplaybuf2, _itoa( tempHeater, wrkbuf, 10 ) );
						strcat( gdisplaybuf2, "C" );
						break;
	
					default:	
						nDispHulk = 0;
						break;
						
				}
				
				break;
			
			// * * * * * * * * * * * * * * * *
			//            STATUS1
			// * * * * * * * * * * * * * * * *
			case DISPLAY_STATE_STATUS1:
				
				if ( BtnForward() ) {
					// Next menu
					state_display = DISPLAY_STATE_STATUS2;
				}
				
				strcpy( gdisplaybuf1, "Temp out: " );
				strcat( gdisplaybuf1, _itoa( tempHeater, wrkbuf, 10 ) );
				strcat( gdisplaybuf1, "C" );
				
				strcpy( gdisplaybuf2, "Temp return: " );
				strcat( gdisplaybuf2, _itoa( tempHeater, wrkbuf, 10 ) );
				strcat( gdisplaybuf2, "C" );
				
				break;
			
			// * * * * * * * * * * * * * * * *
			//            STATUS2
			// * * * * * * * * * * * * * * * *
			case DISPLAY_STATE_STATUS2:
			
				if ( BtnForward() ) {
					// Next menu
					state_display = DISPLAY_STATE_STATUS3;
				}
				
				strcpy( gdisplaybuf1, "Temp core: " );
				strcat( gdisplaybuf1, _itoa( tempHeater, wrkbuf, 10 ) );
				strcat( gdisplaybuf1, "C" );
				
				strcpy( gdisplaybuf2, "Temp water: " );
				strcat( gdisplaybuf2, _itoa( tempHeater, wrkbuf, 10 ) );
				strcat( gdisplaybuf2, "C" );
				
				break;
				
			// * * * * * * * * * * * * * * * *
			//            STATUS3
			// * * * * * * * * * * * * * * * *
			case DISPLAY_STATE_STATUS3:
			
				if ( BtnForward() ) {
					// Next menu
					state_display = DISPLAY_STATE_PRECONFIGURE;
				}
				
				strcpy( gdisplaybuf1, "Fire level: " );
				strcat( gdisplaybuf1, _itoa( getFireDetectorLevel(), wrkbuf, 10 ) );
				
				strcpy( gdisplaybuf2, "Ref. level: " );
				strcat( gdisplaybuf2, _itoa( getFireReferenceLevel(), wrkbuf, 10 ) );
				
				break;	
				
			// * * * * * * * * * * * * * * * *
			//           PRE-CONFIGURE
			// * * * * * * * * * * * * * * * *	
			case DISPLAY_STATE_PRECONFIGURE:
			
				strcpy( gdisplaybuf1, "Press enter for" );
				strcpy( gdisplaybuf2, "config state." );
				
				if ( BtnEnter() ) {
					state_display = DISPLAY_STATE_CONFIGURE;
					state_config = CONFIG_STATE_FURNACE_ENABLE;
					config_val = getConfigValue( CONFIG_STATE_FURNACE_ENABLE );
				}
				
				if ( BtnForward() ) {
					// Next menu
					state_display = DISPLAY_STATE_HULK;
				}
				
				break;
				
			// * * * * * * * * * * * * * * * *
			//           CONFIGURE
			// * * * * * * * * * * * * * * * *	
			case DISPLAY_STATE_CONFIGURE:
				// We are in the configure state machine
				break;	
				
			// * * * * * * * * * * * * * * * *
			//             ALARM
			// * * * * * * * * * * * * * * * *	
			case DISPLAY_STATE_ALARM:
			
				if ( BtnForward() ) {
					// Next menu
					state_display = DISPLAY_STATE_HULK;
				}
				
				break;
			
			default:
				// This should not happen - set known state.
				state_display = DISPLAY_STATE_HULK;
				break;	
		}
		
		// Pad to fill display area
		padBuf( gdisplaybuf1 );
		padBuf( gdisplaybuf2 );
		
		///////////////////////////////////////////////////////////////////////
		// 						Configuration state machine 
		///////////////////////////////////////////////////////////////////////
		
		if ( DISPLAY_STATE_CONFIGURE == state_display ) {
		
			switch ( state_config ) {
			
				// * * * * * * * * * * * * * * * *
				//       HEATER TEMP. SETPOINT
				// * * * * * * * * * * * * * * * *	
				case CONFIG_STATE_PRESET_HEATER_TEMP:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_PRESET_FURNACE_TEMP;
						config_val = getConfigValue( CONFIG_STATE_PRESET_FURNACE_TEMP );
					}
					
					if ( BtnUp() ) {
						config_val++;
						if ( config_val > 95 ) config_val = 100;
					}
					
					if ( BtnDown() ) {
						config_val--;
						if ( config_val < 0 ) config_val = 0;
					}
					
					if ( BtnEnter() ) {  
						writeEEPROM( REGISTER_WATER_HEATER_PRESET_TEMP + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_PRESET_HEATER_TEMP );
					}
				
					strcpy( gdisplaybuf1, "cfg: Hot water" );
					strcpy( gdisplaybuf2, "Setpoint " );
					strcat( gdisplaybuf2, _itoa( config_val, wrkbuf, 10 ) );
					strcat( gdisplaybuf2, "C " );
					if ( config_val != readEEPROM( REGISTER_WATER_HEATER_PRESET_TEMP + VSCP_EEPROM_VSCP_END ) ) {
						strcat( gdisplaybuf2, "*" );
					}
					
					break;
				
				// * * * * * * * * * * * * * * * *
				//      FURNACE TEMP. SETPOINT
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_PRESET_FURNACE_TEMP:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_FUEL_TRANSPORT_FILL_TIME;
						config_val = getConfigValue( CONFIG_STATE_FUEL_TRANSPORT_FILL_TIME );
					}
					
					if ( BtnUp() ) {
						config_val++;
						if ( config_val > 100 ) config_val = 100;
					}
					
					if ( BtnDown() ) {
						config_val--;
						if ( config_val < 0 ) config_val = 0;
					}
					
					if ( BtnEnter() ) {
						writeEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_PRESET_FURNACE_TEMP );
					}
				
					strcpy( gdisplaybuf1, "cfg:Furnace temp" );
					strcpy( gdisplaybuf2, "Setpoint " );
					strcat( gdisplaybuf2, _itoa( config_val, wrkbuf, 10 ) );
					strcat( gdisplaybuf2, " C" );
					if ( config_val != readEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END  ) ) {
						strcat( gdisplaybuf2, "*" );
					}
					
					break;
				
				// * * * * * * * * * * * * * * * *
				//       TRANSPORT FILL TIME
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_FUEL_TRANSPORT_FILL_TIME:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_FUEL_TRANSPORT_POST_TIME;
						config_val = getConfigValue( CONFIG_STATE_FUEL_TRANSPORT_POST_TIME );
					}
					
					if ( BtnUp() ) {
						config_val++;
						if ( config_val > 255 ) config_val = 255;
					}
					
					if ( BtnDown() ) {
						config_val--;
						if ( config_val < 0 ) config_val = 0;
					}
					
					if ( BtnEnter() ) {
						writeEEPROM( REGISTER_TRANSPORT_FUEL_FILL_TIME + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_FUEL_TRANSPORT_FILL_TIME );
					}
				
					strcpy( gdisplaybuf1, "cfg:Fill time" );
					strcpy( gdisplaybuf2, "Setpoint " );
					strcat( gdisplaybuf2, _itoa( config_val, wrkbuf, 10 ) );
					strcat( gdisplaybuf2, "s " );
					if ( config_val != readEEPROM( REGISTER_TRANSPORT_FUEL_FILL_TIME + VSCP_EEPROM_VSCP_END  ) ) {
						strcat( gdisplaybuf2, "*" );
					}
					
					break;
				
				// * * * * * * * * * * * * * * * *
				//       TRANSPORT POST TIME     
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_FUEL_TRANSPORT_POST_TIME:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_FAN_END_TIME;
						config_val = getConfigValue( CONFIG_STATE_FAN_END_TIME );
					}
					
					if ( BtnUp() ) {
						config_val++;
						if ( config_val > 255 ) config_val = 255;
					}
					
					if ( BtnDown() ) {
						config_val--;
						if ( config_val < 0 ) config_val = 0;
					}
					
					if ( BtnEnter() ) {
						writeEEPROM( REGISTER_TRANSPORTB_POST_RUN_TIME + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_FUEL_TRANSPORT_POST_TIME );
					}
				
					strcpy( gdisplaybuf1, "cfg:Tr. B end" );
					strcpy( gdisplaybuf2, "Setpoint " );
					strcat( gdisplaybuf2, _itoa( config_val, wrkbuf, 10 ) );
					strcat( gdisplaybuf2, "s " );
					if ( config_val != readEEPROM( REGISTER_TRANSPORTB_POST_RUN_TIME + VSCP_EEPROM_VSCP_END  ) ) {
						strcat( gdisplaybuf2, "*" );
					}
					
					break;
				
				// * * * * * * * * * * * * * * * *
				//           FAN END TIME
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_FAN_END_TIME:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_RESTART_TIMEOUT;
						config_val = getConfigValue( CONFIG_STATE_RESTART_TIMEOUT );
					}
					
					if ( BtnUp() ) {
						config_val++;
						if ( config_val > 60 ) config_val = 60;
					}
					
					if ( BtnDown() ) {
						config_val--;
						if ( config_val < 0 ) config_val = 0;
					}
					
					if ( BtnEnter() ) {
						writeEEPROM( REGISTER_FAN_POST_RUN_TIME + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_FAN_END_TIME );
					}
				
					strcpy( gdisplaybuf1, "cfg:Fan end" );
					strcpy( gdisplaybuf2, "Setpoint " );
					strcat( gdisplaybuf2, _itoa( config_val, wrkbuf, 10 ) );
					strcat( gdisplaybuf2, "m " );
					if ( config_val != readEEPROM( REGISTER_FAN_POST_RUN_TIME + VSCP_EEPROM_VSCP_END  ) ) {
						strcat( gdisplaybuf2, "*" );
					}
					
					break;
				
				// * * * * * * * * * * * * * * * *
				//         RESTART TIMEOUT
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_RESTART_TIMEOUT:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_RESTART_ATTEMPTS;
						config_val = getConfigValue( CONFIG_STATE_RESTART_ATTEMPTS );
					}
					
					if ( BtnUp() ) {
						config_val++;
						if ( config_val > 255 ) config_val = 255;
					}
					
					if ( BtnDown() ) {
						config_val--;
						if ( config_val < 0 ) config_val = 0;
					}
					
					if ( BtnEnter() ) {
						writeEEPROM( REGISTER_FURNACE_RESTART_TIMEOUT + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_RESTART_TIMEOUT );
					}
				
					strcpy( gdisplaybuf1, "cfg:restart t.o." );
					strcpy( gdisplaybuf2, "Setpoint " );
					strcat( gdisplaybuf2, _itoa( config_val, wrkbuf, 10 ) );
					strcat( gdisplaybuf2, "m " );
					if ( config_val != readEEPROM( REGISTER_FURNACE_RESTART_TIMEOUT + VSCP_EEPROM_VSCP_END  ) ) {
						strcat( gdisplaybuf2, "*" );
					}
					
					break;
				
				// * * * * * * * * * * * * * * * *
				//       SET RESTART ATTEMPTS
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_RESTART_ATTEMPTS:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_LEAVE;
					}
					
					if ( BtnUp() ) {
						config_val++;
						if ( config_val > 255 ) config_val = 255;
					}
					
					if ( BtnDown() ) {
						config_val--;
						if ( config_val < 0 ) config_val = 0;
					}
					
					if ( BtnEnter() ) {
						writeEEPROM( REGISTER_FURNACE_RESTART_ATTEMPTS + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_RESTART_ATTEMPTS );
					}
				
					strcpy( gdisplaybuf1, "cfg:# restarts" );
					strcpy( gdisplaybuf2, "Setpoint " );
					strcat( gdisplaybuf2, _itoa( config_val, wrkbuf, 10 ) );
					strcat( gdisplaybuf2, " " );
					if ( config_val != readEEPROM( REGISTER_FURNACE_RESTART_ATTEMPTS + VSCP_EEPROM_VSCP_END  ) ) {
						strcat( gdisplaybuf2, "*" );
					}
					
					break;
				
				// * * * * * * * * * * * * * * * *
				//         ENABLE FURNACE    
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_FURNACE_ENABLE:
					
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_HEATER_ENABLE;
						config_val = getConfigValue( CONFIG_STATE_HEATER_ENABLE );
					}
					
					if ( BtnUp() ) {
						config_val = config_val ? FALSE : TRUE;
						
					}
					
					if ( BtnDown() ) {
						config_val = config_val ? FALSE : TRUE;
					}
					
					if ( BtnEnter() ) {
						if ( config_val ) {
							config_val = 0x80 | readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END  );
						}
						else {
							config_val = 0x7F & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END  );
						}
						
						writeEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_FURNACE_ENABLE );
						
						state_furnace = FURNACE_STATE_REST;
						startTime_millisec = getSysTICs();
						startTime_FuelLoad = getSysTICs();
						startTime_TransportEmpty = getSysTICs();
						startTime_FireWait = getSysTICs();
			 
					}
				
					strcpy( gdisplaybuf1, "cfg: Furnace" );
					strcpy( gdisplaybuf2, "enabled = " );
					if ( config_val ) {
						strcat( gdisplaybuf2, "ON" );
					}
					else {
						strcat( gdisplaybuf2, "OFF" );
					}
					
					break;
				
				// * * * * * * * * * * * * * * * *
				//          ENABLE HEATER 
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_HEATER_ENABLE:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_ALARM_ENABLE;
						config_val = getConfigValue( CONFIG_STATE_ALARM_ENABLE );
					}
					
					if ( BtnUp() ) {
						config_val = config_val ? FALSE : TRUE;
						
					}
					
					if ( BtnDown() ) {
						config_val = config_val ? FALSE : TRUE;
					}
					
					if ( BtnEnter() ) {
						if ( config_val ) {
							config_val = 0x80 | readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END  );
						}
						else {
							config_val = 0x7F & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END  );
						}
						writeEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_HEATER_ENABLE );
					}
				
					strcpy( gdisplaybuf1, "cfg: Heater" );
					strcpy( gdisplaybuf2, "enabled = " );
					if ( config_val ) {
						strcat( gdisplaybuf2, "ON" );
					}
					else {
						strcat( gdisplaybuf2, "OFF" );
					}
					
					break;
				
				// * * * * * * * * * * * * * * * *
				//         ENABLE ALARM     
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_ALARM_ENABLE:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_PRESET_HEATER_TEMP;
						config_val = getConfigValue( CONFIG_STATE_PRESET_HEATER_TEMP );
					}
					
					if ( BtnUp() ) {
						config_val = config_val ? FALSE : TRUE;
						
					}
					
					if ( BtnDown() ) {
						config_val = config_val ? FALSE : TRUE;
					}
					
					if ( BtnEnter() ) {
						if ( config_val ) {
							config_val = 0x40 | readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END  );
						}
						else {
							config_val = 0xBF & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END  );
						}
						writeEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END, config_val );
						config_val = getConfigValue( CONFIG_STATE_ALARM_ENABLE );
					}
				
					strcpy( gdisplaybuf1, "cfg: Alarm" );
					strcpy( gdisplaybuf2, "enabled = " );
					if ( config_val ) {
						strcat( gdisplaybuf2, "ON" );
					}
					else {
						strcat( gdisplaybuf2, "OFF" );
					}
					break;
				
				// * * * * * * * * * * * * * * * *
				//           LEAVE CONFIG
				// * * * * * * * * * * * * * * * *
				case CONFIG_STATE_LEAVE:
				
					if ( BtnForward() ) {
						// Next config value
						state_config = CONFIG_STATE_FURNACE_ENABLE;
						config_val = getConfigValue( CONFIG_STATE_FURNACE_ENABLE );
					}
					
					if ( BtnEnter() ) {
						// Leave config state
						state_config = CONFIG_STATE_PRESET_HEATER_TEMP;
						state_display = DISPLAY_STATE_HULK;
					}
					
					strcpy( gdisplaybuf1, "Press Enter to" );
					strcpy( gdisplaybuf2, "leave config." );
					
					break;
			
	
				default:
					// This should not happen - set known state.
					state_config = CONFIG_STATE_LEAVE;
					break;
					
			} // case
			
			// Pad to fill display area
			padBuf( gdisplaybuf1 );
			padBuf( gdisplaybuf2 );
		
		} // if configure state
		
    } // While forever....

	return 0; // Should never come here
  
} // Main


///////////////////////////////////////////////////////////////////////////////
// getConfigValue
//

static uint8_t getConfigValue( uint8_t state )
{
	uint8_t rv;
	
	switch ( state ) {
			
		case CONFIG_STATE_PRESET_HEATER_TEMP:
			rv = readEEPROM( REGISTER_WATER_HEATER_PRESET_TEMP + VSCP_EEPROM_VSCP_END  );
			break;
				
		case CONFIG_STATE_PRESET_FURNACE_TEMP:
			rv = readEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END  );
			break;
				
		case CONFIG_STATE_FUEL_TRANSPORT_FILL_TIME:
			rv = readEEPROM( REGISTER_TRANSPORT_FUEL_FILL_TIME + VSCP_EEPROM_VSCP_END  );	
			break;
				
		case CONFIG_STATE_FUEL_TRANSPORT_POST_TIME:
			rv = readEEPROM( REGISTER_TRANSPORTB_POST_RUN_TIME + VSCP_EEPROM_VSCP_END  );	
			break;
				
		case CONFIG_STATE_FAN_END_TIME:
			rv = readEEPROM( REGISTER_FAN_POST_RUN_TIME + VSCP_EEPROM_VSCP_END  );
			break;
				
		case CONFIG_STATE_RESTART_TIMEOUT:
			rv = readEEPROM( REGISTER_FURNACE_RESTART_TIMEOUT + VSCP_EEPROM_VSCP_END  );
			break;
				
		case CONFIG_STATE_RESTART_ATTEMPTS:
			rv = readEEPROM( REGISTER_FURNACE_RESTART_ATTEMPTS + VSCP_EEPROM_VSCP_END  );
			break;
				
		case CONFIG_STATE_FURNACE_ENABLE:
			rv = ( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END  ) );
			break;
				
		case CONFIG_STATE_HEATER_ENABLE:
			rv = ( 0x80 & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END  ) );
			break;
				
		case CONFIG_STATE_ALARM_ENABLE:
			rv = ( 0x40 & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END  ) );
			break;
				
		case CONFIG_STATE_LEAVE:
			rv = 0;
			break;
			
		default:
			rv = 0;
			break;
					
	} // case

	return rv;
}

 

/******************************************************************************
 *
 * Function Name: getFireDetectorLevel()
 *
 * Description:
 *    Get A/D value from channel 0 of A/D converter 0. This is the fire detector.
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    the A/D value.
 *
 *****************************************************************************/
static unsigned int getFireDetectorLevel( void )
{
	unsigned mycpsr;
	unsigned int val; // chan;
	
	// sample AIN0 only => bit 0 = 1 
	// CLKDIV = 14 (59/14 = 4.21 < 4.5 MHz) => Bits 8ff = 14-1
	// BURST = 1 => set Bit 16 - wuff: disabled below
	// PDN   = 1 => set Bit 21
	AD0CR = ( 1 | ( ( 14 - 1 ) << 8 ) /*| (1UL<<16)*/ | ( 1UL << 21 ) );
	
	AD0CR  |= ( 1UL << 24 );  					// Start A/D Conversion (START:0=1) 
	
	mycpsr = disableIRQ();
	WDFEED = 0xAA; WDFEED = 0x55;
	restoreIRQ( mycpsr );
		
	while ( ( AD0DR & ( 1UL << 31 ) ) == 0 ); // Wait for the conversion to complete (DONE=1)
	val = ( ( AD0DR >> 6) & 0x03FF );			// Extract the A/D result
	//chan = ( ( AD0DR >> 24) &0x0007 ); 		// Channel (should be 0)
	
	return val;
}

/******************************************************************************
 *
 * Function Name: getFireReferenceLevel()
 *
 * Description:
 *    Get A/D value from channel 1 of A/D converter 0. This is the reference value
 *	  for the fire detector 0-3V.
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    the A/D value.
 *
 *****************************************************************************/
static unsigned int getFireReferenceLevel( void )
{
	unsigned mycpsr;
	unsigned int val; // chan;
	
	// sample AIN1 only => bit 1 = 1 
	// CLKDIV = 14 (59/14 = 4.21 < 4.5 MHz) => Bits 8ff = 14-1
	// BURST = 1 => set Bit 16 - wuff: disabled below
	// PDN   = 1 => set Bit 21
	AD0CR = ( 2 | ( ( 14 - 1 ) << 8 ) /*| (1UL<<16)*/ | ( 1UL << 21 ) );
	
	AD0CR  |= ( 1UL << 24 );  					// Start A/D Conversion (START:0=1) 
	
	mycpsr = disableIRQ();
	WDFEED = 0xAA; WDFEED = 0x55;
	restoreIRQ( mycpsr );
		
	while ( ( AD0DR & ( 1UL << 31 ) ) == 0 ); // Wait for the conversion to complete (DONE=1)
	val = ( ( AD0DR >> 6) & 0x03FF );			// Extract the A/D result
	
	return val;
}

/******************************************************************************
 *
 * Function Name: getHeaterTemp()
 *
 * Description:
 *    Get electrical heater core temperature.
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    Current temperature as an integer.
 *
 *****************************************************************************/
static int getHeaterTemp( void )
{
	unsigned mycpsr;
	uint32_t low;
	uint32_t high;
	uint32_t i;
	
	high = low = 0;
	
	mycpsr = disableIRQ();
	
	for ( i=0; i<0x10000; i++) {
		
		WDFEED = 0xAA; WDFEED = 0x55;
		
		if ( IOPIN0 & PIO0_ECORE_TEMP_BIT ) {
			high++;
		}
		else {
			low++;
		}
	}
	
	restoreIRQ( mycpsr );
	return ( ( ( 100000l * (unsigned long)high ) / 0xffff ) - 32000l ) / 470l;	
}


/******************************************************************************
 *
 * Function Name: getFurnaceTemp()
 *
 * Description:
 *    Get Furnace core temperature.
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    Current temperature as an integer.
 *
 *****************************************************************************/
static int getFurnaceTemp( void )
{
	unsigned mycpsr;
	uint32_t low;
	uint32_t high;
	uint32_t i;
	
	high = low = 0;
	
	mycpsr = disableIRQ();
	
	for ( i=0; i<0x10000; i++) {
		
		WDFEED = 0xAA; WDFEED = 0x55;
		
		if ( IOPIN0 & PIO0_FURNACE_TEMP_BIT ) {
			high++;
		}
		else {
			low++;
		}
	}
	
	restoreIRQ( mycpsr );
	return ( ( ( 100000l * (unsigned long)high ) / 0xffff ) - 32000l ) / 470l;	
}



///////////////////////////////////////////////////////////////////////////////
// ctrlFan
//

static void ctrFan( BOOL state )
{
	if ( state ) {
		if ( !( IOPIN1 & PIO1_FAN_BIT ) ) {
			IOSET1 = PIO1_FAN_BIT;
			sendRelayState( subzone_furnace_fan, ON );
			DEBUGWRITECRLF("Fan ON");
		}
	}
	else {
		if ( IOPIN1 & PIO1_FAN_BIT ) {
			IOCLR1 = PIO1_FAN_BIT;
			sendRelayState( subzone_furnace_fan, OFF );
			DEBUGWRITECRLF("Fan OFF");
		}
	}
}

///////////////////////////////////////////////////////////////////////////////
// ctrTransportMotorA
//

static void ctrTransportMotorA( BOOL state )
{
	if ( state ) {
		if ( !( IOPIN1 & PIO1_TR_MOTOR_A_BIT ) ) {
			IOSET1 = PIO1_TR_MOTOR_A_BIT;
			sendRelayState( subzone_transport_A, ON );
			DEBUGWRITECRLF("Motor A ON");
		}
	}
	else {
		if ( IOPIN1 & PIO1_TR_MOTOR_A_BIT ) {
			IOCLR1 = PIO1_TR_MOTOR_A_BIT;
			sendRelayState( subzone_transport_A, OFF );
			DEBUGWRITECRLF("Motor A OFF");
		}
	}
}


///////////////////////////////////////////////////////////////////////////////
// ctrTransportMotorB
//

static void ctrTransportMotorB( BOOL state )
{
	if ( state ) {
		if ( !( IOPIN1 & PIO1_TR_MOTOR_B_BIT ) ) {
			IOSET1 = PIO1_TR_MOTOR_B_BIT;
			sendRelayState( subzone_transport_B, ON );
			DEBUGWRITECRLF("Motor B ON");
		}
	}
	else {
		if ( IOPIN1 & PIO1_TR_MOTOR_B_BIT ) {
			IOCLR1 = PIO1_TR_MOTOR_B_BIT;
			sendRelayState( subzone_transport_B, OFF );
			DEBUGWRITECRLF("Motor B OFF");
		}
	}
}


///////////////////////////////////////////////////////////////////////////////
// ctrFurnaceHeater
//

static void ctrFurnaceHeater( BOOL state )
{
	if ( state ) {
		if ( !( IOPIN1 & PIO1_FURNACE_HEATER_BIT ) ) {
			IOSET1 = PIO1_FURNACE_HEATER_BIT;
			sendRelayState( subzone_furnace_heater, ON );
			DEBUGWRITECRLF("Furnace heater ON");
		}
	}
	else {
		if ( IOPIN1 & PIO1_FURNACE_HEATER_BIT ) {
			IOCLR1 = PIO1_FURNACE_HEATER_BIT;
			sendRelayState( subzone_furnace_heater, OFF );
			DEBUGWRITECRLF("Furnace heater OFF");
		}
	}
}


///////////////////////////////////////////////////////////////////////////////
// ctrAlarm
//

static void ctrAlarm( BOOL state )
{
	if ( state ) {
		if ( !( IOPIN1 & PIO1_ALARM_BIT ) ) {
			IOSET1 = PIO1_ALARM_BIT;
			DEBUGWRITECRLF("Alarm ON");
		}
	}
	else {
		if ( IOPIN1 & PIO1_ALARM_BIT ) {
			IOCLR1 = PIO1_ALARM_BIT;
			DEBUGWRITECRLF("Alarm OFF");
		}
	}
}


///////////////////////////////////////////////////////////////////////////////
// ctrElementA
//

static void ctrElementA( BOOL state )
{
	if ( state ) {
		if ( !( IOPIN1 & PIO1_EHEATER_ELEMENTA_BIT ) ) {
			IOSET1 = PIO1_EHEATER_ELEMENTA_BIT;
			sendRelayState( subzone_heater_ElementA, ON );
			DEBUGWRITECRLF("Water heater elemet A ON");
		}
	}
	else {
		if ( IOPIN1 & PIO1_EHEATER_ELEMENTA_BIT ) {
			IOCLR1 = PIO1_EHEATER_ELEMENTA_BIT;
			sendRelayState( subzone_heater_ElementA, OFF );
			DEBUGWRITECRLF("Water heater elemet A OFF");
		}
	}
}


///////////////////////////////////////////////////////////////////////////////
// ctrElementB
//

static void ctrElementB( BOOL state )
{
	if ( state ) {
		if ( !( IOPIN1 & PIO1_EHEATER_ELEMENTB_BIT ) ) {
			IOSET1 = PIO1_EHEATER_ELEMENTB_BIT;
			sendRelayState( subzone_heater_ElementB, ON );
			DEBUGWRITECRLF("Water heater element B ON");
		}
	}
	else {
		if ( IOPIN1 & PIO1_EHEATER_ELEMENTB_BIT ) {
			IOCLR1 = PIO1_EHEATER_ELEMENTB_BIT;
			sendRelayState( subzone_heater_ElementB, OFF );
			DEBUGWRITECRLF("Water heater element B OFF");
		}
	}
}


///////////////////////////////////////////////////////////////////////////////
// isOverTemp
//
// Returns true if temperature above setpoint
//

static BOOL isOverTemp( void )
{
	BOOL p1,p2,p3;
	
	p1 = ( IOPIN0 & PIO0_OVER_TEMP_BIT );
	pause( 10 );
	
	p2 = ( IOPIN0 & PIO0_OVER_TEMP_BIT );
	pause( 10 );
	
	p3 = ( IOPIN0 & PIO0_OVER_TEMP_BIT );
	
	return !( p1 || p2 || p3);
}


///////////////////////////////////////////////////////////////////////////////
// init_app_eeprom
//

static void init_app_eeprom( void )
{
	writeEEPROM( REGISTER_ZONE + VSCP_EEPROM_VSCP_END, DEFAULT_ZONE );
	writeEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END, DEFAULT_STATES0 );
	writeEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END, DEFAULT_STATES1 );
	writeEEPROM( REGISTER_TRANSPORTB_ALARM_POINT + VSCP_EEPROM_VSCP_END, DEFAULT_TRANSPORTB_ALARM_POINT );
	writeEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END, DEFAULT_FURNACE_PRESET_TEMP );
	writeEEPROM( REGISTER_WATER_HEATER_PRESET_TEMP + VSCP_EEPROM_VSCP_END, DEFAULT_WATER_HEATER_PRESET_TEMP );
	writeEEPROM( REGISTER_WATER_HEATER_CONTROL + VSCP_EEPROM_VSCP_END, DEFAULT_WATER_HEATER_CONTROL );
	writeEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_MSB + VSCP_EEPROM_VSCP_END, DEFAULT_WATER_HEATER_STAGE2_DELAY_MSB );
	writeEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_LSB + VSCP_EEPROM_VSCP_END, DEFAULT_WATER_HEATER_STAGE2_DELAY_LSB );
	writeEEPROM( REGISTER_FAN_POST_RUN_TIME + VSCP_EEPROM_VSCP_END, DEFAULT_FAN_POST_RUN_TIME );
	writeEEPROM( REGISTER_TRANSPORTB_POST_RUN_TIME + VSCP_EEPROM_VSCP_END, DEFAULT_TRANSPORTB_POST_RUN_TIME );
	writeEEPROM( REGISTER_TRANSPORT_FUEL_FILL_TIME + VSCP_EEPROM_VSCP_END, DEFAULT_TRANSPORT_FUEL_FILL_TIME );
	writeEEPROM( REGISTER_FURNACE_RESTART_TIMEOUT + VSCP_EEPROM_VSCP_END, DEFAULT_FURNACE_RESTART_TIMEOUT );
	writeEEPROM( REGISTER_FURNACE_RESTART_ATTEMPTS + VSCP_EEPROM_VSCP_END, DEFAULT_FURNACE_RESTART_ATTEMPTS );
	writeEEPROM( REGISTER_WATER_HEATER_HYSTERERIS + VSCP_EEPROM_VSCP_END, DEFAULT_WATER_HEATER_HYSTERERIS );
	writeEEPROM( REGISTER_FURNACE_HYSTERERIS + VSCP_EEPROM_VSCP_END, DEFAULT_FURNACE_HYSTERERIS );
	writeEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_MSB + VSCP_EEPROM_VSCP_END, DEFAULT_FIRE_DETECTOR_HYSTERERSIS_MSB );
	writeEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_LSB + VSCP_EEPROM_VSCP_END, DEFAULT_FIRE_DETECTOR_HYSTERERSIS_LSB );
	
	DEBUGWRITECRLF("Init Epprom");
}


///////////////////////////////////////////////////////////////////////////////
// read_app_register
//

void read_app_register( unsigned char reg )
{
	//int tmpval;
	uint8_t val;
	//unsigned char unit = readEEPROM( EEPROM_TEMP_UNIT );

	vscp_omsg.priority = VSCP_PRIORITY_MEDIUM;
	vscp_omsg.flag = VSCP_VALID_MSG + 2;
	vscp_omsg.class = VSCP_CLASS1_PROTOCOL;
	vscp_omsg.type = VSCP_TYPE_PROTOCOL_RW_RESPONSE;

	vscp_omsg.data[ 0 ] = reg;
	vscp_omsg.data[ 1 ] = 0x00; // default read

	switch ( reg ) {
	
		// Zone
		case REGISTER_ZONE:
			vscp_omsg.data[ 1 ] =  readEEPROM( REGISTER_ZONE + VSCP_EEPROM_VSCP_END );
			break;
			
		// States 0
		case REGISTER_STATES0:
			val = 0;
			if ( IOPIN1 & PIO1_TR_MOTOR_A_BIT ) val |= 0x01;
			if ( IOPIN1 & PIO1_TR_MOTOR_B_BIT ) val |= 0x02;
			if ( IOPIN1 & PIO1_FAN_BIT ) val |= 0x04;
			if ( IOPIN1 & PIO1_FURNACE_HEATER_BIT ) val |= 0x08;
			if ( 0x80 & readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END ) ) val |= 0x80;
			vscp_omsg.data[ 1 ] =  val;
			break;	
			
		// States 1
		case REGISTER_STATES1:
			val = 0;
			if ( IOPIN1 & PIO1_EHEATER_ELEMENTA_BIT ) val |= 0x01;
			if ( IOPIN1 & PIO1_EHEATER_ELEMENTB_BIT ) val |= 0x02;
			if ( IOPIN1 & PIO1_ALARM_BIT ) val |= 0x20;
			if ( 0x40 & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END ) ) val |= 0x40;
			if ( 0x80 & readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END ) )val |= 0x80;
			vscp_omsg.data[ 1 ] =  val;
			break;	
			
		// Fire Detector MSB
		case REGISTER_FIRE_DETECTOR_MSB:
			vscp_omsg.data[ 1 ] = getFireDetectorLevel() >> 8;
			break;
			
		// Fire Detector LSB
		case REGISTER_FIRE_DETECTOR_LSB:
			vscp_omsg.data[ 1 ] = getFireDetectorLevel() & 0xff;
			break;	
			
		// Fire Detector reference MSB
		case REGISTER_FIRE_DETECTOR_REFERENCE_MSB:
			vscp_omsg.data[ 1 ] = getFireReferenceLevel() >> 8;
			break;
			
		// Fire Detector reference LSB
		case REGISTER_FIRE_DETECTOR_REFERENCE_LSB:
			vscp_omsg.data[ 1 ] = getFireReferenceLevel() & 0xff;
			break;		
						
		case REGISTER_FURNACE_WATER_OUT_TEMP:
			vscp_omsg.data[ 1 ] = tempFurnace;
			break;
		
		case REGISTER_FURNACE_WATER_RETURN_TEMP:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_TRANSPORTB_TEMP:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_TRANSPORTB_ALARM_POINT:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_FURNACE_PRESET_TEMP:
			break;
			
		case REGISTER_WATER_HEATER_CORE_TEMP:
			vscp_omsg.data[ 1 ] = tempHeater;
			break;	
			
		case REGISTER_WATER_HEATER_PRESET_TEMP:
			break;
			
		case REGISTER_WATER_HEATER_WATER_TEMP:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_SMOKE_GAS_TEMP_MSB:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_SMOKE_GAS_TEMP_LSB:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_CO_MEASUREMENT_MSB:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_CO_MEASUREMENT_LSB:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_WATER_HEATER_CONTROL:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_WATER_HEATER_CONTROL + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_WATER_HEATER_STAGE2_DELAY_MSB:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_MSB + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_WATER_HEATER_STAGE2_DELAY_LSB:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_LSB + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FAN_POST_RUN_TIME:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FAN_POST_RUN_TIME + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_TRANSPORTB_POST_RUN_TIME:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_TRANSPORTB_POST_RUN_TIME + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_TRANSPORT_FUEL_FILL_TIME:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_TRANSPORT_FUEL_FILL_TIME + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FURNACE_RESTART_ATTEMPTS:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FURNACE_RESTART_ATTEMPTS + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_WATER_HEATER_HYSTERERIS:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_WATER_HEATER_HYSTERERIS + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FURNACE_HYSTERERIS:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FURNACE_HYSTERERIS + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FIRE_DETECTOR_HYSTERERSIS_MSB:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_MSB + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FIRE_DETECTOR_HYSTERERSIS_LSB:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_LSB + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FURNACE_RESTART_TIMEOUT:
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FURNACE_RESTART_TIMEOUT + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_RESERVED0:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
			
		case REGISTER_FURNACE_TEMP_MSB:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_FURNACE_TEMP_LSB:	
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		default:
			vscp_omsg.data[ 1 ] = 0;	
			break;
	}

	// Send data
	vscp_sendMsg();

}

///////////////////////////////////////////////////////////////////////////////
// write_app_register
//

void write_app_register( unsigned char reg, unsigned char val )
{
	vscp_omsg.priority = VSCP_PRIORITY_MEDIUM;
	vscp_omsg.flag = VSCP_VALID_MSG + 2;
	vscp_omsg.class = VSCP_CLASS1_PROTOCOL;
	vscp_omsg.type = VSCP_TYPE_PROTOCOL_RW_RESPONSE;

	vscp_omsg.data[ 0 ] = reg;
	vscp_omsg.data[ 1 ] = ~val; // error return

	switch ( reg ) {
	
		// Zone
		case REGISTER_ZONE:
			writeEEPROM( REGISTER_ZONE + VSCP_EEPROM_VSCP_END, val );
			vscp_omsg.data[ 1 ] =  readEEPROM( REGISTER_ZONE + VSCP_EEPROM_VSCP_END );
			break;
			
		// States 0
		case REGISTER_STATES0:
			writeEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_STATES0 + VSCP_EEPROM_VSCP_END );
			break;	
			
		// States 1
		case REGISTER_STATES1:
			writeEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_STATES1 + VSCP_EEPROM_VSCP_END );
			break;			
						
		case REGISTER_TRANSPORTB_ALARM_POINT:
			writeEEPROM( REGISTER_TRANSPORTB_ALARM_POINT + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_TRANSPORTB_ALARM_POINT + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FURNACE_PRESET_TEMP:
			writeEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FURNACE_PRESET_TEMP + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_WATER_HEATER_PRESET_TEMP:
			writeEEPROM( REGISTER_WATER_HEATER_PRESET_TEMP + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_WATER_HEATER_PRESET_TEMP + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_WATER_HEATER_CONTROL:
			writeEEPROM( REGISTER_WATER_HEATER_CONTROL + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_WATER_HEATER_CONTROL + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_WATER_HEATER_STAGE2_DELAY_MSB:
			writeEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_MSB + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_MSB + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_WATER_HEATER_STAGE2_DELAY_LSB:
			writeEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_LSB + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_WATER_HEATER_STAGE2_DELAY_LSB + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FAN_POST_RUN_TIME:
			writeEEPROM( REGISTER_FAN_POST_RUN_TIME + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FAN_POST_RUN_TIME + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_TRANSPORTB_POST_RUN_TIME:
			writeEEPROM( REGISTER_TRANSPORTB_POST_RUN_TIME + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_TRANSPORTB_POST_RUN_TIME + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_TRANSPORT_FUEL_FILL_TIME:
			writeEEPROM( REGISTER_TRANSPORT_FUEL_FILL_TIME + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_TRANSPORT_FUEL_FILL_TIME + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FURNACE_RESTART_ATTEMPTS:
			writeEEPROM( REGISTER_FURNACE_RESTART_ATTEMPTS + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FURNACE_RESTART_ATTEMPTS + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_WATER_HEATER_HYSTERERIS:
			writeEEPROM( REGISTER_WATER_HEATER_HYSTERERIS + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_WATER_HEATER_HYSTERERIS + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FURNACE_HYSTERERIS:
			writeEEPROM( REGISTER_FURNACE_HYSTERERIS + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FURNACE_HYSTERERIS + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FIRE_DETECTOR_HYSTERERSIS_MSB:
			writeEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_MSB + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_MSB + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FIRE_DETECTOR_HYSTERERSIS_LSB:
			writeEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_LSB + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FIRE_DETECTOR_HYSTERERSIS_LSB + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_FURNACE_RESTART_TIMEOUT:
			writeEEPROM( REGISTER_FURNACE_RESTART_TIMEOUT + VSCP_EEPROM_VSCP_END, val ); 
			vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_FURNACE_RESTART_TIMEOUT + VSCP_EEPROM_VSCP_END );
			break;
			
		case REGISTER_RESERVED0:
			vscp_omsg.data[ 1 ] = 0;
			break;
						
		case REGISTER_FURNACE_TEMP_MSB:
			vscp_omsg.data[ 1 ] = 0;
			break;
			
		case REGISTER_FURNACE_TEMP_LSB:	
			vscp_omsg.data[ 1 ] = 0;
			break;
	
		default:
			vscp_omsg.data[ 1 ] = ~val; // error return	
			break;
	}

	// Send data
	vscp_sendMsg();
}

///////////////////////////////////////////////////////////////////////////////
// Get Major version number for this hardware module
//

unsigned char getMajorVersion()
{
	return FIRMWARE_MAJOR_VERSION;
}
     150:	e3a00000 	mov	r0, #0	; 0x0
     154:	e12fff1e 	bx	lr

00000158 <getMinorVersion>:

///////////////////////////////////////////////////////////////////////////////
// Get Minor version number for this hardware module
//

unsigned char getMinorVersion()
{
	return FIRMWARE_MINOR_VERSION;
}
     158:	e3a00000 	mov	r0, #0	; 0x0
     15c:	e12fff1e 	bx	lr

00000160 <getSubMinorVersion>:

///////////////////////////////////////////////////////////////////////////////
// Get Subminor version number for this hardware module
//

unsigned char getSubMinorVersion()
{
	return FIRMWARE_SUB_MINOR_VERSION;
}
     160:	e3a00005 	mov	r0, #5	; 0x5
     164:	e12fff1e 	bx	lr

00000168 <getBootLoaderAlgorithm>:

///////////////////////////////////////////////////////////////////////////////
// Get GUID from EEPROM
//

#ifdef GUID_IN_EEPROM
unsigned char getGuidFromEEprom( unsigned char idx )
{
	return readEEPROM( VSCP_EEPROM_REG_GUIID0 + idx );		
}
#endif

///////////////////////////////////////////////////////////////////////////////
// Get Manufacturer id and subid from EEPROM
//

#ifdef MANUFACTURER_INFO_IN_EEPROM
unsigned char getManufacturerIdFromEEprom( unsigned char idx )
{
	return readEEPROM( VSCP_EEPROM_REG_MANUFACTUR_ID0 + idx );	
}
#endif

///////////////////////////////////////////////////////////////////////////////
// Get the bootloader algorithm code
//

unsigned char getBootLoaderAlgorithm( void ) 
{
	return VSCP_BOOTLOADER_LPC1;	
}
     168:	e3a00010 	mov	r0, #16	; 0x10
     16c:	e12fff1e 	bx	lr

00000170 <getBufferSize>:

///////////////////////////////////////////////////////////////////////////////
// Get the buffer size
//

unsigned char getBufferSize( void ) 
{
	return 8;	// Standard CAN frame
}
     170:	e3a00008 	mov	r0, #8	; 0x8
     174:	e12fff1e 	bx	lr

00000178 <getManufacturerIdFromEEprom>:
     178:	e20000ff 	and	r0, r0, #255	; 0xff
     17c:	e52de004 	str	lr, [sp, #-4]!
     180:	e2800009 	add	r0, r0, #9	; 0x9
     184:	eb00122d 	bl	4a40 <readEEPROM>
     188:	e1a00800 	mov	r0, r0, lsl #16
     18c:	e1a00820 	mov	r0, r0, lsr #16
     190:	e20000ff 	and	r0, r0, #255	; 0xff
     194:	e49df004 	ldr	pc, [sp], #4

00000198 <getGuidFromEEprom>:
     198:	e20000ff 	and	r0, r0, #255	; 0xff
     19c:	e52de004 	str	lr, [sp, #-4]!
     1a0:	e2800011 	add	r0, r0, #17	; 0x11
     1a4:	eb001225 	bl	4a40 <readEEPROM>
     1a8:	e1a00800 	mov	r0, r0, lsl #16
     1ac:	e1a00820 	mov	r0, r0, lsr #16
     1b0:	e20000ff 	and	r0, r0, #255	; 0xff
     1b4:	e49df004 	ldr	pc, [sp], #4

000001b8 <getConfigValue>:
     1b8:	e20000ff 	and	r0, r0, #255	; 0xff
     1bc:	e52de004 	str	lr, [sp, #-4]!
     1c0:	e3500009 	cmp	r0, #9	; 0x9
     1c4:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
     1c8:	ea000009 	b	1f4 <.text+0x1f4>
     1cc:	000002bc 	streqh	r0, [r0], -ip
     1d0:	000002a4 	andeq	r0, r0, r4, lsr #5
     1d4:	0000028c 	andeq	r0, r0, ip, lsl #5
     1d8:	00000274 	andeq	r0, r0, r4, ror r2
     1dc:	0000025c 	andeq	r0, r0, ip, asr r2
     1e0:	00000244 	andeq	r0, r0, r4, asr #4
     1e4:	0000022c 	andeq	r0, r0, ip, lsr #4
     1e8:	0000021c 	andeq	r0, r0, ip, lsl r2
     1ec:	0000020c 	andeq	r0, r0, ip, lsl #4
     1f0:	000001fc 	streqd	r0, [r0], -ip
     1f4:	e3a00000 	mov	r0, #0	; 0x0
     1f8:	e49df004 	ldr	pc, [sp], #4
     1fc:	e3a00023 	mov	r0, #35	; 0x23
     200:	eb00120e 	bl	4a40 <readEEPROM>
     204:	e2000040 	and	r0, r0, #64	; 0x40
     208:	e49df004 	ldr	pc, [sp], #4
     20c:	e3a00023 	mov	r0, #35	; 0x23
     210:	eb00120a 	bl	4a40 <readEEPROM>
     214:	e2000080 	and	r0, r0, #128	; 0x80
     218:	e49df004 	ldr	pc, [sp], #4
     21c:	e3a00022 	mov	r0, #34	; 0x22
     220:	eb001206 	bl	4a40 <readEEPROM>
     224:	e2000080 	and	r0, r0, #128	; 0x80
     228:	e49df004 	ldr	pc, [sp], #4
     22c:	e3a00039 	mov	r0, #57	; 0x39
     230:	eb001202 	bl	4a40 <readEEPROM>
     234:	e1a00800 	mov	r0, r0, lsl #16
     238:	e1a00820 	mov	r0, r0, lsr #16
     23c:	e20000ff 	and	r0, r0, #255	; 0xff
     240:	e49df004 	ldr	pc, [sp], #4
     244:	e3a0003f 	mov	r0, #63	; 0x3f
     248:	eb0011fc 	bl	4a40 <readEEPROM>
     24c:	e1a00800 	mov	r0, r0, lsl #16
     250:	e1a00820 	mov	r0, r0, lsr #16
     254:	e20000ff 	and	r0, r0, #255	; 0xff
     258:	e49df004 	ldr	pc, [sp], #4
     25c:	e3a00036 	mov	r0, #54	; 0x36
     260:	eb0011f6 	bl	4a40 <readEEPROM>
     264:	e1a00800 	mov	r0, r0, lsl #16
     268:	e1a00820 	mov	r0, r0, lsr #16
     26c:	e20000ff 	and	r0, r0, #255	; 0xff
     270:	e49df004 	ldr	pc, [sp], #4
     274:	e3a00037 	mov	r0, #55	; 0x37
     278:	eb0011f0 	bl	4a40 <readEEPROM>
     27c:	e1a00800 	mov	r0, r0, lsl #16
     280:	e1a00820 	mov	r0, r0, lsr #16
     284:	e20000ff 	and	r0, r0, #255	; 0xff
     288:	e49df004 	ldr	pc, [sp], #4
     28c:	e3a00038 	mov	r0, #56	; 0x38
     290:	eb0011ea 	bl	4a40 <readEEPROM>
     294:	e1a00800 	mov	r0, r0, lsl #16
     298:	e1a00820 	mov	r0, r0, lsr #16
     29c:	e20000ff 	and	r0, r0, #255	; 0xff
     2a0:	e49df004 	ldr	pc, [sp], #4
     2a4:	e3a0002c 	mov	r0, #44	; 0x2c
     2a8:	eb0011e4 	bl	4a40 <readEEPROM>
     2ac:	e1a00800 	mov	r0, r0, lsl #16
     2b0:	e1a00820 	mov	r0, r0, lsr #16
     2b4:	e20000ff 	and	r0, r0, #255	; 0xff
     2b8:	e49df004 	ldr	pc, [sp], #4
     2bc:	e3a0002d 	mov	r0, #45	; 0x2d
     2c0:	eb0011de 	bl	4a40 <readEEPROM>
     2c4:	e1a00800 	mov	r0, r0, lsl #16
     2c8:	e1a00820 	mov	r0, r0, lsr #16
     2cc:	e20000ff 	and	r0, r0, #255	; 0xff
     2d0:	e49df004 	ldr	pc, [sp], #4

000002d4 <write_app_register>:
     2d4:	e92d4010 	stmdb	sp!, {r4, lr}
     2d8:	e59f4290 	ldr	r4, [pc, #656]	; 570 <.text+0x570>
     2dc:	e3a03004 	mov	r3, #4	; 0x4
     2e0:	e20110ff 	and	r1, r1, #255	; 0xff
     2e4:	e1e02001 	mvn	r2, r1
     2e8:	e5c43001 	strb	r3, [r4, #1]
     2ec:	e2833006 	add	r3, r3, #6	; 0x6
     2f0:	e202c0ff 	and	ip, r2, #255	; 0xff
     2f4:	e20000ff 	and	r0, r0, #255	; 0xff
     2f8:	e3e0207d 	mvn	r2, #125	; 0x7d
     2fc:	e5c43004 	strb	r3, [r4, #4]
     300:	e3a03000 	mov	r3, #0	; 0x0
     304:	e5c42000 	strb	r2, [r4]
     308:	e1c430b2 	strh	r3, [r4, #2]
     30c:	e5c40005 	strb	r0, [r4, #5]
     310:	e5c4c006 	strb	ip, [r4, #6]
     314:	e3500021 	cmp	r0, #33	; 0x21
     318:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
     31c:	ea000085 	b	538 <STACK_SIZE+0x138>
     320:	000003b8 	streqh	r0, [r0], -r8
     324:	00000558 	andeq	r0, r0, r8, asr r5
     328:	000003d0 	ldreqd	r0, [r0], -r0
     32c:	00000538 	andeq	r0, r0, r8, lsr r5
     330:	00000538 	andeq	r0, r0, r8, lsr r5
     334:	00000538 	andeq	r0, r0, r8, lsr r5
     338:	00000538 	andeq	r0, r0, r8, lsr r5
     33c:	00000538 	andeq	r0, r0, r8, lsr r5
     340:	00000538 	andeq	r0, r0, r8, lsr r5
     344:	00000538 	andeq	r0, r0, r8, lsr r5
     348:	000003e8 	andeq	r0, r0, r8, ror #7
     34c:	00000400 	andeq	r0, r0, r0, lsl #8
     350:	00000418 	andeq	r0, r0, r8, lsl r4
     354:	00000538 	andeq	r0, r0, r8, lsr r5
     358:	00000538 	andeq	r0, r0, r8, lsr r5
     35c:	00000538 	andeq	r0, r0, r8, lsr r5
     360:	00000538 	andeq	r0, r0, r8, lsr r5
     364:	00000538 	andeq	r0, r0, r8, lsr r5
     368:	00000430 	andeq	r0, r0, r0, lsr r4
     36c:	00000448 	andeq	r0, r0, r8, asr #8
     370:	00000460 	andeq	r0, r0, r0, ror #8
     374:	00000478 	andeq	r0, r0, r8, ror r4
     378:	00000490 	muleq	r0, r0, r4
     37c:	000004a8 	andeq	r0, r0, r8, lsr #9
     380:	000004c0 	andeq	r0, r0, r0, asr #9
     384:	000004d8 	ldreqd	r0, [r0], -r8
     388:	000004f0 	streqd	r0, [r0], -r0
     38c:	00000508 	andeq	r0, r0, r8, lsl #10
     390:	00000520 	andeq	r0, r0, r0, lsr #10
     394:	00000538 	andeq	r0, r0, r8, lsr r5
     398:	00000540 	andeq	r0, r0, r0, asr #10
     39c:	000003a8 	andeq	r0, r0, r8, lsr #7
     3a0:	000003a8 	andeq	r0, r0, r8, lsr #7
     3a4:	000003a8 	andeq	r0, r0, r8, lsr #7
     3a8:	e3a03000 	mov	r3, #0	; 0x0
     3ac:	e5c43006 	strb	r3, [r4, #6]
     3b0:	e8bd4010 	ldmia	sp!, {r4, lr}
     3b4:	ea0013b6 	b	5294 <vscp_sendMsg>
     3b8:	e3a00021 	mov	r0, #33	; 0x21
     3bc:	eb0011cd 	bl	4af8 <writeEEPROM>
     3c0:	e3a00021 	mov	r0, #33	; 0x21
     3c4:	eb00119d 	bl	4a40 <readEEPROM>
     3c8:	e5c40006 	strb	r0, [r4, #6]
     3cc:	eafffff7 	b	3b0 <.text+0x3b0>
     3d0:	e3a00023 	mov	r0, #35	; 0x23
     3d4:	eb0011c7 	bl	4af8 <writeEEPROM>
     3d8:	e3a00023 	mov	r0, #35	; 0x23
     3dc:	eb001197 	bl	4a40 <readEEPROM>
     3e0:	e5c40006 	strb	r0, [r4, #6]
     3e4:	eafffff1 	b	3b0 <.text+0x3b0>
     3e8:	e3a0002b 	mov	r0, #43	; 0x2b
     3ec:	eb0011c1 	bl	4af8 <writeEEPROM>
     3f0:	e3a0002b 	mov	r0, #43	; 0x2b
     3f4:	eb001191 	bl	4a40 <readEEPROM>
     3f8:	e5c40006 	strb	r0, [r4, #6]
     3fc:	eaffffeb 	b	3b0 <.text+0x3b0>
     400:	e3a0002c 	mov	r0, #44	; 0x2c
     404:	eb0011bb 	bl	4af8 <writeEEPROM>
     408:	e3a0002c 	mov	r0, #44	; 0x2c
     40c:	eb00118b 	bl	4a40 <readEEPROM>
     410:	e5c40006 	strb	r0, [r4, #6]
     414:	eaffffe5 	b	3b0 <.text+0x3b0>
     418:	e3a0002d 	mov	r0, #45	; 0x2d
     41c:	eb0011b5 	bl	4af8 <writeEEPROM>
     420:	e3a0002d 	mov	r0, #45	; 0x2d
     424:	eb001185 	bl	4a40 <readEEPROM>
     428:	e5c40006 	strb	r0, [r4, #6]
     42c:	eaffffdf 	b	3b0 <.text+0x3b0>
     430:	e3a00033 	mov	r0, #51	; 0x33
     434:	eb0011af 	bl	4af8 <writeEEPROM>
     438:	e3a00033 	mov	r0, #51	; 0x33
     43c:	eb00117f 	bl	4a40 <readEEPROM>
     440:	e5c40006 	strb	r0, [r4, #6]
     444:	eaffffd9 	b	3b0 <.text+0x3b0>
     448:	e3a00034 	mov	r0, #52	; 0x34
     44c:	eb0011a9 	bl	4af8 <writeEEPROM>
     450:	e3a00034 	mov	r0, #52	; 0x34
     454:	eb001179 	bl	4a40 <readEEPROM>
     458:	e5c40006 	strb	r0, [r4, #6]
     45c:	eaffffd3 	b	3b0 <.text+0x3b0>
     460:	e3a00035 	mov	r0, #53	; 0x35
     464:	eb0011a3 	bl	4af8 <writeEEPROM>
     468:	e3a00035 	mov	r0, #53	; 0x35
     46c:	eb001173 	bl	4a40 <readEEPROM>
     470:	e5c40006 	strb	r0, [r4, #6]
     474:	eaffffcd 	b	3b0 <.text+0x3b0>
     478:	e3a00036 	mov	r0, #54	; 0x36
     47c:	eb00119d 	bl	4af8 <writeEEPROM>
     480:	e3a00036 	mov	r0, #54	; 0x36
     484:	eb00116d 	bl	4a40 <readEEPROM>
     488:	e5c40006 	strb	r0, [r4, #6]
     48c:	eaffffc7 	b	3b0 <.text+0x3b0>
     490:	e3a00037 	mov	r0, #55	; 0x37
     494:	eb001197 	bl	4af8 <writeEEPROM>
     498:	e3a00037 	mov	r0, #55	; 0x37
     49c:	eb001167 	bl	4a40 <readEEPROM>
     4a0:	e5c40006 	strb	r0, [r4, #6]
     4a4:	eaffffc1 	b	3b0 <.text+0x3b0>
     4a8:	e3a00038 	mov	r0, #56	; 0x38
     4ac:	eb001191 	bl	4af8 <writeEEPROM>
     4b0:	e3a00038 	mov	r0, #56	; 0x38
     4b4:	eb001161 	bl	4a40 <readEEPROM>
     4b8:	e5c40006 	strb	r0, [r4, #6]
     4bc:	eaffffbb 	b	3b0 <.text+0x3b0>
     4c0:	e3a00039 	mov	r0, #57	; 0x39
     4c4:	eb00118b 	bl	4af8 <writeEEPROM>
     4c8:	e3a00039 	mov	r0, #57	; 0x39
     4cc:	eb00115b 	bl	4a40 <readEEPROM>
     4d0:	e5c40006 	strb	r0, [r4, #6]
     4d4:	eaffffb5 	b	3b0 <.text+0x3b0>
     4d8:	e3a0003a 	mov	r0, #58	; 0x3a
     4dc:	eb001185 	bl	4af8 <writeEEPROM>
     4e0:	e3a0003a 	mov	r0, #58	; 0x3a
     4e4:	eb001155 	bl	4a40 <readEEPROM>
     4e8:	e5c40006 	strb	r0, [r4, #6]
     4ec:	eaffffaf 	b	3b0 <.text+0x3b0>
     4f0:	e3a0003b 	mov	r0, #59	; 0x3b
     4f4:	eb00117f 	bl	4af8 <writeEEPROM>
     4f8:	e3a0003b 	mov	r0, #59	; 0x3b
     4fc:	eb00114f 	bl	4a40 <readEEPROM>
     500:	e5c40006 	strb	r0, [r4, #6]
     504:	eaffffa9 	b	3b0 <.text+0x3b0>
     508:	e3a0003c 	mov	r0, #60	; 0x3c
     50c:	eb001179 	bl	4af8 <writeEEPROM>
     510:	e3a0003c 	mov	r0, #60	; 0x3c
     514:	eb001149 	bl	4a40 <readEEPROM>
     518:	e5c40006 	strb	r0, [r4, #6]
     51c:	eaffffa3 	b	3b0 <.text+0x3b0>
     520:	e3a0003d 	mov	r0, #61	; 0x3d
     524:	eb001173 	bl	4af8 <writeEEPROM>
     528:	e3a0003d 	mov	r0, #61	; 0x3d
     52c:	eb001143 	bl	4a40 <readEEPROM>
     530:	e5c40006 	strb	r0, [r4, #6]
     534:	eaffff9d 	b	3b0 <.text+0x3b0>
     538:	e5c4c006 	strb	ip, [r4, #6]
     53c:	eaffff9b 	b	3b0 <.text+0x3b0>
     540:	e3a0003f 	mov	r0, #63	; 0x3f
     544:	eb00116b 	bl	4af8 <writeEEPROM>
     548:	e3a0003f 	mov	r0, #63	; 0x3f
     54c:	eb00113b 	bl	4a40 <readEEPROM>
     550:	e5c40006 	strb	r0, [r4, #6]
     554:	eaffff95 	b	3b0 <.text+0x3b0>
     558:	e3a00022 	mov	r0, #34	; 0x22
     55c:	eb001165 	bl	4af8 <writeEEPROM>
     560:	e3a00022 	mov	r0, #34	; 0x22
     564:	eb001135 	bl	4a40 <readEEPROM>
     568:	e5c40006 	strb	r0, [r4, #6]
     56c:	eaffff8f 	b	3b0 <.text+0x3b0>
     570:	40000724 	andmi	r0, r0, r4, lsr #14

00000574 <getHeaterTemp>:
     574:	e92d4030 	stmdb	sp!, {r4, r5, lr}
     578:	eb000e9d 	bl	3ff4 <disableIRQ>
     57c:	e3a04000 	mov	r4, #0	; 0x0
     580:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
     584:	e1a05000 	mov	r5, r0
     588:	e28cc90a 	add	ip, ip, #163840	; 0x28000
     58c:	e1a02004 	mov	r2, r4
     590:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
     594:	e3e00055 	mvn	r0, #85	; 0x55
     598:	e3a0e055 	mov	lr, #85	; 0x55
     59c:	e5c10008 	strb	r0, [r1, #8]
     5a0:	e5c1e008 	strb	lr, [r1, #8]
     5a4:	e59c3000 	ldr	r3, [ip]
     5a8:	e2822001 	add	r2, r2, #1	; 0x1
     5ac:	e3130902 	tst	r3, #32768	; 0x8000
     5b0:	12844001 	addne	r4, r4, #1	; 0x1
     5b4:	e3520801 	cmp	r2, #65536	; 0x10000
     5b8:	1afffff7 	bne	59c <getHeaterTemp+0x28>
     5bc:	e1a00005 	mov	r0, r5
     5c0:	eb000e75 	bl	3f9c <restoreIRQ>
     5c4:	e0643284 	rsb	r3, r4, r4, lsl #5
     5c8:	e0843103 	add	r3, r4, r3, lsl #2
     5cc:	e0833103 	add	r3, r3, r3, lsl #2
     5d0:	e0833103 	add	r3, r3, r3, lsl #2
     5d4:	e3a01902 	mov	r1, #32768	; 0x8000
     5d8:	e2811106 	add	r1, r1, #-2147483647	; 0x80000001
     5dc:	e1a03283 	mov	r3, r3, lsl #5
     5e0:	e0820391 	umull	r0, r2, r1, r3
     5e4:	e3a03dd1 	mov	r3, #13376	; 0x3440
     5e8:	e1a027a2 	mov	r2, r2, lsr #15
     5ec:	e2422c7d 	sub	r2, r2, #32000	; 0x7d00
     5f0:	e283312e 	add	r3, r3, #-2147483637	; 0x8000000b
     5f4:	e1a020a2 	mov	r2, r2, lsr #1
     5f8:	e28336b7 	add	r3, r3, #191889408	; 0xb700000
     5fc:	e0801293 	umull	r1, r0, r3, r2
     600:	e1a003a0 	mov	r0, r0, lsr #7
     604:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00000608 <getFireReferenceLevel>:
     608:	e3a02602 	mov	r2, #2097152	; 0x200000
     60c:	e92d4010 	stmdb	sp!, {r4, lr}
     610:	e2822c0d 	add	r2, r2, #3328	; 0xd00
     614:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
     618:	e284490d 	add	r4, r4, #212992	; 0x34000
     61c:	e2822002 	add	r2, r2, #2	; 0x2
     620:	e5842000 	str	r2, [r4]
     624:	e5943000 	ldr	r3, [r4]
     628:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
     62c:	e5843000 	str	r3, [r4]
     630:	eb000e6f 	bl	3ff4 <disableIRQ>
     634:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
     638:	e3e03055 	mvn	r3, #85	; 0x55
     63c:	e3a02055 	mov	r2, #85	; 0x55
     640:	e5c13008 	strb	r3, [r1, #8]
     644:	e5c12008 	strb	r2, [r1, #8]
     648:	eb000e53 	bl	3f9c <restoreIRQ>
     64c:	e5943004 	ldr	r3, [r4, #4]
     650:	e3530000 	cmp	r3, #0	; 0x0
     654:	aafffffc 	bge	64c <getFireReferenceLevel+0x44>
     658:	e5940004 	ldr	r0, [r4, #4]
     65c:	e1a00320 	mov	r0, r0, lsr #6
     660:	e1a00b00 	mov	r0, r0, lsl #22
     664:	e1a00b20 	mov	r0, r0, lsr #22
     668:	e8bd8010 	ldmia	sp!, {r4, pc}

0000066c <getFireDetectorLevel>:
     66c:	e3a02602 	mov	r2, #2097152	; 0x200000
     670:	e92d4010 	stmdb	sp!, {r4, lr}
     674:	e2822c0d 	add	r2, r2, #3328	; 0xd00
     678:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
     67c:	e284490d 	add	r4, r4, #212992	; 0x34000
     680:	e2822001 	add	r2, r2, #1	; 0x1
     684:	e5842000 	str	r2, [r4]
     688:	e5943000 	ldr	r3, [r4]
     68c:	e3833401 	orr	r3, r3, #16777216	; 0x1000000
     690:	e5843000 	str	r3, [r4]
     694:	eb000e56 	bl	3ff4 <disableIRQ>
     698:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
     69c:	e3e03055 	mvn	r3, #85	; 0x55
     6a0:	e3a02055 	mov	r2, #85	; 0x55
     6a4:	e5c13008 	strb	r3, [r1, #8]
     6a8:	e5c12008 	strb	r2, [r1, #8]
     6ac:	eb000e3a 	bl	3f9c <restoreIRQ>
     6b0:	e5943004 	ldr	r3, [r4, #4]
     6b4:	e3530000 	cmp	r3, #0	; 0x0
     6b8:	aafffffc 	bge	6b0 <getFireDetectorLevel+0x44>
     6bc:	e5940004 	ldr	r0, [r4, #4]
     6c0:	e1a00320 	mov	r0, r0, lsr #6
     6c4:	e1a00b00 	mov	r0, r0, lsl #22
     6c8:	e1a00b20 	mov	r0, r0, lsr #22
     6cc:	e8bd8010 	ldmia	sp!, {r4, pc}

000006d0 <read_app_register>:
     6d0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
     6d4:	e59f42a4 	ldr	r4, [pc, #676]	; 980 <.text+0x980>
     6d8:	e3a03004 	mov	r3, #4	; 0x4
     6dc:	e3a01000 	mov	r1, #0	; 0x0
     6e0:	e20000ff 	and	r0, r0, #255	; 0xff
     6e4:	e5c43001 	strb	r3, [r4, #1]
     6e8:	e3e0207d 	mvn	r2, #125	; 0x7d
     6ec:	e2833006 	add	r3, r3, #6	; 0x6
     6f0:	e5c42000 	strb	r2, [r4]
     6f4:	e5c43004 	strb	r3, [r4, #4]
     6f8:	e5c41006 	strb	r1, [r4, #6]
     6fc:	e1c410b2 	strh	r1, [r4, #2]
     700:	e5c40005 	strb	r0, [r4, #5]
     704:	e3500021 	cmp	r0, #33	; 0x21
     708:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
     70c:	ea000021 	b	798 <.text+0x798>
     710:	00000970 	andeq	r0, r0, r0, ror r9
     714:	00000918 	andeq	r0, r0, r8, lsl r9
     718:	000008b0 	streqh	r0, [r0], -r0
     71c:	000007f0 	streqd	r0, [r0], -r0
     720:	000007e4 	andeq	r0, r0, r4, ror #15
     724:	000007d4 	ldreqd	r0, [r0], -r4
     728:	000007c8 	andeq	r0, r0, r8, asr #15
     72c:	000007a8 	andeq	r0, r0, r8, lsr #15
     730:	00000798 	muleq	r0, r8, r7
     734:	00000798 	muleq	r0, r8, r7
     738:	00000798 	muleq	r0, r8, r7
     73c:	000007a0 	andeq	r0, r0, r0, lsr #15
     740:	000007a0 	andeq	r0, r0, r0, lsr #15
     744:	000007b8 	streqh	r0, [r0], -r8
     748:	00000798 	muleq	r0, r8, r7
     74c:	00000798 	muleq	r0, r8, r7
     750:	00000798 	muleq	r0, r8, r7
     754:	00000798 	muleq	r0, r8, r7
     758:	00000800 	andeq	r0, r0, r0, lsl #16
     75c:	00000810 	andeq	r0, r0, r0, lsl r8
     760:	00000820 	andeq	r0, r0, r0, lsr #16
     764:	00000830 	andeq	r0, r0, r0, lsr r8
     768:	00000840 	andeq	r0, r0, r0, asr #16
     76c:	00000850 	andeq	r0, r0, r0, asr r8
     770:	00000860 	andeq	r0, r0, r0, ror #16
     774:	00000870 	andeq	r0, r0, r0, ror r8
     778:	00000880 	andeq	r0, r0, r0, lsl #17
     77c:	00000890 	muleq	r0, r0, r8
     780:	000008a0 	andeq	r0, r0, r0, lsr #17
     784:	00000798 	muleq	r0, r8, r7
     788:	00000908 	andeq	r0, r0, r8, lsl #18
     78c:	00000798 	muleq	r0, r8, r7
     790:	00000798 	muleq	r0, r8, r7
     794:	00000798 	muleq	r0, r8, r7
     798:	e3a03000 	mov	r3, #0	; 0x0
     79c:	e5c43006 	strb	r3, [r4, #6]
     7a0:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
     7a4:	ea0012ba 	b	5294 <vscp_sendMsg>
     7a8:	e59f31d4 	ldr	r3, [pc, #468]	; 984 <.text+0x984>
     7ac:	e5d32000 	ldrb	r2, [r3]
     7b0:	e5c42006 	strb	r2, [r4, #6]
     7b4:	eafffff9 	b	7a0 <.text+0x7a0>
     7b8:	e59f31c8 	ldr	r3, [pc, #456]	; 988 <.text+0x988>
     7bc:	e5d32000 	ldrb	r2, [r3]
     7c0:	e5c42006 	strb	r2, [r4, #6]
     7c4:	eafffff5 	b	7a0 <.text+0x7a0>
     7c8:	ebffff8e 	bl	608 <getFireReferenceLevel>
     7cc:	e5c40006 	strb	r0, [r4, #6]
     7d0:	eafffff2 	b	7a0 <.text+0x7a0>
     7d4:	ebffff8b 	bl	608 <getFireReferenceLevel>
     7d8:	e1a00420 	mov	r0, r0, lsr #8
     7dc:	e5c40006 	strb	r0, [r4, #6]
     7e0:	eaffffee 	b	7a0 <.text+0x7a0>
     7e4:	ebffffa0 	bl	66c <getFireDetectorLevel>
     7e8:	e5c40006 	strb	r0, [r4, #6]
     7ec:	eaffffeb 	b	7a0 <.text+0x7a0>
     7f0:	ebffff9d 	bl	66c <getFireDetectorLevel>
     7f4:	e1a00420 	mov	r0, r0, lsr #8
     7f8:	e5c40006 	strb	r0, [r4, #6]
     7fc:	eaffffe7 	b	7a0 <.text+0x7a0>
     800:	e3a00033 	mov	r0, #51	; 0x33
     804:	eb00108d 	bl	4a40 <readEEPROM>
     808:	e5c40006 	strb	r0, [r4, #6]
     80c:	eaffffe3 	b	7a0 <.text+0x7a0>
     810:	e3a00034 	mov	r0, #52	; 0x34
     814:	eb001089 	bl	4a40 <readEEPROM>
     818:	e5c40006 	strb	r0, [r4, #6]
     81c:	eaffffdf 	b	7a0 <.text+0x7a0>
     820:	e3a00035 	mov	r0, #53	; 0x35
     824:	eb001085 	bl	4a40 <readEEPROM>
     828:	e5c40006 	strb	r0, [r4, #6]
     82c:	eaffffdb 	b	7a0 <.text+0x7a0>
     830:	e3a00036 	mov	r0, #54	; 0x36
     834:	eb001081 	bl	4a40 <readEEPROM>
     838:	e5c40006 	strb	r0, [r4, #6]
     83c:	eaffffd7 	b	7a0 <.text+0x7a0>
     840:	e3a00037 	mov	r0, #55	; 0x37
     844:	eb00107d 	bl	4a40 <readEEPROM>
     848:	e5c40006 	strb	r0, [r4, #6]
     84c:	eaffffd3 	b	7a0 <.text+0x7a0>
     850:	e3a00038 	mov	r0, #56	; 0x38
     854:	eb001079 	bl	4a40 <readEEPROM>
     858:	e5c40006 	strb	r0, [r4, #6]
     85c:	eaffffcf 	b	7a0 <.text+0x7a0>
     860:	e3a00039 	mov	r0, #57	; 0x39
     864:	eb001075 	bl	4a40 <readEEPROM>
     868:	e5c40006 	strb	r0, [r4, #6]
     86c:	eaffffcb 	b	7a0 <.text+0x7a0>
     870:	e3a0003a 	mov	r0, #58	; 0x3a
     874:	eb001071 	bl	4a40 <readEEPROM>
     878:	e5c40006 	strb	r0, [r4, #6]
     87c:	eaffffc7 	b	7a0 <.text+0x7a0>
     880:	e3a0003b 	mov	r0, #59	; 0x3b
     884:	eb00106d 	bl	4a40 <readEEPROM>
     888:	e5c40006 	strb	r0, [r4, #6]
     88c:	eaffffc3 	b	7a0 <.text+0x7a0>
     890:	e3a0003c 	mov	r0, #60	; 0x3c
     894:	eb001069 	bl	4a40 <readEEPROM>
     898:	e5c40006 	strb	r0, [r4, #6]
     89c:	eaffffbf 	b	7a0 <.text+0x7a0>
     8a0:	e3a0003d 	mov	r0, #61	; 0x3d
     8a4:	eb001065 	bl	4a40 <readEEPROM>
     8a8:	e5c40006 	strb	r0, [r4, #6]
     8ac:	eaffffbb 	b	7a0 <.text+0x7a0>
     8b0:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
     8b4:	e281190a 	add	r1, r1, #163840	; 0x28000
     8b8:	e5913010 	ldr	r3, [r1, #16]
     8bc:	e5912010 	ldr	r2, [r1, #16]
     8c0:	e1a03b23 	mov	r3, r3, lsr #22
     8c4:	e3120502 	tst	r2, #8388608	; 0x800000
     8c8:	e2035001 	and	r5, r3, #1	; 0x1
     8cc:	13853002 	orrne	r3, r5, #2	; 0x2
     8d0:	120350ff 	andne	r5, r3, #255	; 0xff
     8d4:	e5913010 	ldr	r3, [r1, #16]
     8d8:	e3a00023 	mov	r0, #35	; 0x23
     8dc:	e3130602 	tst	r3, #2097152	; 0x200000
     8e0:	13855020 	orrne	r5, r5, #32	; 0x20
     8e4:	eb001055 	bl	4a40 <readEEPROM>
     8e8:	e3100040 	tst	r0, #64	; 0x40
     8ec:	e3a00023 	mov	r0, #35	; 0x23
     8f0:	13855040 	orrne	r5, r5, #64	; 0x40
     8f4:	eb001051 	bl	4a40 <readEEPROM>
     8f8:	e3100080 	tst	r0, #128	; 0x80
     8fc:	1a000018 	bne	964 <.text+0x964>
     900:	e5c45006 	strb	r5, [r4, #6]
     904:	eaffffa5 	b	7a0 <.text+0x7a0>
     908:	e3a0003f 	mov	r0, #63	; 0x3f
     90c:	eb00104b 	bl	4a40 <readEEPROM>
     910:	e5c40006 	strb	r0, [r4, #6]
     914:	eaffffa1 	b	7a0 <.text+0x7a0>
     918:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
     91c:	e281190a 	add	r1, r1, #163840	; 0x28000
     920:	e5913010 	ldr	r3, [r1, #16]
     924:	e5912010 	ldr	r2, [r1, #16]
     928:	e1a03823 	mov	r3, r3, lsr #16
     92c:	e2035001 	and	r5, r3, #1	; 0x1
     930:	e3120802 	tst	r2, #131072	; 0x20000
     934:	13853002 	orrne	r3, r5, #2	; 0x2
     938:	120350ff 	andne	r5, r3, #255	; 0xff
     93c:	e5913010 	ldr	r3, [r1, #16]
     940:	e3130701 	tst	r3, #262144	; 0x40000
     944:	e5913010 	ldr	r3, [r1, #16]
     948:	13855004 	orrne	r5, r5, #4	; 0x4
     94c:	e3a00022 	mov	r0, #34	; 0x22
     950:	e3130702 	tst	r3, #524288	; 0x80000
     954:	13855008 	orrne	r5, r5, #8	; 0x8
     958:	eb001038 	bl	4a40 <readEEPROM>
     95c:	e3100080 	tst	r0, #128	; 0x80
     960:	0affffe6 	beq	900 <.text+0x900>
     964:	e3855080 	orr	r5, r5, #128	; 0x80
     968:	e5c45006 	strb	r5, [r4, #6]
     96c:	eaffff8b 	b	7a0 <.text+0x7a0>
     970:	e3a00021 	mov	r0, #33	; 0x21
     974:	eb001031 	bl	4a40 <readEEPROM>
     978:	e5c40006 	strb	r0, [r4, #6]
     97c:	eaffff87 	b	7a0 <.text+0x7a0>
     980:	40000724 	andmi	r0, r0, r4, lsr #14
     984:	4000042a 	andmi	r0, r0, sl, lsr #8
     988:	40000429 	andmi	r0, r0, r9, lsr #8

0000098c <button_state>:
     98c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
     990:	e20040ff 	and	r4, r0, #255	; 0xff
     994:	e3540005 	cmp	r4, #5	; 0x5
     998:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
     99c:	ea000005 	b	9b8 <.text+0x9b8>
     9a0:	00000af0 	streqd	r0, [r0], -r0
     9a4:	00000acc 	andeq	r0, r0, ip, asr #21
     9a8:	00000aa8 	andeq	r0, r0, r8, lsr #21
     9ac:	00000a84 	andeq	r0, r0, r4, lsl #21
     9b0:	00000a60 	andeq	r0, r0, r0, ror #20
     9b4:	000009f4 	streqd	r0, [r0], -r4
     9b8:	e59f2154 	ldr	r2, [pc, #340]	; b14 <.text+0xb14>
     9bc:	e59f5154 	ldr	r5, [pc, #340]	; b18 <.text+0xb18>
     9c0:	e7922104 	ldr	r2, [r2, r4, lsl #2]
     9c4:	e7953104 	ldr	r3, [r5, r4, lsl #2]
     9c8:	e1530002 	cmp	r3, r2
     9cc:	e59f6140 	ldr	r6, [pc, #320]	; b14 <.text+0xb14>
     9d0:	0a000015 	beq	a2c <.text+0xa2c>
     9d4:	eb000b17 	bl	3638 <getSysTICs>
     9d8:	e7962104 	ldr	r2, [r6, r4, lsl #2]
     9dc:	e59f3138 	ldr	r3, [pc, #312]	; b1c <.text+0xb1c>
     9e0:	e7852104 	str	r2, [r5, r4, lsl #2]
     9e4:	e7830104 	str	r0, [r3, r4, lsl #2]
     9e8:	e3e01000 	mvn	r1, #0	; 0x0
     9ec:	e1a00001 	mov	r0, r1
     9f0:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
     9f4:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     9f8:	e282290a 	add	r2, r2, #163840	; 0x28000
     9fc:	e5923000 	ldr	r3, [r2]
     a00:	e1a03b23 	mov	r3, r3, lsr #22
     a04:	e59f2108 	ldr	r2, [pc, #264]	; b14 <.text+0xb14>
     a08:	e2233001 	eor	r3, r3, #1	; 0x1
     a0c:	e2033001 	and	r3, r3, #1	; 0x1
     a10:	e7823104 	str	r3, [r2, r4, lsl #2]
     a14:	e59f50fc 	ldr	r5, [pc, #252]	; b18 <.text+0xb18>
     a18:	e7922104 	ldr	r2, [r2, r4, lsl #2]
     a1c:	e7953104 	ldr	r3, [r5, r4, lsl #2]
     a20:	e1530002 	cmp	r3, r2
     a24:	e59f60e8 	ldr	r6, [pc, #232]	; b14 <.text+0xb14>
     a28:	1affffe9 	bne	9d4 <.text+0x9d4>
     a2c:	e59f30e8 	ldr	r3, [pc, #232]	; b1c <.text+0xb1c>
     a30:	e7930104 	ldr	r0, [r3, r4, lsl #2]
     a34:	eb000b0d 	bl	3670 <getElapsedSysTICs>
     a38:	e3a03a7a 	mov	r3, #499712	; 0x7a000
     a3c:	e2833e12 	add	r3, r3, #288	; 0x120
     a40:	e1500003 	cmp	r0, r3
     a44:	93e01000 	mvnls	r1, #0	; 0x0
     a48:	9affffe7 	bls	9ec <.text+0x9ec>
     a4c:	e7963104 	ldr	r3, [r6, r4, lsl #2]
     a50:	e2531000 	subs	r1, r3, #0	; 0x0
     a54:	13a01001 	movne	r1, #1	; 0x1
     a58:	e1a00001 	mov	r0, r1
     a5c:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
     a60:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     a64:	e282290a 	add	r2, r2, #163840	; 0x28000
     a68:	e5923000 	ldr	r3, [r2]
     a6c:	e1a03aa3 	mov	r3, r3, lsr #21
     a70:	e2233001 	eor	r3, r3, #1	; 0x1
     a74:	e59f2098 	ldr	r2, [pc, #152]	; b14 <.text+0xb14>
     a78:	e2033001 	and	r3, r3, #1	; 0x1
     a7c:	e7823104 	str	r3, [r2, r4, lsl #2]
     a80:	eaffffcd 	b	9bc <.text+0x9bc>
     a84:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     a88:	e282290a 	add	r2, r2, #163840	; 0x28000
     a8c:	e5923000 	ldr	r3, [r2]
     a90:	e1a03a23 	mov	r3, r3, lsr #20
     a94:	e2233001 	eor	r3, r3, #1	; 0x1
     a98:	e59f2074 	ldr	r2, [pc, #116]	; b14 <.text+0xb14>
     a9c:	e2033001 	and	r3, r3, #1	; 0x1
     aa0:	e7823104 	str	r3, [r2, r4, lsl #2]
     aa4:	eaffffc4 	b	9bc <.text+0x9bc>
     aa8:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     aac:	e282290a 	add	r2, r2, #163840	; 0x28000
     ab0:	e5923000 	ldr	r3, [r2]
     ab4:	e1a039a3 	mov	r3, r3, lsr #19
     ab8:	e2233001 	eor	r3, r3, #1	; 0x1
     abc:	e59f2050 	ldr	r2, [pc, #80]	; b14 <.text+0xb14>
     ac0:	e2033001 	and	r3, r3, #1	; 0x1
     ac4:	e7823104 	str	r3, [r2, r4, lsl #2]
     ac8:	eaffffbb 	b	9bc <.text+0x9bc>
     acc:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     ad0:	e282290a 	add	r2, r2, #163840	; 0x28000
     ad4:	e5923000 	ldr	r3, [r2]
     ad8:	e1a03923 	mov	r3, r3, lsr #18
     adc:	e2233001 	eor	r3, r3, #1	; 0x1
     ae0:	e59f202c 	ldr	r2, [pc, #44]	; b14 <.text+0xb14>
     ae4:	e2033001 	and	r3, r3, #1	; 0x1
     ae8:	e7823104 	str	r3, [r2, r4, lsl #2]
     aec:	eaffffb2 	b	9bc <.text+0x9bc>
     af0:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     af4:	e282290a 	add	r2, r2, #163840	; 0x28000
     af8:	e5923000 	ldr	r3, [r2]
     afc:	e1a03723 	mov	r3, r3, lsr #14
     b00:	e2233001 	eor	r3, r3, #1	; 0x1
     b04:	e59f2008 	ldr	r2, [pc, #8]	; b14 <.text+0xb14>
     b08:	e2033001 	and	r3, r3, #1	; 0x1
     b0c:	e7823104 	str	r3, [r2, r4, lsl #2]
     b10:	eaffffa9 	b	9bc <.text+0x9bc>
     b14:	4000042c 	andmi	r0, r0, ip, lsr #8
     b18:	40000444 	andmi	r0, r0, r4, asr #8
     b1c:	4000045c 	andmi	r0, r0, ip, asr r4

00000b20 <BtnEnter>:

///////////////////////////////////////////////////////////////////////////////
// BtnForward
//

static BOOL BtnForward( void ) 
{
	if ( ( 1 == button_state( BUTTON_FORWARD ) ) && 
			!button_lock[ BUTTON_FORWARD ] )  {
		button_lock[ BUTTON_FORWARD ] = TRUE;
		DEBUGWRITECRLF("Button 'Forward'.");
		return TRUE;
	}
	else {
		return FALSE;
	}
}

///////////////////////////////////////////////////////////////////////////////
// BtnUp
//

static BOOL BtnUp( void ) 
{
	if ( ( 1 == button_state( BUTTON_UP ) ) && 
			!button_lock[ BUTTON_UP ] )  {
		button_lock[ BUTTON_UP ] = TRUE;
		DEBUGWRITECRLF("Button 'Up'.");
		return TRUE;
	}
	else {
		return FALSE;
	}
}

///////////////////////////////////////////////////////////////////////////////
// BtnDown
//

static BOOL BtnDown( void ) 
{
	if ( ( 1 == button_state( BUTTON_DOWN ) ) && 
			!button_lock[ BUTTON_DOWN ] )  {
		button_lock[ BUTTON_DOWN ] = TRUE;
		DEBUGWRITECRLF("Button 'Down'.");
		return TRUE;
	}
	else {
		return FALSE;
	}
}

///////////////////////////////////////////////////////////////////////////////
// BtnEnter
//

static BOOL BtnEnter( void ) 
{
     b20:	e92d4010 	stmdb	sp!, {r4, lr}
	if ( ( 1 == button_state( BUTTON_ENTER ) ) && 
     b24:	e3a00004 	mov	r0, #4	; 0x4
     b28:	ebffff97 	bl	98c <button_state>
     b2c:	e3500001 	cmp	r0, #1	; 0x1
     b30:	e1a04000 	mov	r4, r0
     b34:	e59f2028 	ldr	r2, [pc, #40]	; b64 <.text+0xb64>
     b38:	0a000001 	beq	b44 <BtnEnter+0x24>
			!button_lock[ BUTTON_ENTER ] )  {
		button_lock[ BUTTON_ENTER ] = TRUE;
		DEBUGWRITECRLF("Button 'Enter'.");
		return TRUE;
     b3c:	e3a00000 	mov	r0, #0	; 0x0
	}
	else {
		return FALSE;
	}
}
     b40:	e8bd8010 	ldmia	sp!, {r4, pc}
     b44:	e5923010 	ldr	r3, [r2, #16]
     b48:	e3530000 	cmp	r3, #0	; 0x0
     b4c:	e59f0014 	ldr	r0, [pc, #20]	; b68 <.text+0xb68>
     b50:	1afffff9 	bne	b3c <BtnEnter+0x1c>
     b54:	e5824010 	str	r4, [r2, #16]
     b58:	eb001411 	bl	5ba4 <debugWritecrlf>
     b5c:	e1a00004 	mov	r0, r4
     b60:	e8bd8010 	ldmia	sp!, {r4, pc}
     b64:	40000410 	andmi	r0, r0, r0, lsl r4
     b68:	00008758 	andeq	r8, r0, r8, asr r7

00000b6c <BtnDown>:
     b6c:	e92d4010 	stmdb	sp!, {r4, lr}
     b70:	e3a00003 	mov	r0, #3	; 0x3
     b74:	ebffff84 	bl	98c <button_state>
     b78:	e3500001 	cmp	r0, #1	; 0x1
     b7c:	e1a04000 	mov	r4, r0
     b80:	e59f2028 	ldr	r2, [pc, #40]	; bb0 <.text+0xbb0>
     b84:	0a000001 	beq	b90 <BtnDown+0x24>
     b88:	e3a00000 	mov	r0, #0	; 0x0
     b8c:	e8bd8010 	ldmia	sp!, {r4, pc}
     b90:	e592300c 	ldr	r3, [r2, #12]
     b94:	e3530000 	cmp	r3, #0	; 0x0
     b98:	e59f0014 	ldr	r0, [pc, #20]	; bb4 <.text+0xbb4>
     b9c:	1afffff9 	bne	b88 <BtnDown+0x1c>
     ba0:	e582400c 	str	r4, [r2, #12]
     ba4:	eb0013fe 	bl	5ba4 <debugWritecrlf>
     ba8:	e1a00004 	mov	r0, r4
     bac:	e8bd8010 	ldmia	sp!, {r4, pc}
     bb0:	40000410 	andmi	r0, r0, r0, lsl r4
     bb4:	00008768 	andeq	r8, r0, r8, ror #14

00000bb8 <BtnUp>:
     bb8:	e92d4010 	stmdb	sp!, {r4, lr}
     bbc:	e3a00002 	mov	r0, #2	; 0x2
     bc0:	ebffff71 	bl	98c <button_state>
     bc4:	e3500001 	cmp	r0, #1	; 0x1
     bc8:	e1a04000 	mov	r4, r0
     bcc:	e59f2028 	ldr	r2, [pc, #40]	; bfc <.text+0xbfc>
     bd0:	0a000001 	beq	bdc <BtnUp+0x24>
     bd4:	e3a00000 	mov	r0, #0	; 0x0
     bd8:	e8bd8010 	ldmia	sp!, {r4, pc}
     bdc:	e5923008 	ldr	r3, [r2, #8]
     be0:	e3530000 	cmp	r3, #0	; 0x0
     be4:	e59f0014 	ldr	r0, [pc, #20]	; c00 <.text+0xc00>
     be8:	1afffff9 	bne	bd4 <BtnUp+0x1c>
     bec:	e5824008 	str	r4, [r2, #8]
     bf0:	eb0013eb 	bl	5ba4 <debugWritecrlf>
     bf4:	e1a00004 	mov	r0, r4
     bf8:	e8bd8010 	ldmia	sp!, {r4, pc}
     bfc:	40000410 	andmi	r0, r0, r0, lsl r4
     c00:	00008778 	andeq	r8, r0, r8, ror r7

00000c04 <BtnForward>:
     c04:	e92d4010 	stmdb	sp!, {r4, lr}
     c08:	e3a00001 	mov	r0, #1	; 0x1
     c0c:	ebffff5e 	bl	98c <button_state>
     c10:	e3500001 	cmp	r0, #1	; 0x1
     c14:	e1a04000 	mov	r4, r0
     c18:	e59f2028 	ldr	r2, [pc, #40]	; c48 <.text+0xc48>
     c1c:	0a000001 	beq	c28 <BtnForward+0x24>
     c20:	e3a00000 	mov	r0, #0	; 0x0
     c24:	e8bd8010 	ldmia	sp!, {r4, pc}
     c28:	e5923004 	ldr	r3, [r2, #4]
     c2c:	e3530000 	cmp	r3, #0	; 0x0
     c30:	e59f0014 	ldr	r0, [pc, #20]	; c4c <.text+0xc4c>
     c34:	1afffff9 	bne	c20 <BtnForward+0x1c>
     c38:	e5824004 	str	r4, [r2, #4]
     c3c:	eb0013d8 	bl	5ba4 <debugWritecrlf>
     c40:	e1a00004 	mov	r0, r4
     c44:	e8bd8010 	ldmia	sp!, {r4, pc}
     c48:	40000410 	andmi	r0, r0, r0, lsl r4
     c4c:	00008788 	andeq	r8, r0, r8, lsl #15

00000c50 <ctrElementB>:
     c50:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
     c54:	e1a0200c 	mov	r2, ip
     c58:	e3500000 	cmp	r0, #0	; 0x0
     c5c:	e52de004 	str	lr, [sp, #-4]!
     c60:	e28cc90a 	add	ip, ip, #163840	; 0x28000
     c64:	e282290a 	add	r2, r2, #163840	; 0x28000
     c68:	0a00000a 	beq	c98 <ctrElementB+0x48>
     c6c:	e59c3010 	ldr	r3, [ip, #16]
     c70:	e3130502 	tst	r3, #8388608	; 0x800000
     c74:	e3a0001a 	mov	r0, #26	; 0x1a
     c78:	e3a01001 	mov	r1, #1	; 0x1
     c7c:	149df004 	ldrne	pc, [sp], #4
     c80:	e3a03502 	mov	r3, #8388608	; 0x800000
     c84:	e58c3014 	str	r3, [ip, #20]
     c88:	eb001333 	bl	595c <sendRelayState>
     c8c:	e59f0030 	ldr	r0, [pc, #48]	; cc4 <.text+0xcc4>
     c90:	e49de004 	ldr	lr, [sp], #4
     c94:	ea0013c2 	b	5ba4 <debugWritecrlf>
     c98:	e5923010 	ldr	r3, [r2, #16]
     c9c:	e3130502 	tst	r3, #8388608	; 0x800000
     ca0:	e1a01000 	mov	r1, r0
     ca4:	e3a0001a 	mov	r0, #26	; 0x1a
     ca8:	049df004 	ldreq	pc, [sp], #4
     cac:	e3a03502 	mov	r3, #8388608	; 0x800000
     cb0:	e582301c 	str	r3, [r2, #28]
     cb4:	eb001328 	bl	595c <sendRelayState>
     cb8:	e59f0008 	ldr	r0, [pc, #8]	; cc8 <.text+0xcc8>
     cbc:	e49de004 	ldr	lr, [sp], #4
     cc0:	ea0013b7 	b	5ba4 <debugWritecrlf>
     cc4:	0000879c 	muleq	r0, ip, r7
     cc8:	000087b8 	streqh	r8, [r0], -r8

00000ccc <ctrElementA>:
     ccc:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
     cd0:	e1a0200c 	mov	r2, ip
     cd4:	e3500000 	cmp	r0, #0	; 0x0
     cd8:	e52de004 	str	lr, [sp, #-4]!
     cdc:	e28cc90a 	add	ip, ip, #163840	; 0x28000
     ce0:	e282290a 	add	r2, r2, #163840	; 0x28000
     ce4:	0a00000a 	beq	d14 <ctrElementA+0x48>
     ce8:	e59c3010 	ldr	r3, [ip, #16]
     cec:	e3130501 	tst	r3, #4194304	; 0x400000
     cf0:	e3a00019 	mov	r0, #25	; 0x19
     cf4:	e3a01001 	mov	r1, #1	; 0x1
     cf8:	149df004 	ldrne	pc, [sp], #4
     cfc:	e3a03501 	mov	r3, #4194304	; 0x400000
     d00:	e58c3014 	str	r3, [ip, #20]
     d04:	eb001314 	bl	595c <sendRelayState>
     d08:	e59f0030 	ldr	r0, [pc, #48]	; d40 <.text+0xd40>
     d0c:	e49de004 	ldr	lr, [sp], #4
     d10:	ea0013a3 	b	5ba4 <debugWritecrlf>
     d14:	e5923010 	ldr	r3, [r2, #16]
     d18:	e3130501 	tst	r3, #4194304	; 0x400000
     d1c:	e1a01000 	mov	r1, r0
     d20:	e3a00019 	mov	r0, #25	; 0x19
     d24:	049df004 	ldreq	pc, [sp], #4
     d28:	e3a03501 	mov	r3, #4194304	; 0x400000
     d2c:	e582301c 	str	r3, [r2, #28]
     d30:	eb001309 	bl	595c <sendRelayState>
     d34:	e59f0008 	ldr	r0, [pc, #8]	; d44 <.text+0xd44>
     d38:	e49de004 	ldr	lr, [sp], #4
     d3c:	ea001398 	b	5ba4 <debugWritecrlf>
     d40:	000087d4 	ldreqd	r8, [r0], -r4
     d44:	000087f0 	streqd	r8, [r0], -r0

00000d48 <ctrFurnaceHeater>:
     d48:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
     d4c:	e1a0200c 	mov	r2, ip
     d50:	e3500000 	cmp	r0, #0	; 0x0
     d54:	e52de004 	str	lr, [sp, #-4]!
     d58:	e28cc90a 	add	ip, ip, #163840	; 0x28000
     d5c:	e282290a 	add	r2, r2, #163840	; 0x28000
     d60:	0a00000a 	beq	d90 <ctrFurnaceHeater+0x48>
     d64:	e59c3010 	ldr	r3, [ip, #16]
     d68:	e3130702 	tst	r3, #524288	; 0x80000
     d6c:	e3a00014 	mov	r0, #20	; 0x14
     d70:	e3a01001 	mov	r1, #1	; 0x1
     d74:	149df004 	ldrne	pc, [sp], #4
     d78:	e3a03702 	mov	r3, #524288	; 0x80000
     d7c:	e58c3014 	str	r3, [ip, #20]
     d80:	eb0012f5 	bl	595c <sendRelayState>
     d84:	e59f0030 	ldr	r0, [pc, #48]	; dbc <.text+0xdbc>
     d88:	e49de004 	ldr	lr, [sp], #4
     d8c:	ea001384 	b	5ba4 <debugWritecrlf>
     d90:	e5923010 	ldr	r3, [r2, #16]
     d94:	e3130702 	tst	r3, #524288	; 0x80000
     d98:	e1a01000 	mov	r1, r0
     d9c:	e3a00014 	mov	r0, #20	; 0x14
     da0:	049df004 	ldreq	pc, [sp], #4
     da4:	e3a03702 	mov	r3, #524288	; 0x80000
     da8:	e582301c 	str	r3, [r2, #28]
     dac:	eb0012ea 	bl	595c <sendRelayState>
     db0:	e59f0008 	ldr	r0, [pc, #8]	; dc0 <.text+0xdc0>
     db4:	e49de004 	ldr	lr, [sp], #4
     db8:	ea001379 	b	5ba4 <debugWritecrlf>
     dbc:	0000880c 	andeq	r8, r0, ip, lsl #16
     dc0:	00008820 	andeq	r8, r0, r0, lsr #16

00000dc4 <ctrTransportMotorB>:
     dc4:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
     dc8:	e1a0200c 	mov	r2, ip
     dcc:	e3500000 	cmp	r0, #0	; 0x0
     dd0:	e52de004 	str	lr, [sp, #-4]!
     dd4:	e28cc90a 	add	ip, ip, #163840	; 0x28000
     dd8:	e282290a 	add	r2, r2, #163840	; 0x28000
     ddc:	0a00000a 	beq	e0c <ctrTransportMotorB+0x48>
     de0:	e59c3010 	ldr	r3, [ip, #16]
     de4:	e3130802 	tst	r3, #131072	; 0x20000
     de8:	e3a00012 	mov	r0, #18	; 0x12
     dec:	e3a01001 	mov	r1, #1	; 0x1
     df0:	149df004 	ldrne	pc, [sp], #4
     df4:	e3a03802 	mov	r3, #131072	; 0x20000
     df8:	e58c3014 	str	r3, [ip, #20]
     dfc:	eb0012d6 	bl	595c <sendRelayState>
     e00:	e59f0030 	ldr	r0, [pc, #48]	; e38 <.text+0xe38>
     e04:	e49de004 	ldr	lr, [sp], #4
     e08:	ea001365 	b	5ba4 <debugWritecrlf>
     e0c:	e5923010 	ldr	r3, [r2, #16]
     e10:	e3130802 	tst	r3, #131072	; 0x20000
     e14:	e1a01000 	mov	r1, r0
     e18:	e3a00012 	mov	r0, #18	; 0x12
     e1c:	049df004 	ldreq	pc, [sp], #4
     e20:	e3a03802 	mov	r3, #131072	; 0x20000
     e24:	e582301c 	str	r3, [r2, #28]
     e28:	eb0012cb 	bl	595c <sendRelayState>
     e2c:	e59f0008 	ldr	r0, [pc, #8]	; e3c <.text+0xe3c>
     e30:	e49de004 	ldr	lr, [sp], #4
     e34:	ea00135a 	b	5ba4 <debugWritecrlf>
     e38:	00008834 	andeq	r8, r0, r4, lsr r8
     e3c:	00008840 	andeq	r8, r0, r0, asr #16

00000e40 <ctrTransportMotorA>:
     e40:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
     e44:	e1a0200c 	mov	r2, ip
     e48:	e3500000 	cmp	r0, #0	; 0x0
     e4c:	e52de004 	str	lr, [sp, #-4]!
     e50:	e28cc90a 	add	ip, ip, #163840	; 0x28000
     e54:	e282290a 	add	r2, r2, #163840	; 0x28000
     e58:	0a00000a 	beq	e88 <ctrTransportMotorA+0x48>
     e5c:	e59c3010 	ldr	r3, [ip, #16]
     e60:	e3130801 	tst	r3, #65536	; 0x10000
     e64:	e3a00011 	mov	r0, #17	; 0x11
     e68:	e3a01001 	mov	r1, #1	; 0x1
     e6c:	149df004 	ldrne	pc, [sp], #4
     e70:	e3a03801 	mov	r3, #65536	; 0x10000
     e74:	e58c3014 	str	r3, [ip, #20]
     e78:	eb0012b7 	bl	595c <sendRelayState>
     e7c:	e59f0030 	ldr	r0, [pc, #48]	; eb4 <.text+0xeb4>
     e80:	e49de004 	ldr	lr, [sp], #4
     e84:	ea001346 	b	5ba4 <debugWritecrlf>
     e88:	e5923010 	ldr	r3, [r2, #16]
     e8c:	e3130801 	tst	r3, #65536	; 0x10000
     e90:	e1a01000 	mov	r1, r0
     e94:	e3a00011 	mov	r0, #17	; 0x11
     e98:	049df004 	ldreq	pc, [sp], #4
     e9c:	e3a03801 	mov	r3, #65536	; 0x10000
     ea0:	e582301c 	str	r3, [r2, #28]
     ea4:	eb0012ac 	bl	595c <sendRelayState>
     ea8:	e59f0008 	ldr	r0, [pc, #8]	; eb8 <.text+0xeb8>
     eac:	e49de004 	ldr	lr, [sp], #4
     eb0:	ea00133b 	b	5ba4 <debugWritecrlf>
     eb4:	0000884c 	andeq	r8, r0, ip, asr #16
     eb8:	00008858 	andeq	r8, r0, r8, asr r8

00000ebc <ctrFan>:
     ebc:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
     ec0:	e1a0200c 	mov	r2, ip
     ec4:	e3500000 	cmp	r0, #0	; 0x0
     ec8:	e52de004 	str	lr, [sp, #-4]!
     ecc:	e28cc90a 	add	ip, ip, #163840	; 0x28000
     ed0:	e282290a 	add	r2, r2, #163840	; 0x28000
     ed4:	0a00000a 	beq	f04 <ctrFan+0x48>
     ed8:	e59c3010 	ldr	r3, [ip, #16]
     edc:	e3130701 	tst	r3, #262144	; 0x40000
     ee0:	e3a00013 	mov	r0, #19	; 0x13
     ee4:	e3a01001 	mov	r1, #1	; 0x1
     ee8:	149df004 	ldrne	pc, [sp], #4
     eec:	e3a03701 	mov	r3, #262144	; 0x40000
     ef0:	e58c3014 	str	r3, [ip, #20]
     ef4:	eb001298 	bl	595c <sendRelayState>
     ef8:	e59f0030 	ldr	r0, [pc, #48]	; f30 <.text+0xf30>
     efc:	e49de004 	ldr	lr, [sp], #4
     f00:	ea001327 	b	5ba4 <debugWritecrlf>
     f04:	e5923010 	ldr	r3, [r2, #16]
     f08:	e3130701 	tst	r3, #262144	; 0x40000
     f0c:	e1a01000 	mov	r1, r0
     f10:	e3a00013 	mov	r0, #19	; 0x13
     f14:	049df004 	ldreq	pc, [sp], #4
     f18:	e3a03701 	mov	r3, #262144	; 0x40000
     f1c:	e582301c 	str	r3, [r2, #28]
     f20:	eb00128d 	bl	595c <sendRelayState>
     f24:	e59f0008 	ldr	r0, [pc, #8]	; f34 <.text+0xf34>
     f28:	e49de004 	ldr	lr, [sp], #4
     f2c:	ea00131c 	b	5ba4 <debugWritecrlf>
     f30:	00008864 	andeq	r8, r0, r4, ror #16
     f34:	0000886c 	andeq	r8, r0, ip, ror #16

00000f38 <main>:
     f38:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
     f3c:	e28cc97f 	add	ip, ip, #2080768	; 0x1fc000
     f40:	e3a03024 	mov	r3, #36	; 0x24
     f44:	e3a02001 	mov	r2, #1	; 0x1
     f48:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f4c:	e5cc3084 	strb	r3, [ip, #132]
     f50:	e5cc2080 	strb	r2, [ip, #128]
     f54:	e243307a 	sub	r3, r3, #122	; 0x7a
     f58:	e2822054 	add	r2, r2, #84	; 0x54
     f5c:	e5cc308c 	strb	r3, [ip, #140]
     f60:	e3a0e20e 	mov	lr, #-536870912	; 0xe0000000
     f64:	e5cc208c 	strb	r2, [ip, #140]
     f68:	e28ee90b 	add	lr, lr, #180224	; 0x2c000
     f6c:	e59e3004 	ldr	r3, [lr, #4]
     f70:	e3a01df3 	mov	r1, #15552	; 0x3cc0
     f74:	e3c3350f 	bic	r3, r3, #62914560	; 0x3c00000
     f78:	e3833616 	orr	r3, r3, #23068672	; 0x1600000
     f7c:	e28111c3 	add	r1, r1, #-1073741776	; 0xc0000030
     f80:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
     f84:	e58e3004 	str	r3, [lr, #4]
     f88:	e282290a 	add	r2, r2, #163840	; 0x28000
     f8c:	e3a0300c 	mov	r3, #12	; 0xc
     f90:	e3a00dd3 	mov	r0, #13504	; 0x34c0
     f94:	e2811586 	add	r1, r1, #562036736	; 0x21800000
     f98:	e582100c 	str	r1, [r2, #12]
     f9c:	e3a048ff 	mov	r4, #16711680	; 0xff0000
     fa0:	e5823004 	str	r3, [r2, #4]
     fa4:	e280003c 	add	r0, r0, #60	; 0x3c
     fa8:	e243300c 	sub	r3, r3, #12	; 0xc
     fac:	e5820008 	str	r0, [r2, #8]
     fb0:	e582401c 	str	r4, [r2, #28]
     fb4:	e5823014 	str	r3, [r2, #20]
     fb8:	e5824018 	str	r4, [r2, #24]
     fbc:	e24dd0a0 	sub	sp, sp, #160	; 0xa0
     fc0:	e3a0620e 	mov	r6, #-536870912	; 0xe0000000
     fc4:	e1dc38b8 	ldrh	r3, [ip, #136]
     fc8:	e3130b01 	tst	r3, #1024	; 0x400
     fcc:	0afffffc 	beq	fc4 <main+0x8c>
     fd0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
     fd4:	e283397f 	add	r3, r3, #2080768	; 0x1fc000
     fd8:	e3a00003 	mov	r0, #3	; 0x3
     fdc:	e3e04055 	mvn	r4, #85	; 0x55
     fe0:	e3a01002 	mov	r1, #2	; 0x2
     fe4:	e2833c01 	add	r3, r3, #256	; 0x100
     fe8:	e3a05055 	mov	r5, #85	; 0x55
     fec:	e5cc0080 	strb	r0, [ip, #128]
     ff0:	e5cc408c 	strb	r4, [ip, #140]
     ff4:	e5cc508c 	strb	r5, [ip, #140]
     ff8:	e5cc0004 	strb	r0, [ip, #4]
     ffc:	e5cc1000 	strb	r1, [ip]
    1000:	e5c31000 	strb	r1, [r3]
    1004:	e59f3f80 	ldr	r3, [pc, #3968]	; 1f8c <.text+0x1f8c>
    1008:	e3e02000 	mvn	r2, #0	; 0x0
    100c:	e3a01001 	mov	r1, #1	; 0x1
    1010:	e3a07000 	mov	r7, #0	; 0x0
    1014:	e5cc1040 	strb	r1, [ip, #64]
    1018:	e5022feb 	str	r2, [r2, #-4075]
    101c:	e5027ff3 	str	r7, [r2, #-4083]
    1020:	e5023fcb 	str	r3, [r2, #-4043]
    1024:	eb000974 	bl	35fc <initSysTime>
    1028:	e3a00021 	mov	r0, #33	; 0x21
    102c:	e3a01003 	mov	r1, #3	; 0x3
    1030:	e3a02081 	mov	r2, #129	; 0x81
    1034:	eb00099b 	bl	36a8 <uart0Init>
    1038:	e3a01003 	mov	r1, #3	; 0x3
    103c:	e3a02081 	mov	r2, #129	; 0x81
    1040:	e3a00021 	mov	r0, #33	; 0x21
    1044:	eb0009f2 	bl	3814 <uart1Init>
    1048:	eb000d41 	bl	4554 <i2cInit>
    104c:	e3a038e5 	mov	r3, #15007744	; 0xe50000
    1050:	e2433d79 	sub	r3, r3, #7744	; 0x1e40
    1054:	e3a02003 	mov	r2, #3	; 0x3
    1058:	e5863004 	str	r3, [r6, #4]
    105c:	e586700c 	str	r7, [r6, #12]
    1060:	e5c62000 	strb	r2, [r6]
    1064:	e5c64008 	strb	r4, [r6, #8]
    1068:	e5c65008 	strb	r5, [r6, #8]
    106c:	eb000be4 	bl	4004 <enableIRQ>
    1070:	eb000fc5 	bl	4f8c <vscp_check_pstorage>
    1074:	e2504000 	subs	r4, r0, #0	; 0x0
    1078:	1a000037 	bne	115c <main+0x224>
    107c:	e3a01001 	mov	r1, #1	; 0x1
    1080:	e2800021 	add	r0, r0, #33	; 0x21
    1084:	eb000e9b 	bl	4af8 <writeEEPROM>
    1088:	e3a01080 	mov	r1, #128	; 0x80
    108c:	e3a00022 	mov	r0, #34	; 0x22
    1090:	eb000e98 	bl	4af8 <writeEEPROM>
    1094:	e1a01004 	mov	r1, r4
    1098:	e3a00023 	mov	r0, #35	; 0x23
    109c:	eb000e95 	bl	4af8 <writeEEPROM>
    10a0:	e3a01032 	mov	r1, #50	; 0x32
    10a4:	e3a0002b 	mov	r0, #43	; 0x2b
    10a8:	eb000e92 	bl	4af8 <writeEEPROM>
    10ac:	e3a01050 	mov	r1, #80	; 0x50
    10b0:	e3a0002c 	mov	r0, #44	; 0x2c
    10b4:	eb000e8f 	bl	4af8 <writeEEPROM>
    10b8:	e3a01046 	mov	r1, #70	; 0x46
    10bc:	e3a0002d 	mov	r0, #45	; 0x2d
    10c0:	eb000e8c 	bl	4af8 <writeEEPROM>
    10c4:	e3a01003 	mov	r1, #3	; 0x3
    10c8:	e3a00033 	mov	r0, #51	; 0x33
    10cc:	eb000e89 	bl	4af8 <writeEEPROM>
    10d0:	e3a0101c 	mov	r1, #28	; 0x1c
    10d4:	e3a00034 	mov	r0, #52	; 0x34
    10d8:	eb000e86 	bl	4af8 <writeEEPROM>
    10dc:	e3a01020 	mov	r1, #32	; 0x20
    10e0:	e3a00035 	mov	r0, #53	; 0x35
    10e4:	eb000e83 	bl	4af8 <writeEEPROM>
    10e8:	e3a01005 	mov	r1, #5	; 0x5
    10ec:	e3a00036 	mov	r0, #54	; 0x36
    10f0:	eb000e80 	bl	4af8 <writeEEPROM>
    10f4:	e3a01014 	mov	r1, #20	; 0x14
    10f8:	e3a00037 	mov	r0, #55	; 0x37
    10fc:	eb000e7d 	bl	4af8 <writeEEPROM>
    1100:	e3a0101e 	mov	r1, #30	; 0x1e
    1104:	e3a00038 	mov	r0, #56	; 0x38
    1108:	eb000e7a 	bl	4af8 <writeEEPROM>
    110c:	e3a01003 	mov	r1, #3	; 0x3
    1110:	e3a0003f 	mov	r0, #63	; 0x3f
    1114:	eb000e77 	bl	4af8 <writeEEPROM>
    1118:	e3a01003 	mov	r1, #3	; 0x3
    111c:	e3a00039 	mov	r0, #57	; 0x39
    1120:	eb000e74 	bl	4af8 <writeEEPROM>
    1124:	e3a01005 	mov	r1, #5	; 0x5
    1128:	e3a0003a 	mov	r0, #58	; 0x3a
    112c:	eb000e71 	bl	4af8 <writeEEPROM>
    1130:	e3a01005 	mov	r1, #5	; 0x5
    1134:	e3a0003b 	mov	r0, #59	; 0x3b
    1138:	eb000e6e 	bl	4af8 <writeEEPROM>
    113c:	e1a01004 	mov	r1, r4
    1140:	e3a0003c 	mov	r0, #60	; 0x3c
    1144:	eb000e6b 	bl	4af8 <writeEEPROM>
    1148:	e3a0003d 	mov	r0, #61	; 0x3d
    114c:	e3a01014 	mov	r1, #20	; 0x14
    1150:	eb000e68 	bl	4af8 <writeEEPROM>
    1154:	e59f0e34 	ldr	r0, [pc, #3636]	; 1f90 <.text+0x1f90>
    1158:	eb001291 	bl	5ba4 <debugWritecrlf>
    115c:	eb000f9d 	bl	4fd8 <vscp_init>
    1160:	e59f0e2c 	ldr	r0, [pc, #3628]	; 1f94 <.text+0x1f94>
    1164:	eb000a5c 	bl	3adc <uart1Puts>
    1168:	e59f0e28 	ldr	r0, [pc, #3624]	; 1f98 <.text+0x1f98>
    116c:	eb000a5a 	bl	3adc <uart1Puts>
    1170:	e59f0e24 	ldr	r0, [pc, #3620]	; 1f9c <.text+0x1f9c>
    1174:	eb000a58 	bl	3adc <uart1Puts>
    1178:	e59f0e20 	ldr	r0, [pc, #3616]	; 1fa0 <.text+0x1fa0>
    117c:	eb000a56 	bl	3adc <uart1Puts>
    1180:	eb00092c 	bl	3638 <getSysTICs>
    1184:	e58d0010 	str	r0, [sp, #16]
    1188:	eb00092a 	bl	3638 <getSysTICs>
    118c:	e1a0b000 	mov	fp, r0
    1190:	eb000928 	bl	3638 <getSysTICs>
    1194:	e1a09000 	mov	r9, r0
    1198:	eb000926 	bl	3638 <getSysTICs>
    119c:	e1a0a000 	mov	sl, r0
    11a0:	eb000924 	bl	3638 <getSysTICs>
    11a4:	e1a08000 	mov	r8, r0
    11a8:	eb000922 	bl	3638 <getSysTICs>
    11ac:	e58d0014 	str	r0, [sp, #20]
    11b0:	eb000920 	bl	3638 <getSysTICs>
    11b4:	e58d0018 	str	r0, [sp, #24]
    11b8:	eb00091e 	bl	3638 <getSysTICs>
    11bc:	e58d001c 	str	r0, [sp, #28]
    11c0:	eb00091c 	bl	3638 <getSysTICs>
    11c4:	e58d0020 	str	r0, [sp, #32]
    11c8:	eb00091a 	bl	3638 <getSysTICs>
    11cc:	e58d0024 	str	r0, [sp, #36]
    11d0:	eb000918 	bl	3638 <getSysTICs>
    11d4:	e58d0028 	str	r0, [sp, #40]
    11d8:	eb000916 	bl	3638 <getSysTICs>
    11dc:	e58d002c 	str	r0, [sp, #44]
    11e0:	eb000e63 	bl	4b74 <clrDisplayBuf>
    11e4:	eb000c26 	bl	4284 <LCDInit>
    11e8:	e3a00028 	mov	r0, #40	; 0x28
    11ec:	eb000bff 	bl	41f0 <LCDSendCommand>
    11f0:	e3a0000c 	mov	r0, #12	; 0xc
    11f4:	eb000bfd 	bl	41f0 <LCDSendCommand>
    11f8:	e3a00001 	mov	r0, #1	; 0x1
    11fc:	eb000bfb 	bl	41f0 <LCDSendCommand>
    1200:	e59f0d9c 	ldr	r0, [pc, #3484]	; 1fa4 <.text+0x1fa4>
    1204:	eb001253 	bl	5b58 <debugWrite>
    1208:	e59f0d98 	ldr	r0, [pc, #3480]	; 1fa8 <.text+0x1fa8>
    120c:	eb001251 	bl	5b58 <debugWrite>
    1210:	e59f0d94 	ldr	r0, [pc, #3476]	; 1fac <.text+0x1fac>
    1214:	eb001262 	bl	5ba4 <debugWritecrlf>
    1218:	e59f0d90 	ldr	r0, [pc, #3472]	; 1fb0 <.text+0x1fb0>
    121c:	eb001260 	bl	5ba4 <debugWritecrlf>
    1220:	ebfffcd3 	bl	574 <getHeaterTemp>
    1224:	e59f3e88 	ldr	r3, [pc, #3720]	; 20b4 <.text+0x20b4>
    1228:	e3a0c001 	mov	ip, #1	; 0x1
    122c:	e5c30000 	strb	r0, [r3]
    1230:	e3a01007 	mov	r1, #7	; 0x7
    1234:	e3a00003 	mov	r0, #3	; 0x3
    1238:	e58dc008 	str	ip, [sp, #8]
    123c:	e88d1001 	stmia	sp, {r0, ip}
    1240:	e58d100c 	str	r1, [sp, #12]
    1244:	e58d7030 	str	r7, [sp, #48]
    1248:	e58d7034 	str	r7, [sp, #52]
    124c:	eb000b68 	bl	3ff4 <disableIRQ>
    1250:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    1254:	e3e02055 	mvn	r2, #85	; 0x55
    1258:	e3a01055 	mov	r1, #85	; 0x55
    125c:	e5c32008 	strb	r2, [r3, #8]
    1260:	e5c31008 	strb	r1, [r3, #8]
    1264:	eb000b4c 	bl	3f9c <restoreIRQ>
    1268:	e3a00000 	mov	r0, #0	; 0x0
    126c:	ebfffdc6 	bl	98c <button_state>
    1270:	e3500000 	cmp	r0, #0	; 0x0
    1274:	059f2e48 	ldreq	r2, [pc, #3656]	; 20c4 <.text+0x20c4>
    1278:	05820000 	streq	r0, [r2]
    127c:	e3a00001 	mov	r0, #1	; 0x1
    1280:	ebfffdc1 	bl	98c <button_state>
    1284:	e3500000 	cmp	r0, #0	; 0x0
    1288:	059f3e34 	ldreq	r3, [pc, #3636]	; 20c4 <.text+0x20c4>
    128c:	05830004 	streq	r0, [r3, #4]
    1290:	e3a00002 	mov	r0, #2	; 0x2
    1294:	ebfffdbc 	bl	98c <button_state>
    1298:	e3500000 	cmp	r0, #0	; 0x0
    129c:	059fce20 	ldreq	ip, [pc, #3616]	; 20c4 <.text+0x20c4>
    12a0:	058c0008 	streq	r0, [ip, #8]
    12a4:	e3a00003 	mov	r0, #3	; 0x3
    12a8:	ebfffdb7 	bl	98c <button_state>
    12ac:	e3500000 	cmp	r0, #0	; 0x0
    12b0:	059f1e0c 	ldreq	r1, [pc, #3596]	; 20c4 <.text+0x20c4>
    12b4:	0581000c 	streq	r0, [r1, #12]
    12b8:	e3a00004 	mov	r0, #4	; 0x4
    12bc:	ebfffdb2 	bl	98c <button_state>
    12c0:	e3500000 	cmp	r0, #0	; 0x0
    12c4:	059f2df8 	ldreq	r2, [pc, #3576]	; 20c4 <.text+0x20c4>
    12c8:	05820010 	streq	r0, [r2, #16]
    12cc:	e3a00005 	mov	r0, #5	; 0x5
    12d0:	ebfffdad 	bl	98c <button_state>
    12d4:	e3500000 	cmp	r0, #0	; 0x0
    12d8:	059f3de4 	ldreq	r3, [pc, #3556]	; 20c4 <.text+0x20c4>
    12dc:	05830014 	streq	r0, [r3, #20]
    12e0:	e3a00000 	mov	r0, #0	; 0x0
    12e4:	ebfffda8 	bl	98c <button_state>
    12e8:	e3500001 	cmp	r0, #1	; 0x1
    12ec:	e1a04000 	mov	r4, r0
    12f0:	0a00076d 	beq	30ac <.text+0x30ac>


///////////////////////////////////////////////////////////////////////////////
// BtnForceMotorOn
//

static BOOL BtnForceMotorOn( void ) 
{
	if ( ( 1 == button_state( BUTTON_FORCE_MOTOR_ON ) ) && 
    12f4:	e3a00005 	mov	r0, #5	; 0x5
    12f8:	ebfffda3 	bl	98c <button_state>
    12fc:	e3500001 	cmp	r0, #1	; 0x1
    1300:	e1a04000 	mov	r4, r0
    1304:	0a000750 	beq	304c <.text+0x304c>
    1308:	e59f2d90 	ldr	r2, [pc, #3472]	; 20a0 <.text+0x20a0>
    130c:	e3a03000 	mov	r3, #0	; 0x0
    1310:	e5c23000 	strb	r3, [r2]
    1314:	eb000fa5 	bl	51b0 <vscp_receiveMsg>
    1318:	e59fcc94 	ldr	ip, [pc, #3220]	; 1fb4 <.text+0x1fb4>
    131c:	e5dc3000 	ldrb	r3, [ip]
    1320:	e3530004 	cmp	r3, #4	; 0x4
    1324:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    1328:	ea000004 	b	1340 <.text+0x1340>
    132c:	00001464 	andeq	r1, r0, r4, ror #8
    1330:	00001494 	muleq	r0, r4, r4
    1334:	0000149c 	muleq	r0, ip, r4
    1338:	000014a4 	andeq	r1, r0, r4, lsr #9
    133c:	00001508 	andeq	r1, r0, r8, lsl #10
    1340:	e59fcc6c 	ldr	ip, [pc, #3180]	; 1fb4 <.text+0x1fb4>
    1344:	e3a03000 	mov	r3, #0	; 0x0
    1348:	e5cc3000 	strb	r3, [ip]
    134c:	e59d0010 	ldr	r0, [sp, #16]
    1350:	eb0008c6 	bl	3670 <getElapsedSysTICs>
    1354:	e3a03c27 	mov	r3, #9984	; 0x2700
    1358:	e2833010 	add	r3, r3, #16	; 0x10
    135c:	e1500003 	cmp	r0, r3
    1360:	9a000009 	bls	138c <.text+0x138c>
    1364:	e59f0c4c 	ldr	r0, [pc, #3148]	; 1fb8 <.text+0x1fb8>
    1368:	e1d030b0 	ldrh	r3, [r0]
    136c:	e59d1010 	ldr	r1, [sp, #16]
    1370:	e2833001 	add	r3, r3, #1	; 0x1
    1374:	e1a03803 	mov	r3, r3, lsl #16
    1378:	e2811c27 	add	r1, r1, #9984	; 0x2700
    137c:	e1a03823 	mov	r3, r3, lsr #16
    1380:	e2811010 	add	r1, r1, #16	; 0x10
    1384:	e1c030b0 	strh	r3, [r0]
    1388:	e58d1010 	str	r1, [sp, #16]
    138c:	e1a0000b 	mov	r0, fp
    1390:	eb0008b6 	bl	3670 <getElapsedSysTICs>
    1394:	e3a03713 	mov	r3, #4980736	; 0x4c0000
    1398:	e2833c4b 	add	r3, r3, #19200	; 0x4b00
    139c:	e2833040 	add	r3, r3, #64	; 0x40
    13a0:	e1500003 	cmp	r0, r3
    13a4:	9a00000a 	bls	13d4 <.text+0x13d4>
    13a8:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    13ac:	e282290a 	add	r2, r2, #163840	; 0x28000
    13b0:	e5923010 	ldr	r3, [r2, #16]
    13b4:	e3130601 	tst	r3, #1048576	; 0x100000
    13b8:	13a03601 	movne	r3, #1048576	; 0x100000
    13bc:	03a03601 	moveq	r3, #1048576	; 0x100000
    13c0:	e28bb713 	add	fp, fp, #4980736	; 0x4c0000
    13c4:	e28bbc4b 	add	fp, fp, #19200	; 0x4b00
    13c8:	1582301c 	strne	r3, [r2, #28]
    13cc:	05823014 	streq	r3, [r2, #20]
    13d0:	e28bb040 	add	fp, fp, #64	; 0x40
    13d4:	e1a00009 	mov	r0, r9
    13d8:	eb0008a4 	bl	3670 <getElapsedSysTICs>
    13dc:	e3a03726 	mov	r3, #9961472	; 0x980000
    13e0:	e2833c96 	add	r3, r3, #38400	; 0x9600
    13e4:	e2833080 	add	r3, r3, #128	; 0x80
    13e8:	e1500003 	cmp	r0, r3
    13ec:	8a00070a 	bhi	301c <.text+0x301c>
    13f0:	e1a0000a 	mov	r0, sl
    13f4:	eb00089d 	bl	3670 <getElapsedSysTICs>
    13f8:	e3a037be 	mov	r3, #49807360	; 0x2f80000
    13fc:	e2833a2f 	add	r3, r3, #192512	; 0x2f000
    1400:	e2833080 	add	r3, r3, #128	; 0x80
    1404:	e1500003 	cmp	r0, r3
    1408:	8a0006c2 	bhi	2f18 <.text+0x2f18>
    140c:	e1a00008 	mov	r0, r8
    1410:	eb000896 	bl	3670 <getElapsedSysTICs>
    1414:	e3a0358f 	mov	r3, #599785472	; 0x23c00000
    1418:	e2833bd1 	add	r3, r3, #214016	; 0x34400
    141c:	e2833c02 	add	r3, r3, #512	; 0x200
    1420:	e1500003 	cmp	r0, r3
    1424:	8a0006ef 	bhi	2fe8 <.text+0x2fe8>
    1428:	e59dc000 	ldr	ip, [sp]
    142c:	e35c000a 	cmp	ip, #10	; 0xa
    1430:	979ff10c 	ldrls	pc, [pc, ip, lsl #2]
    1434:	ea0002cf 	b	1f78 <.text+0x1f78>
    1438:	00001e58 	andeq	r1, r0, r8, asr lr
    143c:	00001ec0 	andeq	r1, r0, r0, asr #29
    1440:	00002190 	muleq	r0, r0, r1
    1444:	00002208 	andeq	r2, r0, r8, lsl #4
    1448:	00001510 	andeq	r1, r0, r0, lsl r5
    144c:	00001e14 	andeq	r1, r0, r4, lsl lr
    1450:	00001c24 	andeq	r1, r0, r4, lsr #24
    1454:	00001cf0 	streqd	r1, [r0], -r0
    1458:	00001d58 	andeq	r1, r0, r8, asr sp
    145c:	000020c8 	andeq	r2, r0, r8, asr #1
    1460:	00001f14 	andeq	r1, r0, r4, lsl pc
    1464:	e59f0c38 	ldr	r0, [pc, #3128]	; 20a4 <.text+0x20a4>
    1468:	e5d03000 	ldrb	r3, [r0]
    146c:	e35300ff 	cmp	r3, #255	; 0xff
    1470:	059f1b3c 	ldreq	r1, [pc, #2876]	; 1fb4 <.text+0x1fb4>
    1474:	024330fe 	subeq	r3, r3, #254	; 0xfe
    1478:	05c13000 	streqb	r3, [r1]
    147c:	0affffb2 	beq	134c <.text+0x134c>
    1480:	e59f2b2c 	ldr	r2, [pc, #2860]	; 1fb4 <.text+0x1fb4>
    1484:	e3a03003 	mov	r3, #3	; 0x3
    1488:	e5c23000 	strb	r3, [r2]
    148c:	eb00107b 	bl	5680 <vscp_active>
    1490:	eaffffad 	b	134c <.text+0x134c>
    1494:	eb00108e 	bl	56d4 <vscp_probe>
    1498:	eaffffab 	b	134c <.text+0x134c>
    149c:	eb000f16 	bl	50fc <vscp_rcv_preactive>
    14a0:	eaffffa9 	b	134c <.text+0x134c>
    14a4:	e59f3bf4 	ldr	r3, [pc, #3060]	; 20a0 <.text+0x20a0>
    14a8:	e5d32000 	ldrb	r2, [r3]
    14ac:	e3120080 	tst	r2, #128	; 0x80
    14b0:	e1a01003 	mov	r1, r3
    14b4:	0affffa4 	beq	134c <.text+0x134c>
    14b8:	e1d330b2 	ldrh	r3, [r3, #2]
    14bc:	e3530000 	cmp	r3, #0	; 0x0
    14c0:	1affffa1 	bne	134c <.text+0x134c>
    14c4:	e5d13004 	ldrb	r3, [r1, #4]
    14c8:	e2433001 	sub	r3, r3, #1	; 0x1
    14cc:	e353000b 	cmp	r3, #11	; 0xb
    14d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    14d4:	eaffff9c 	b	134c <.text+0x134c>
    14d8:	00002dc8 	andeq	r2, r0, r8, asr #27
    14dc:	00002dd0 	ldreqd	r2, [r0], -r0
    14e0:	0000134c 	andeq	r1, r0, ip, asr #6
    14e4:	0000134c 	andeq	r1, r0, ip, asr #6
    14e8:	0000134c 	andeq	r1, r0, ip, asr #6
    14ec:	00002dd8 	ldreqd	r2, [r0], -r8
    14f0:	0000134c 	andeq	r1, r0, ip, asr #6
    14f4:	00002de0 	andeq	r2, r0, r0, ror #27
    14f8:	00002de8 	andeq	r2, r0, r8, ror #27
    14fc:	0000134c 	andeq	r1, r0, ip, asr #6
    1500:	00002e20 	andeq	r2, r0, r0, lsr #28
    1504:	00002e5c 	andeq	r2, r0, ip, asr lr
    1508:	eb000e68 	bl	4eb0 <vscp_error>
    150c:	eaffff8e 	b	134c <.text+0x134c>
    1510:	e3a00001 	mov	r0, #1	; 0x1
    1514:	ebfffe68 	bl	ebc <ctrFan>
    1518:	e3a00001 	mov	r0, #1	; 0x1
    151c:	ebfffe09 	bl	d48 <ctrFurnaceHeater>
    1520:	e3a00001 	mov	r0, #1	; 0x1
    1524:	ebfffe45 	bl	e40 <ctrTransportMotorA>
    1528:	e3a00001 	mov	r0, #1	; 0x1
    152c:	ebfffe24 	bl	dc4 <ctrTransportMotorB>
    1530:	e59f1a84 	ldr	r1, [pc, #2692]	; 1fbc <.text+0x1fbc>
    1534:	e3a0200b 	mov	r2, #11	; 0xb
    1538:	e28d0088 	add	r0, sp, #136	; 0x88
    153c:	eb00119e 	bl	5bbc <memcpy>
    1540:	ebfffc49 	bl	66c <getFireDetectorLevel>
    1544:	e1a04000 	mov	r4, r0
    1548:	ebfffc2e 	bl	608 <getFireReferenceLevel>
    154c:	e1540000 	cmp	r4, r0
    1550:	3a00074d 	bcc	328c <.text+0x328c>
    1554:	e59d0014 	ldr	r0, [sp, #20]
    1558:	eb000844 	bl	3670 <getElapsedSysTICs>
    155c:	e1a04000 	mov	r4, r0
    1560:	e3a00038 	mov	r0, #56	; 0x38
    1564:	eb000d35 	bl	4a40 <readEEPROM>
    1568:	e1a00800 	mov	r0, r0, lsl #16
    156c:	e1a00840 	mov	r0, r0, asr #16
    1570:	e0603280 	rsb	r3, r0, r0, lsl #5
    1574:	e0633303 	rsb	r3, r3, r3, lsl #6
    1578:	e0800183 	add	r0, r0, r3, lsl #3
    157c:	e0800100 	add	r0, r0, r0, lsl #2
    1580:	e1540380 	cmp	r4, r0, lsl #7
    1584:	8a00078a 	bhi	33b4 <.text+0x33b4>
    1588:	e59f3b20 	ldr	r3, [pc, #2848]	; 20b0 <.text+0x20b0>
    158c:	e3a0002c 	mov	r0, #44	; 0x2c
    1590:	e5d34000 	ldrb	r4, [r3]
    1594:	eb000d29 	bl	4a40 <readEEPROM>
    1598:	e1a00800 	mov	r0, r0, lsl #16
    159c:	e1540840 	cmp	r4, r0, asr #16
    15a0:	aa00077c 	bge	3398 <.text+0x3398>
    15a4:	e3a00022 	mov	r0, #34	; 0x22
    15a8:	eb000d24 	bl	4a40 <readEEPROM>
    15ac:	e3100080 	tst	r0, #128	; 0x80
    15b0:	0a00072e 	beq	3270 <.text+0x3270>
    15b4:	e59d0004 	ldr	r0, [sp, #4]
    15b8:	e3500003 	cmp	r0, #3	; 0x3
    15bc:	979ff100 	ldrls	pc, [pc, r0, lsl #2]
    15c0:	ea00000f 	b	1604 <.text+0x1604>
    15c4:	000015d4 	ldreqd	r1, [r0], -r4
    15c8:	00001648 	andeq	r1, r0, r8, asr #12
    15cc:	000016c0 	andeq	r1, r0, r0, asr #13
    15d0:	00001754 	andeq	r1, r0, r4, asr r7
    15d4:	e3a00000 	mov	r0, #0	; 0x0
    15d8:	ebfffdbb 	bl	ccc <ctrElementA>
    15dc:	e3a00000 	mov	r0, #0	; 0x0
    15e0:	ebfffd9a 	bl	c50 <ctrElementB>
    15e4:	e3a03846 	mov	r3, #4587520	; 0x460000
    15e8:	e2833c46 	add	r3, r3, #17920	; 0x4600
    15ec:	e283304f 	add	r3, r3, #79	; 0x4f
    15f0:	e3a00023 	mov	r0, #35	; 0x23
    15f4:	e58d3094 	str	r3, [sp, #148]
    15f8:	eb000d10 	bl	4a40 <readEEPROM>
    15fc:	e3100080 	tst	r0, #128	; 0x80
    1600:	0a000003 	beq	1614 <.text+0x1614>
    1604:	e59f09a4 	ldr	r0, [pc, #2468]	; 1fb0 <.text+0x1fb0>
    1608:	eb001165 	bl	5ba4 <debugWritecrlf>
    160c:	e3a01001 	mov	r1, #1	; 0x1
    1610:	e58d1004 	str	r1, [sp, #4]
    1614:	e59d2008 	ldr	r2, [sp, #8]
    1618:	e3520008 	cmp	r2, #8	; 0x8
    161c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    1620:	ea0000c2 	b	1930 <.text+0x1930>
    1624:	0000194c 	andeq	r1, r0, ip, asr #18
    1628:	000017a4 	andeq	r1, r0, r4, lsr #15
    162c:	00001ab8 	streqh	r1, [r0], -r8
    1630:	00001a14 	andeq	r1, r0, r4, lsl sl
    1634:	00001b80 	andeq	r1, r0, r0, lsl #23
    1638:	00001980 	andeq	r1, r0, r0, lsl #19
    163c:	000018f8 	streqd	r1, [r0], -r8
    1640:	000018a0 	andeq	r1, r0, r0, lsr #17
    1644:	00001970 	andeq	r1, r0, r0, ror r9
    1648:	e3a00000 	mov	r0, #0	; 0x0
    164c:	ebfffd9e 	bl	ccc <ctrElementA>
    1650:	e3a00000 	mov	r0, #0	; 0x0
    1654:	ebfffd7d 	bl	c50 <ctrElementB>
    1658:	e59f1960 	ldr	r1, [pc, #2400]	; 1fc0 <.text+0x1fc0>
    165c:	e3a02005 	mov	r2, #5	; 0x5
    1660:	e28d0094 	add	r0, sp, #148	; 0x94
    1664:	eb001154 	bl	5bbc <memcpy>
    1668:	e59f2a44 	ldr	r2, [pc, #2628]	; 20b4 <.text+0x20b4>
    166c:	e3a0002d 	mov	r0, #45	; 0x2d
    1670:	e5d25000 	ldrb	r5, [r2]
    1674:	eb000cf1 	bl	4a40 <readEEPROM>
    1678:	e1a04800 	mov	r4, r0, lsl #16
    167c:	e3a0003a 	mov	r0, #58	; 0x3a
    1680:	eb000cee 	bl	4a40 <readEEPROM>
    1684:	e1a04824 	mov	r4, r4, lsr #16
    1688:	e1a00800 	mov	r0, r0, lsl #16
    168c:	e1a04804 	mov	r4, r4, lsl #16
    1690:	e1a00840 	mov	r0, r0, asr #16
    1694:	e0600844 	rsb	r0, r0, r4, asr #16
    1698:	e1550000 	cmp	r5, r0
    169c:	ba0006a0 	blt	3124 <.text+0x3124>
    16a0:	e3a00023 	mov	r0, #35	; 0x23
    16a4:	eb000ce5 	bl	4a40 <readEEPROM>
    16a8:	e2104080 	ands	r4, r0, #128	; 0x80
    16ac:	1affffd8 	bne	1614 <.text+0x1614>
    16b0:	e59f090c 	ldr	r0, [pc, #2316]	; 1fc4 <.text+0x1fc4>
    16b4:	eb00113a 	bl	5ba4 <debugWritecrlf>
    16b8:	e58d4004 	str	r4, [sp, #4]
    16bc:	eaffffd4 	b	1614 <.text+0x1614>
    16c0:	e3a00001 	mov	r0, #1	; 0x1
    16c4:	ebfffd80 	bl	ccc <ctrElementA>
    16c8:	e3a00000 	mov	r0, #0	; 0x0
    16cc:	ebfffd5f 	bl	c50 <ctrElementB>
    16d0:	e59f19dc 	ldr	r1, [pc, #2524]	; 20b4 <.text+0x20b4>
    16d4:	e3a0c041 	mov	ip, #65	; 0x41
    16d8:	e3a0002d 	mov	r0, #45	; 0x2d
    16dc:	e5d14000 	ldrb	r4, [r1]
    16e0:	e1cdc9b4 	strh	ip, [sp, #148]
    16e4:	eb000cd5 	bl	4a40 <readEEPROM>
    16e8:	e1a00800 	mov	r0, r0, lsl #16
    16ec:	e1540840 	cmp	r4, r0, asr #16
    16f0:	ca000692 	bgt	3140 <.text+0x3140>
    16f4:	e59d0024 	ldr	r0, [sp, #36]
    16f8:	eb0007dc 	bl	3670 <getElapsedSysTICs>
    16fc:	e1a05000 	mov	r5, r0
    1700:	e3a00034 	mov	r0, #52	; 0x34
    1704:	eb000ccd 	bl	4a40 <readEEPROM>
    1708:	e1a04800 	mov	r4, r0, lsl #16
    170c:	e3a00035 	mov	r0, #53	; 0x35
    1710:	eb000cca 	bl	4a40 <readEEPROM>
    1714:	e1a04824 	mov	r4, r4, lsr #16
    1718:	e1a00800 	mov	r0, r0, lsl #16
    171c:	e1a04804 	mov	r4, r4, lsl #16
    1720:	e1a00840 	mov	r0, r0, asr #16
    1724:	e0800444 	add	r0, r0, r4, asr #8
    1728:	e0803200 	add	r3, r0, r0, lsl #4
    172c:	e0633283 	rsb	r3, r3, r3, lsl #5
    1730:	e0803103 	add	r3, r0, r3, lsl #2
    1734:	e0800183 	add	r0, r0, r3, lsl #3
    1738:	e1550700 	cmp	r5, r0, lsl #14
    173c:	9affffd7 	bls	16a0 <.text+0x16a0>
    1740:	e59f0880 	ldr	r0, [pc, #2176]	; 1fc8 <.text+0x1fc8>
    1744:	eb001116 	bl	5ba4 <debugWritecrlf>
    1748:	e3a03003 	mov	r3, #3	; 0x3
    174c:	e58d3004 	str	r3, [sp, #4]
    1750:	eaffffd2 	b	16a0 <.text+0x16a0>
    1754:	e3a00001 	mov	r0, #1	; 0x1
    1758:	ebfffd5b 	bl	ccc <ctrElementA>
    175c:	e3a00001 	mov	r0, #1	; 0x1
    1760:	ebfffd3a 	bl	c50 <ctrElementB>
    1764:	e3a03842 	mov	r3, #4325376	; 0x420000
    1768:	e59fc944 	ldr	ip, [pc, #2372]	; 20b4 <.text+0x20b4>
    176c:	e2833dad 	add	r3, r3, #11072	; 0x2b40
    1770:	e2833001 	add	r3, r3, #1	; 0x1
    1774:	e3a0002d 	mov	r0, #45	; 0x2d
    1778:	e5dc4000 	ldrb	r4, [ip]
    177c:	e58d3094 	str	r3, [sp, #148]
    1780:	eb000cae 	bl	4a40 <readEEPROM>
    1784:	e1a00800 	mov	r0, r0, lsl #16
    1788:	e1540840 	cmp	r4, r0, asr #16
    178c:	daffffc3 	ble	16a0 <.text+0x16a0>
    1790:	e59f0818 	ldr	r0, [pc, #2072]	; 1fb0 <.text+0x1fb0>
    1794:	eb001102 	bl	5ba4 <debugWritecrlf>
    1798:	e3a00001 	mov	r0, #1	; 0x1
    179c:	e58d0004 	str	r0, [sp, #4]
    17a0:	eaffffbe 	b	16a0 <.text+0x16a0>
    17a4:	e3a02007 	mov	r2, #7	; 0x7
    17a8:	e59f181c 	ldr	r1, [pc, #2076]	; 1fcc <.text+0x1fcc>
    17ac:	e59f0904 	ldr	r0, [pc, #2308]	; 20b8 <.text+0x20b8>
    17b0:	eb001101 	bl	5bbc <memcpy>
    17b4:	e28d1088 	add	r1, sp, #136	; 0x88
    17b8:	e59f08f8 	ldr	r0, [pc, #2296]	; 20b8 <.text+0x20b8>
    17bc:	eb00110d 	bl	5bf8 <strcat>
    17c0:	ebfffcfc 	bl	bb8 <BtnUp>
    17c4:	e3500000 	cmp	r0, #0	; 0x0
    17c8:	0a000006 	beq	17e8 <.text+0x17e8>
    17cc:	e59dc030 	ldr	ip, [sp, #48]
    17d0:	e28c3001 	add	r3, ip, #1	; 0x1
    17d4:	e1a03803 	mov	r3, r3, lsl #16
    17d8:	e3530802 	cmp	r3, #131072	; 0x20000
    17dc:	d1a03823 	movle	r3, r3, lsr #16
    17e0:	c3a03000 	movgt	r3, #0	; 0x0
    17e4:	e58d3030 	str	r3, [sp, #48]
    17e8:	ebfffcdf 	bl	b6c <BtnDown>
    17ec:	e3500000 	cmp	r0, #0	; 0x0
    17f0:	059d2030 	ldreq	r2, [sp, #48]
    17f4:	01a04802 	moveq	r4, r2, lsl #16
    17f8:	0a000008 	beq	1820 <.text+0x1820>
    17fc:	e59d0030 	ldr	r0, [sp, #48]
    1800:	e2403001 	sub	r3, r0, #1	; 0x1
    1804:	e1a03803 	mov	r3, r3, lsl #16
    1808:	e1a03823 	mov	r3, r3, lsr #16
    180c:	e1b04803 	movs	r4, r3, lsl #16
    1810:	43a01002 	movmi	r1, #2	; 0x2
    1814:	e58d3030 	str	r3, [sp, #48]
    1818:	458d1030 	strmi	r1, [sp, #48]
    181c:	43a04802 	movmi	r4, #131072	; 0x20000
    1820:	ebfffcf7 	bl	c04 <BtnForward>
    1824:	e1a04844 	mov	r4, r4, asr #16
    1828:	e59d3008 	ldr	r3, [sp, #8]
    182c:	e3500000 	cmp	r0, #0	; 0x0
    1830:	13a03002 	movne	r3, #2	; 0x2
    1834:	e3540001 	cmp	r4, #1	; 0x1
    1838:	e58d3008 	str	r3, [sp, #8]
    183c:	0a00067b 	beq	3230 <.text+0x3230>
    1840:	e3540002 	cmp	r4, #2	; 0x2
    1844:	0a0006ee 	beq	3404 <.text+0x3404>
    1848:	e3540000 	cmp	r4, #0	; 0x0
    184c:	1a0000c1 	bne	1b58 <.text+0x1b58>
    1850:	e59f1778 	ldr	r1, [pc, #1912]	; 1fd0 <.text+0x1fd0>
    1854:	e3a0200b 	mov	r2, #11	; 0xb
    1858:	e59f085c 	ldr	r0, [pc, #2140]	; 20bc <.text+0x20bc>
    185c:	eb0010d6 	bl	5bbc <memcpy>
    1860:	e59fc848 	ldr	ip, [pc, #2120]	; 20b0 <.text+0x20b0>
    1864:	e3a0200a 	mov	r2, #10	; 0xa
    1868:	e3a03020 	mov	r3, #32	; 0x20
    186c:	e28d1038 	add	r1, sp, #56	; 0x38
    1870:	e5dc0000 	ldrb	r0, [ip]
    1874:	eb000ace 	bl	43b4 <__itoa>
    1878:	e1a01000 	mov	r1, r0
    187c:	e59f0838 	ldr	r0, [pc, #2104]	; 20bc <.text+0x20bc>
    1880:	eb0010dc 	bl	5bf8 <strcat>
    1884:	e59f0830 	ldr	r0, [pc, #2096]	; 20bc <.text+0x20bc>
    1888:	eb0010eb 	bl	5c3c <strlen>
    188c:	e59f1828 	ldr	r1, [pc, #2088]	; 20bc <.text+0x20bc>
    1890:	e3a02002 	mov	r2, #2	; 0x2
    1894:	e0800001 	add	r0, r0, r1
    1898:	e59f1734 	ldr	r1, [pc, #1844]	; 1fd4 <.text+0x1fd4>
    189c:	eb0010c6 	bl	5bbc <memcpy>
    18a0:	e59f0810 	ldr	r0, [pc, #2064]	; 20b8 <.text+0x20b8>
    18a4:	eb000ca3 	bl	4b38 <padBuf>
    18a8:	e59f080c 	ldr	r0, [pc, #2060]	; 20bc <.text+0x20bc>
    18ac:	eb000ca1 	bl	4b38 <padBuf>
    18b0:	e59d0008 	ldr	r0, [sp, #8]
    18b4:	e3500007 	cmp	r0, #7	; 0x7
    18b8:	1afffe63 	bne	124c <main+0x314>
    18bc:	e59d100c 	ldr	r1, [sp, #12]
    18c0:	e351000a 	cmp	r1, #10	; 0xa
    18c4:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    18c8:	ea000277 	b	22ac <.text+0x22ac>
    18cc:	000022b8 	streqh	r2, [r0], -r8
    18d0:	000023d8 	ldreqd	r2, [r0], -r8
    18d4:	00002500 	andeq	r2, r0, r0, lsl #10
    18d8:	00002628 	andeq	r2, r0, r8, lsr #12
    18dc:	00002750 	andeq	r2, r0, r0, asr r7
    18e0:	00002878 	andeq	r2, r0, r8, ror r8
    18e4:	000029a0 	andeq	r2, r0, r0, lsr #19
    18e8:	00002abc 	streqh	r2, [r0], -ip
    18ec:	00002bbc 	streqh	r2, [r0], -ip
    18f0:	00002c94 	muleq	r0, r4, ip
    18f4:	00002d6c 	andeq	r2, r0, ip, ror #26
    18f8:	e59f16d8 	ldr	r1, [pc, #1752]	; 1fd8 <.text+0x1fd8>
    18fc:	e3a02010 	mov	r2, #16	; 0x10
    1900:	e59f07b0 	ldr	r0, [pc, #1968]	; 20b8 <.text+0x20b8>
    1904:	eb0010ac 	bl	5bbc <memcpy>
    1908:	e59f16cc 	ldr	r1, [pc, #1740]	; 1fdc <.text+0x1fdc>
    190c:	e3a0200e 	mov	r2, #14	; 0xe
    1910:	e59f07a4 	ldr	r0, [pc, #1956]	; 20bc <.text+0x20bc>
    1914:	eb0010a8 	bl	5bbc <memcpy>
    1918:	ebfffc80 	bl	b20 <BtnEnter>
    191c:	e3500000 	cmp	r0, #0	; 0x0
    1920:	1a00063b 	bne	3214 <.text+0x3214>
    1924:	ebfffcb6 	bl	c04 <BtnForward>
    1928:	e3500000 	cmp	r0, #0	; 0x0
    192c:	0affffdb 	beq	18a0 <.text+0x18a0>
    1930:	e3a02001 	mov	r2, #1	; 0x1
    1934:	e58d2008 	str	r2, [sp, #8]
    1938:	e59f0778 	ldr	r0, [pc, #1912]	; 20b8 <.text+0x20b8>
    193c:	eb000c7d 	bl	4b38 <padBuf>
    1940:	e59f0774 	ldr	r0, [pc, #1908]	; 20bc <.text+0x20bc>
    1944:	eb000c7b 	bl	4b38 <padBuf>
    1948:	eafffe3f 	b	124c <main+0x314>
    194c:	e59f168c 	ldr	r1, [pc, #1676]	; 1fe0 <.text+0x1fe0>
    1950:	e3a0200c 	mov	r2, #12	; 0xc
    1954:	e59f075c 	ldr	r0, [pc, #1884]	; 20b8 <.text+0x20b8>
    1958:	eb001097 	bl	5bbc <memcpy>
    195c:	e59f1680 	ldr	r1, [pc, #1664]	; 1fe4 <.text+0x1fe4>
    1960:	e3a02006 	mov	r2, #6	; 0x6
    1964:	e59f0750 	ldr	r0, [pc, #1872]	; 20bc <.text+0x20bc>
    1968:	eb001093 	bl	5bbc <memcpy>
    196c:	eafffff1 	b	1938 <.text+0x1938>
    1970:	ebfffca3 	bl	c04 <BtnForward>
    1974:	e3500000 	cmp	r0, #0	; 0x0
    1978:	1affffec 	bne	1930 <.text+0x1930>
    197c:	eaffffed 	b	1938 <.text+0x1938>
    1980:	ebfffc9f 	bl	c04 <BtnForward>
    1984:	e59d2008 	ldr	r2, [sp, #8]
    1988:	e3500000 	cmp	r0, #0	; 0x0
    198c:	13a02006 	movne	r2, #6	; 0x6
    1990:	e59f1650 	ldr	r1, [pc, #1616]	; 1fe8 <.text+0x1fe8>
    1994:	e58d2008 	str	r2, [sp, #8]
    1998:	e59f0718 	ldr	r0, [pc, #1816]	; 20b8 <.text+0x20b8>
    199c:	e3a0200d 	mov	r2, #13	; 0xd
    19a0:	eb001085 	bl	5bbc <memcpy>
    19a4:	ebfffb30 	bl	66c <getFireDetectorLevel>
    19a8:	e3a03020 	mov	r3, #32	; 0x20
    19ac:	e3a0200a 	mov	r2, #10	; 0xa
    19b0:	e28d1038 	add	r1, sp, #56	; 0x38
    19b4:	eb000a7e 	bl	43b4 <__itoa>
    19b8:	e1a01000 	mov	r1, r0
    19bc:	e59f06f4 	ldr	r0, [pc, #1780]	; 20b8 <.text+0x20b8>
    19c0:	eb00108c 	bl	5bf8 <strcat>
    19c4:	e3a0200d 	mov	r2, #13	; 0xd
    19c8:	e59f161c 	ldr	r1, [pc, #1564]	; 1fec <.text+0x1fec>
    19cc:	e59f06e8 	ldr	r0, [pc, #1768]	; 20bc <.text+0x20bc>
    19d0:	eb001079 	bl	5bbc <memcpy>
    19d4:	ebfffb0b 	bl	608 <getFireReferenceLevel>
    19d8:	e3a0200a 	mov	r2, #10	; 0xa
    19dc:	e3a03020 	mov	r3, #32	; 0x20
    19e0:	e28d1038 	add	r1, sp, #56	; 0x38
    19e4:	eb000a72 	bl	43b4 <__itoa>
    19e8:	e1a01000 	mov	r1, r0
    19ec:	e59f06c8 	ldr	r0, [pc, #1736]	; 20bc <.text+0x20bc>
    19f0:	eb001080 	bl	5bf8 <strcat>
    19f4:	e59f06bc 	ldr	r0, [pc, #1724]	; 20b8 <.text+0x20b8>
    19f8:	eb000c4e 	bl	4b38 <padBuf>
    19fc:	e59f06b8 	ldr	r0, [pc, #1720]	; 20bc <.text+0x20bc>
    1a00:	eb000c4c 	bl	4b38 <padBuf>
    1a04:	e59d0008 	ldr	r0, [sp, #8]
    1a08:	e3500007 	cmp	r0, #7	; 0x7
    1a0c:	1afffe0e 	bne	124c <main+0x314>
    1a10:	eaffffa9 	b	18bc <.text+0x18bc>
    1a14:	ebfffc7a 	bl	c04 <BtnForward>
    1a18:	e59d2008 	ldr	r2, [sp, #8]
    1a1c:	e3500000 	cmp	r0, #0	; 0x0
    1a20:	13a02004 	movne	r2, #4	; 0x4
    1a24:	e58d2008 	str	r2, [sp, #8]
    1a28:	e59f15a0 	ldr	r1, [pc, #1440]	; 1fd0 <.text+0x1fd0>
    1a2c:	e3a0200b 	mov	r2, #11	; 0xb
    1a30:	e59f0680 	ldr	r0, [pc, #1664]	; 20b8 <.text+0x20b8>
    1a34:	eb001060 	bl	5bbc <memcpy>
    1a38:	e59fc674 	ldr	ip, [pc, #1652]	; 20b4 <.text+0x20b4>
    1a3c:	e3a03020 	mov	r3, #32	; 0x20
    1a40:	e5dc0000 	ldrb	r0, [ip]
    1a44:	e3a0200a 	mov	r2, #10	; 0xa
    1a48:	e28d1038 	add	r1, sp, #56	; 0x38
    1a4c:	eb000a58 	bl	43b4 <__itoa>
    1a50:	e1a01000 	mov	r1, r0
    1a54:	e59f065c 	ldr	r0, [pc, #1628]	; 20b8 <.text+0x20b8>
    1a58:	eb001066 	bl	5bf8 <strcat>
    1a5c:	e59f0654 	ldr	r0, [pc, #1620]	; 20b8 <.text+0x20b8>
    1a60:	eb001075 	bl	5c3c <strlen>
    1a64:	e59f164c 	ldr	r1, [pc, #1612]	; 20b8 <.text+0x20b8>
    1a68:	e3a02002 	mov	r2, #2	; 0x2
    1a6c:	e0800001 	add	r0, r0, r1
    1a70:	e59f155c 	ldr	r1, [pc, #1372]	; 1fd4 <.text+0x1fd4>
    1a74:	eb001050 	bl	5bbc <memcpy>
    1a78:	e59f1570 	ldr	r1, [pc, #1392]	; 1ff0 <.text+0x1ff0>
    1a7c:	e3a0200e 	mov	r2, #14	; 0xe
    1a80:	e59f0634 	ldr	r0, [pc, #1588]	; 20bc <.text+0x20bc>
    1a84:	eb00104c 	bl	5bbc <memcpy>
    1a88:	e59fc624 	ldr	ip, [pc, #1572]	; 20b4 <.text+0x20b4>
    1a8c:	e3a0200a 	mov	r2, #10	; 0xa
    1a90:	e3a03020 	mov	r3, #32	; 0x20
    1a94:	e28d1038 	add	r1, sp, #56	; 0x38
    1a98:	e5dc0000 	ldrb	r0, [ip]
    1a9c:	eb000a44 	bl	43b4 <__itoa>
    1aa0:	e1a01000 	mov	r1, r0
    1aa4:	e59f0610 	ldr	r0, [pc, #1552]	; 20bc <.text+0x20bc>
    1aa8:	eb001052 	bl	5bf8 <strcat>
    1aac:	e59f0608 	ldr	r0, [pc, #1544]	; 20bc <.text+0x20bc>
    1ab0:	eb001061 	bl	5c3c <strlen>
    1ab4:	eaffff74 	b	188c <.text+0x188c>
    1ab8:	ebfffc3e 	bl	bb8 <BtnUp>
    1abc:	e3500000 	cmp	r0, #0	; 0x0
    1ac0:	0a000006 	beq	1ae0 <.text+0x1ae0>
    1ac4:	e59d2034 	ldr	r2, [sp, #52]
    1ac8:	e2823001 	add	r3, r2, #1	; 0x1
    1acc:	e1a03803 	mov	r3, r3, lsl #16
    1ad0:	e3530801 	cmp	r3, #65536	; 0x10000
    1ad4:	d1a03823 	movle	r3, r3, lsr #16
    1ad8:	c3a03000 	movgt	r3, #0	; 0x0
    1adc:	e58d3034 	str	r3, [sp, #52]
    1ae0:	ebfffc21 	bl	b6c <BtnDown>
    1ae4:	e3500000 	cmp	r0, #0	; 0x0
    1ae8:	059d1034 	ldreq	r1, [sp, #52]
    1aec:	01a04801 	moveq	r4, r1, lsl #16
    1af0:	0a000008 	beq	1b18 <.text+0x1b18>
    1af4:	e59dc034 	ldr	ip, [sp, #52]
    1af8:	e24c3001 	sub	r3, ip, #1	; 0x1
    1afc:	e1a03803 	mov	r3, r3, lsl #16
    1b00:	e1a03823 	mov	r3, r3, lsr #16
    1b04:	e1b04803 	movs	r4, r3, lsl #16
    1b08:	43a00001 	movmi	r0, #1	; 0x1
    1b0c:	e58d3034 	str	r3, [sp, #52]
    1b10:	458d0034 	strmi	r0, [sp, #52]
    1b14:	43a04801 	movmi	r4, #65536	; 0x10000
    1b18:	ebfffc39 	bl	c04 <BtnForward>
    1b1c:	e59d2008 	ldr	r2, [sp, #8]
    1b20:	e3500000 	cmp	r0, #0	; 0x0
    1b24:	13a02003 	movne	r2, #3	; 0x3
    1b28:	e58d2008 	str	r2, [sp, #8]
    1b2c:	e59f14c0 	ldr	r1, [pc, #1216]	; 1ff4 <.text+0x1ff4>
    1b30:	e3a02009 	mov	r2, #9	; 0x9
    1b34:	e59f057c 	ldr	r0, [pc, #1404]	; 20b8 <.text+0x20b8>
    1b38:	eb00101f 	bl	5bbc <memcpy>
    1b3c:	e59f0574 	ldr	r0, [pc, #1396]	; 20b8 <.text+0x20b8>
    1b40:	e28d1094 	add	r1, sp, #148	; 0x94
    1b44:	eb00102b 	bl	5bf8 <strcat>
    1b48:	e1b03844 	movs	r3, r4, asr #16
    1b4c:	0a000580 	beq	3154 <.text+0x3154>
    1b50:	e3530001 	cmp	r3, #1	; 0x1
    1b54:	0a000646 	beq	3474 <.text+0x3474>
    1b58:	e3a0c000 	mov	ip, #0	; 0x0
    1b5c:	e59f0554 	ldr	r0, [pc, #1364]	; 20b8 <.text+0x20b8>
    1b60:	e58dc030 	str	ip, [sp, #48]
    1b64:	eb000bf3 	bl	4b38 <padBuf>
    1b68:	e59f054c 	ldr	r0, [pc, #1356]	; 20bc <.text+0x20bc>
    1b6c:	eb000bf1 	bl	4b38 <padBuf>
    1b70:	e59d0008 	ldr	r0, [sp, #8]
    1b74:	e3500007 	cmp	r0, #7	; 0x7
    1b78:	1afffdb3 	bne	124c <main+0x314>
    1b7c:	eaffff4e 	b	18bc <.text+0x18bc>
    1b80:	ebfffc1f 	bl	c04 <BtnForward>
    1b84:	e59d2008 	ldr	r2, [sp, #8]
    1b88:	e3500000 	cmp	r0, #0	; 0x0
    1b8c:	13a02005 	movne	r2, #5	; 0x5
    1b90:	e58d2008 	str	r2, [sp, #8]
    1b94:	e59f145c 	ldr	r1, [pc, #1116]	; 1ff8 <.text+0x1ff8>
    1b98:	e3a0200c 	mov	r2, #12	; 0xc
    1b9c:	e59f0514 	ldr	r0, [pc, #1300]	; 20b8 <.text+0x20b8>
    1ba0:	eb001005 	bl	5bbc <memcpy>
    1ba4:	e59fc508 	ldr	ip, [pc, #1288]	; 20b4 <.text+0x20b4>
    1ba8:	e3a03020 	mov	r3, #32	; 0x20
    1bac:	e5dc0000 	ldrb	r0, [ip]
    1bb0:	e3a0200a 	mov	r2, #10	; 0xa
    1bb4:	e28d1038 	add	r1, sp, #56	; 0x38
    1bb8:	eb0009fd 	bl	43b4 <__itoa>
    1bbc:	e1a01000 	mov	r1, r0
    1bc0:	e59f04f0 	ldr	r0, [pc, #1264]	; 20b8 <.text+0x20b8>
    1bc4:	eb00100b 	bl	5bf8 <strcat>
    1bc8:	e59f04e8 	ldr	r0, [pc, #1256]	; 20b8 <.text+0x20b8>
    1bcc:	eb00101a 	bl	5c3c <strlen>
    1bd0:	e59f14e0 	ldr	r1, [pc, #1248]	; 20b8 <.text+0x20b8>
    1bd4:	e3a02002 	mov	r2, #2	; 0x2
    1bd8:	e0800001 	add	r0, r0, r1
    1bdc:	e59f13f0 	ldr	r1, [pc, #1008]	; 1fd4 <.text+0x1fd4>
    1be0:	eb000ff5 	bl	5bbc <memcpy>
    1be4:	e59f1410 	ldr	r1, [pc, #1040]	; 1ffc <.text+0x1ffc>
    1be8:	e3a0200d 	mov	r2, #13	; 0xd
    1bec:	e59f04c8 	ldr	r0, [pc, #1224]	; 20bc <.text+0x20bc>
    1bf0:	eb000ff1 	bl	5bbc <memcpy>
    1bf4:	e59fc4b8 	ldr	ip, [pc, #1208]	; 20b4 <.text+0x20b4>
    1bf8:	e3a0200a 	mov	r2, #10	; 0xa
    1bfc:	e3a03020 	mov	r3, #32	; 0x20
    1c00:	e28d1038 	add	r1, sp, #56	; 0x38
    1c04:	e5dc0000 	ldrb	r0, [ip]
    1c08:	eb0009e9 	bl	43b4 <__itoa>
    1c0c:	e1a01000 	mov	r1, r0
    1c10:	e59f04a4 	ldr	r0, [pc, #1188]	; 20bc <.text+0x20bc>
    1c14:	eb000ff7 	bl	5bf8 <strcat>
    1c18:	e59f049c 	ldr	r0, [pc, #1180]	; 20bc <.text+0x20bc>
    1c1c:	eb001006 	bl	5c3c <strlen>
    1c20:	eaffff19 	b	188c <.text+0x188c>
    1c24:	e3a00001 	mov	r0, #1	; 0x1
    1c28:	ebfffc46 	bl	d48 <ctrFurnaceHeater>
    1c2c:	e3a00001 	mov	r0, #1	; 0x1
    1c30:	ebfffca1 	bl	ebc <ctrFan>
    1c34:	e3a00000 	mov	r0, #0	; 0x0
    1c38:	ebfffc80 	bl	e40 <ctrTransportMotorA>
    1c3c:	e3a00000 	mov	r0, #0	; 0x0
    1c40:	ebfffc5f 	bl	dc4 <ctrTransportMotorB>
    1c44:	e59f13b4 	ldr	r1, [pc, #948]	; 2000 <.text+0x2000>
    1c48:	e3a0200b 	mov	r2, #11	; 0xb
    1c4c:	e28d0088 	add	r0, sp, #136	; 0x88
    1c50:	eb000fd9 	bl	5bbc <memcpy>
    1c54:	e59f3454 	ldr	r3, [pc, #1108]	; 20b0 <.text+0x20b0>
    1c58:	e3a0002c 	mov	r0, #44	; 0x2c
    1c5c:	e5d34000 	ldrb	r4, [r3]
    1c60:	eb000b76 	bl	4a40 <readEEPROM>
    1c64:	e1a00800 	mov	r0, r0, lsl #16
    1c68:	e1540840 	cmp	r4, r0, asr #16
    1c6c:	aa0005db 	bge	33e0 <.text+0x33e0>
    1c70:	ebfffa7d 	bl	66c <getFireDetectorLevel>
    1c74:	e1a04000 	mov	r4, r0
    1c78:	ebfffa62 	bl	608 <getFireReferenceLevel>
    1c7c:	e1540000 	cmp	r4, r0
    1c80:	3a0005ad 	bcc	333c <.text+0x333c>
    1c84:	e59d001c 	ldr	r0, [sp, #28]
    1c88:	eb000678 	bl	3670 <getElapsedSysTICs>
    1c8c:	e1a04000 	mov	r4, r0
    1c90:	e3a0003f 	mov	r0, #63	; 0x3f
    1c94:	eb000b69 	bl	4a40 <readEEPROM>
    1c98:	e1a00800 	mov	r0, r0, lsl #16
    1c9c:	e1a00840 	mov	r0, r0, asr #16
    1ca0:	e0603280 	rsb	r3, r0, r0, lsl #5
    1ca4:	e0633303 	rsb	r3, r3, r3, lsl #6
    1ca8:	e0800183 	add	r0, r0, r3, lsl #3
    1cac:	e0800100 	add	r0, r0, r0, lsl #2
    1cb0:	e0600200 	rsb	r0, r0, r0, lsl #4
    1cb4:	e1540480 	cmp	r4, r0, lsl #9
    1cb8:	8a00058a 	bhi	32e8 <.text+0x32e8>
    1cbc:	e3a00022 	mov	r0, #34	; 0x22
    1cc0:	eb000b5e 	bl	4a40 <readEEPROM>
    1cc4:	e3100080 	tst	r0, #128	; 0x80
    1cc8:	1afffe39 	bne	15b4 <.text+0x15b4>
    1ccc:	eb000659 	bl	3638 <getSysTICs>
    1cd0:	e58d0018 	str	r0, [sp, #24]
    1cd4:	e59f0328 	ldr	r0, [pc, #808]	; 2004 <.text+0x2004>
    1cd8:	eb000fb1 	bl	5ba4 <debugWritecrlf>
    1cdc:	e59f0354 	ldr	r0, [pc, #852]	; 2038 <.text+0x2038>
    1ce0:	eb000faf 	bl	5ba4 <debugWritecrlf>
    1ce4:	e3a0c007 	mov	ip, #7	; 0x7
    1ce8:	e58dc000 	str	ip, [sp]
    1cec:	eafffe30 	b	15b4 <.text+0x15b4>
    1cf0:	e3a00000 	mov	r0, #0	; 0x0
    1cf4:	ebfffc13 	bl	d48 <ctrFurnaceHeater>
    1cf8:	e3a00001 	mov	r0, #1	; 0x1
    1cfc:	ebfffc6e 	bl	ebc <ctrFan>
    1d00:	e3a00000 	mov	r0, #0	; 0x0
    1d04:	ebfffc4d 	bl	e40 <ctrTransportMotorA>
    1d08:	e3a00001 	mov	r0, #1	; 0x1
    1d0c:	ebfffc2c 	bl	dc4 <ctrTransportMotorB>
    1d10:	e59f12f0 	ldr	r1, [pc, #752]	; 2008 <.text+0x2008>
    1d14:	e3a0200b 	mov	r2, #11	; 0xb
    1d18:	e28d0088 	add	r0, sp, #136	; 0x88
    1d1c:	eb000fa6 	bl	5bbc <memcpy>
    1d20:	e59d0018 	ldr	r0, [sp, #24]
    1d24:	eb000651 	bl	3670 <getElapsedSysTICs>
    1d28:	e3a03642 	mov	r3, #69206016	; 0x4200000
    1d2c:	e2833ac1 	add	r3, r3, #790528	; 0xc1000
    1d30:	e2833d36 	add	r3, r3, #3456	; 0xd80
    1d34:	e1500003 	cmp	r0, r3
    1d38:	9afffe1d 	bls	15b4 <.text+0x15b4>
    1d3c:	eb00063d 	bl	3638 <getSysTICs>
    1d40:	e58d0020 	str	r0, [sp, #32]
    1d44:	e59f02c0 	ldr	r0, [pc, #704]	; 200c <.text+0x200c>
    1d48:	eb000f95 	bl	5ba4 <debugWritecrlf>
    1d4c:	e3a00008 	mov	r0, #8	; 0x8
    1d50:	e58d0000 	str	r0, [sp]
    1d54:	eafffe16 	b	15b4 <.text+0x15b4>
    1d58:	e3a00000 	mov	r0, #0	; 0x0
    1d5c:	ebfffbf9 	bl	d48 <ctrFurnaceHeater>
    1d60:	e3a00001 	mov	r0, #1	; 0x1
    1d64:	ebfffc54 	bl	ebc <ctrFan>
    1d68:	e3a00000 	mov	r0, #0	; 0x0
    1d6c:	ebfffc33 	bl	e40 <ctrTransportMotorA>
    1d70:	e3a00000 	mov	r0, #0	; 0x0
    1d74:	ebfffc12 	bl	dc4 <ctrTransportMotorB>
    1d78:	e3a0200b 	mov	r2, #11	; 0xb
    1d7c:	e59f128c 	ldr	r1, [pc, #652]	; 2010 <.text+0x2010>
    1d80:	e28d0088 	add	r0, sp, #136	; 0x88
    1d84:	eb000f8c 	bl	5bbc <memcpy>
    1d88:	e59f1320 	ldr	r1, [pc, #800]	; 20b0 <.text+0x20b0>
    1d8c:	e3a0002c 	mov	r0, #44	; 0x2c
    1d90:	e5d15000 	ldrb	r5, [r1]
    1d94:	eb000b29 	bl	4a40 <readEEPROM>
    1d98:	e1a04800 	mov	r4, r0, lsl #16
    1d9c:	e3a0003b 	mov	r0, #59	; 0x3b
    1da0:	eb000b26 	bl	4a40 <readEEPROM>
    1da4:	e1a04824 	mov	r4, r4, lsr #16
    1da8:	e1a00800 	mov	r0, r0, lsl #16
    1dac:	e1a04804 	mov	r4, r4, lsl #16
    1db0:	e1a00840 	mov	r0, r0, asr #16
    1db4:	e0600844 	rsb	r0, r0, r4, asr #16
    1db8:	e1550000 	cmp	r5, r0
    1dbc:	ba00056a 	blt	336c <.text+0x336c>
    1dc0:	e59d0020 	ldr	r0, [sp, #32]
    1dc4:	eb000629 	bl	3670 <getElapsedSysTICs>
    1dc8:	e1a04000 	mov	r4, r0
    1dcc:	e3a00036 	mov	r0, #54	; 0x36
    1dd0:	eb000b1a 	bl	4a40 <readEEPROM>
    1dd4:	e1a00800 	mov	r0, r0, lsl #16
    1dd8:	e1a00840 	mov	r0, r0, asr #16
    1ddc:	e0603280 	rsb	r3, r0, r0, lsl #5
    1de0:	e0633303 	rsb	r3, r3, r3, lsl #6
    1de4:	e0800183 	add	r0, r0, r3, lsl #3
    1de8:	e0800100 	add	r0, r0, r0, lsl #2
    1dec:	e0600200 	rsb	r0, r0, r0, lsl #4
    1df0:	e1540480 	cmp	r4, r0, lsl #9
    1df4:	9afffdee 	bls	15b4 <.text+0x15b4>
    1df8:	eb00060e 	bl	3638 <getSysTICs>
    1dfc:	e58d0018 	str	r0, [sp, #24]
    1e00:	e59f020c 	ldr	r0, [pc, #524]	; 2014 <.text+0x2014>
    1e04:	eb000f66 	bl	5ba4 <debugWritecrlf>
    1e08:	e3a03002 	mov	r3, #2	; 0x2
    1e0c:	e58d3000 	str	r3, [sp]
    1e10:	eafffde7 	b	15b4 <.text+0x15b4>
    1e14:	ebfffa14 	bl	66c <getFireDetectorLevel>
    1e18:	e1a04000 	mov	r4, r0
    1e1c:	ebfff9f9 	bl	608 <getFireReferenceLevel>
    1e20:	e1540000 	cmp	r4, r0
    1e24:	2a0004da 	bcs	3194 <.text+0x3194>
    1e28:	e59d0028 	ldr	r0, [sp, #40]
    1e2c:	eb00060f 	bl	3670 <getElapsedSysTICs>
    1e30:	e3a037be 	mov	r3, #49807360	; 0x2f80000
    1e34:	e2833a2f 	add	r3, r3, #192512	; 0x2f000
    1e38:	e2833080 	add	r3, r3, #128	; 0x80
    1e3c:	e1500003 	cmp	r0, r3
    1e40:	9afffddb 	bls	15b4 <.text+0x15b4>
    1e44:	e59f01cc 	ldr	r0, [pc, #460]	; 2018 <.text+0x2018>
    1e48:	eb000f55 	bl	5ba4 <debugWritecrlf>
    1e4c:	e3a01009 	mov	r1, #9	; 0x9
    1e50:	e58d1000 	str	r1, [sp]
    1e54:	eafffdd6 	b	15b4 <.text+0x15b4>
    1e58:	e3a00000 	mov	r0, #0	; 0x0
    1e5c:	ebfffc16 	bl	ebc <ctrFan>
    1e60:	e3a00000 	mov	r0, #0	; 0x0
    1e64:	ebfffbb7 	bl	d48 <ctrFurnaceHeater>
    1e68:	e3a00000 	mov	r0, #0	; 0x0
    1e6c:	ebfffbf3 	bl	e40 <ctrTransportMotorA>
    1e70:	e3a00000 	mov	r0, #0	; 0x0
    1e74:	ebfffbd2 	bl	dc4 <ctrTransportMotorB>
    1e78:	e3a0200b 	mov	r2, #11	; 0xb
    1e7c:	e28d0088 	add	r0, sp, #136	; 0x88
    1e80:	e59f1194 	ldr	r1, [pc, #404]	; 201c <.text+0x201c>
    1e84:	eb000f4c 	bl	5bbc <memcpy>
    1e88:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    1e8c:	e282290a 	add	r2, r2, #163840	; 0x28000
    1e90:	e5923010 	ldr	r3, [r2, #16]
    1e94:	e3130602 	tst	r3, #2097152	; 0x200000
    1e98:	0a00052e 	beq	3358 <.text+0x3358>
    1e9c:	e3a00022 	mov	r0, #34	; 0x22
    1ea0:	eb000ae6 	bl	4a40 <readEEPROM>
    1ea4:	e3100080 	tst	r0, #128	; 0x80
    1ea8:	0afffdc1 	beq	15b4 <.text+0x15b4>
    1eac:	e59f016c 	ldr	r0, [pc, #364]	; 2020 <.text+0x2020>
    1eb0:	eb000f3b 	bl	5ba4 <debugWritecrlf>
    1eb4:	e3a00003 	mov	r0, #3	; 0x3
    1eb8:	e58d0000 	str	r0, [sp]
    1ebc:	eafffdbc 	b	15b4 <.text+0x15b4>
    1ec0:	e3a00000 	mov	r0, #0	; 0x0
    1ec4:	ebfffbfc 	bl	ebc <ctrFan>
    1ec8:	e3a00000 	mov	r0, #0	; 0x0
    1ecc:	ebfffb9d 	bl	d48 <ctrFurnaceHeater>
    1ed0:	e3a00000 	mov	r0, #0	; 0x0
    1ed4:	ebfffbd9 	bl	e40 <ctrTransportMotorA>
    1ed8:	e3a00000 	mov	r0, #0	; 0x0
    1edc:	ebfffbb8 	bl	dc4 <ctrTransportMotorB>
    1ee0:	e59f113c 	ldr	r1, [pc, #316]	; 2024 <.text+0x2024>
    1ee4:	e3a0200b 	mov	r2, #11	; 0xb
    1ee8:	e28d0088 	add	r0, sp, #136	; 0x88
    1eec:	eb000f32 	bl	5bbc <memcpy>
    1ef0:	e3a00022 	mov	r0, #34	; 0x22
    1ef4:	eb000ad1 	bl	4a40 <readEEPROM>
    1ef8:	e3100080 	tst	r0, #128	; 0x80
    1efc:	0afffdac 	beq	15b4 <.text+0x15b4>
    1f00:	e59f0118 	ldr	r0, [pc, #280]	; 2020 <.text+0x2020>
    1f04:	eb000f26 	bl	5ba4 <debugWritecrlf>
    1f08:	e3a01003 	mov	r1, #3	; 0x3
    1f0c:	e58d1000 	str	r1, [sp]
    1f10:	eafffda7 	b	15b4 <.text+0x15b4>
    1f14:	e3a00001 	mov	r0, #1	; 0x1
    1f18:	ebfffb8a 	bl	d48 <ctrFurnaceHeater>
    1f1c:	e3a00001 	mov	r0, #1	; 0x1
    1f20:	ebfffbe5 	bl	ebc <ctrFan>
    1f24:	e3a00000 	mov	r0, #0	; 0x0
    1f28:	ebfffbc4 	bl	e40 <ctrTransportMotorA>
    1f2c:	e3a00000 	mov	r0, #0	; 0x0
    1f30:	ebfffba3 	bl	dc4 <ctrTransportMotorB>
    1f34:	e59f10ec 	ldr	r1, [pc, #236]	; 2028 <.text+0x2028>
    1f38:	e3a0200b 	mov	r2, #11	; 0xb
    1f3c:	e28d0088 	add	r0, sp, #136	; 0x88
    1f40:	eb000f1d 	bl	5bbc <memcpy>
    1f44:	eb0005bb 	bl	3638 <getSysTICs>
    1f48:	e58d001c 	str	r0, [sp, #28]
    1f4c:	e3a00022 	mov	r0, #34	; 0x22
    1f50:	eb000aba 	bl	4a40 <readEEPROM>
    1f54:	e3100080 	tst	r0, #128	; 0x80
    1f58:	1a000492 	bne	31a8 <.text+0x31a8>
    1f5c:	eb0005b5 	bl	3638 <getSysTICs>
    1f60:	e58d0018 	str	r0, [sp, #24]
    1f64:	e59f00cc 	ldr	r0, [pc, #204]	; 2038 <.text+0x2038>
    1f68:	eb000f0d 	bl	5ba4 <debugWritecrlf>
    1f6c:	e3a0c007 	mov	ip, #7	; 0x7
    1f70:	e58dc000 	str	ip, [sp]
    1f74:	eafffd8e 	b	15b4 <.text+0x15b4>
    1f78:	e59f00ac 	ldr	r0, [pc, #172]	; 202c <.text+0x202c>
    1f7c:	eb000f08 	bl	5ba4 <debugWritecrlf>
    1f80:	e3a0c008 	mov	ip, #8	; 0x8
    1f84:	e58dc000 	str	ip, [sp]
    1f88:	eafffd89 	b	15b4 <.text+0x15b4>
    1f8c:	000000d4 	ldreqd	r0, [r0], -r4
    1f90:	00008874 	andeq	r8, r0, r4, ror r8
    1f94:	00008880 	andeq	r8, r0, r0, lsl #17
    1f98:	00008884 	andeq	r8, r0, r4, lsl #17
    1f9c:	00008888 	andeq	r8, r0, r8, lsl #17
    1fa0:	0000888c 	andeq	r8, r0, ip, lsl #17
    1fa4:	00008890 	muleq	r0, r0, r8
    1fa8:	000088a0 	andeq	r8, r0, r0, lsr #17
    1fac:	000088c8 	andeq	r8, r0, r8, asr #17
    1fb0:	000088ec 	andeq	r8, r0, ip, ror #17
    1fb4:	4000074c 	andmi	r0, r0, ip, asr #14
    1fb8:	40000752 	andmi	r0, r0, r2, asr r7
    1fbc:	00008a1c 	andeq	r8, r0, ip, lsl sl
    1fc0:	00008d34 	andeq	r8, r0, r4, lsr sp
    1fc4:	00008d64 	andeq	r8, r0, r4, ror #26
    1fc8:	00008d84 	andeq	r8, r0, r4, lsl #27
    1fcc:	00008dc0 	andeq	r8, r0, r0, asr #27
    1fd0:	00008dc8 	andeq	r8, r0, r8, asr #27
    1fd4:	00008dd4 	ldreqd	r8, [r0], -r4
    1fd8:	00008e3c 	andeq	r8, r0, ip, lsr lr
    1fdc:	00008e4c 	andeq	r8, r0, ip, asr #28
    1fe0:	00008dac 	andeq	r8, r0, ip, lsr #27
    1fe4:	00008db8 	streqh	r8, [r0], -r8
    1fe8:	00008e1c 	andeq	r8, r0, ip, lsl lr
    1fec:	00008e2c 	andeq	r8, r0, ip, lsr #28
    1ff0:	00008dd8 	ldreqd	r8, [r0], -r8
    1ff4:	00008df4 	streqd	r8, [r0], -r4
    1ff8:	00008e00 	andeq	r8, r0, r0, lsl #28
    1ffc:	00008e0c 	andeq	r8, r0, ip, lsl #28
    2000:	00008b84 	andeq	r8, r0, r4, lsl #23
    2004:	00008c24 	andeq	r8, r0, r4, lsr #24
    2008:	00008c38 	andeq	r8, r0, r8, lsr ip
    200c:	00008c44 	andeq	r8, r0, r4, asr #24
    2010:	00008c78 	andeq	r8, r0, r8, ror ip
    2014:	00008cb8 	streqh	r8, [r0], -r8
    2018:	00008b08 	andeq	r8, r0, r8, lsl #22
    201c:	00008948 	andeq	r8, r0, r8, asr #18
    2020:	00008988 	andeq	r8, r0, r8, lsl #19
    2024:	00008960 	andeq	r8, r0, r0, ror #18
    2028:	00008d28 	andeq	r8, r0, r8, lsr #26
    202c:	00008c54 	andeq	r8, r0, r4, asr ip
    2030:	4000042b 	andmi	r0, r0, fp, lsr #8
    2034:	00008cf0 	streqd	r8, [r0], -r0
    2038:	00008ba8 	andeq	r8, r0, r8, lsr #23
    203c:	0000896c 	andeq	r8, r0, ip, ror #18
    2040:	00008978 	andeq	r8, r0, r8, ror r9
    2044:	000089ac 	andeq	r8, r0, ip, lsr #19
    2048:	000089ec 	andeq	r8, r0, ip, ror #19
    204c:	00008e5c 	andeq	r8, r0, ip, asr lr
    2050:	00008e78 	andeq	r8, r0, r8, ror lr
    2054:	00008e80 	andeq	r8, r0, r0, lsl #29
    2058:	00008e94 	muleq	r0, r4, lr
    205c:	00008e98 	muleq	r0, r8, lr
    2060:	00008eac 	andeq	r8, r0, ip, lsr #29
    2064:	00008ea8 	andeq	r8, r0, r8, lsr #29
    2068:	00008ebc 	streqh	r8, [r0], -ip
    206c:	00008ecc 	andeq	r8, r0, ip, asr #29
    2070:	00008ec8 	andeq	r8, r0, r8, asr #29
    2074:	00008ee0 	andeq	r8, r0, r0, ror #29
    2078:	00008e6c 	andeq	r8, r0, ip, ror #28
    207c:	00008de4 	andeq	r8, r0, r4, ror #27
    2080:	00008e7c 	andeq	r8, r0, ip, ror lr
    2084:	00008ef0 	streqd	r8, [r0], -r0
    2088:	00008f0c 	andeq	r8, r0, ip, lsl #30
    208c:	00008f18 	andeq	r8, r0, r8, lsl pc
    2090:	00008f00 	andeq	r8, r0, r0, lsl #30
    2094:	00008854 	andeq	r8, r0, r4, asr r8
    2098:	00008f24 	andeq	r8, r0, r4, lsr #30
    209c:	00008f34 	andeq	r8, r0, r4, lsr pc
    20a0:	4000073c 	andmi	r0, r0, ip, lsr r7
    20a4:	4000074e 	andmi	r0, r0, lr, asr #14
    20a8:	40000750 	andmi	r0, r0, r0, asr r7
    20ac:	000088c4 	andeq	r8, r0, r4, asr #17
    20b0:	4000042a 	andmi	r0, r0, sl, lsr #8
    20b4:	40000429 	andmi	r0, r0, r9, lsr #8
    20b8:	400004dc 	ldrmid	r0, [r0], -ip
    20bc:	400004c0 	andmi	r0, r0, r0, asr #9
    20c0:	0000892c 	andeq	r8, r0, ip, lsr #18
    20c4:	40000410 	andmi	r0, r0, r0, lsl r4
    20c8:	e51fc0a0 	ldr	ip, [pc, #-160]	; 2030 <.text+0x2030>
    20cc:	e3a03000 	mov	r3, #0	; 0x0
    20d0:	e1a00003 	mov	r0, r3
    20d4:	e5cc3000 	strb	r3, [ip]
    20d8:	ebfffb1a 	bl	d48 <ctrFurnaceHeater>
    20dc:	e3a00001 	mov	r0, #1	; 0x1
    20e0:	ebfffb75 	bl	ebc <ctrFan>
    20e4:	e3a00001 	mov	r0, #1	; 0x1
    20e8:	ebfffb54 	bl	e40 <ctrTransportMotorA>
    20ec:	e3a00001 	mov	r0, #1	; 0x1
    20f0:	ebfffb33 	bl	dc4 <ctrTransportMotorB>
    20f4:	e51f10c8 	ldr	r1, [pc, #-200]	; 2034 <.text+0x2034>
    20f8:	e3a0200b 	mov	r2, #11	; 0xb
    20fc:	e28d0088 	add	r0, sp, #136	; 0x88
    2100:	eb000ead 	bl	5bbc <memcpy>
    2104:	ebfff958 	bl	66c <getFireDetectorLevel>
    2108:	e1a06000 	mov	r6, r0
    210c:	ebfff93d 	bl	608 <getFireReferenceLevel>
    2110:	e1a05000 	mov	r5, r0
    2114:	e3a0003c 	mov	r0, #60	; 0x3c
    2118:	eb000a48 	bl	4a40 <readEEPROM>
    211c:	e1a04800 	mov	r4, r0, lsl #16
    2120:	e3a0003d 	mov	r0, #61	; 0x3d
    2124:	eb000a45 	bl	4a40 <readEEPROM>
    2128:	e1a04824 	mov	r4, r4, lsr #16
    212c:	e1a00800 	mov	r0, r0, lsl #16
    2130:	e1a04804 	mov	r4, r4, lsl #16
    2134:	e1a00840 	mov	r0, r0, asr #16
    2138:	e0800444 	add	r0, r0, r4, asr #8
    213c:	e0855000 	add	r5, r5, r0
    2140:	e1560005 	cmp	r6, r5
    2144:	8a000457 	bhi	32a8 <.text+0x32a8>
    2148:	e51f10a0 	ldr	r1, [pc, #-160]	; 20b0 <.text+0x20b0>
    214c:	e3a0002c 	mov	r0, #44	; 0x2c
    2150:	e5d14000 	ldrb	r4, [r1]
    2154:	eb000a39 	bl	4a40 <readEEPROM>
    2158:	e1a00800 	mov	r0, r0, lsl #16
    215c:	e1540840 	cmp	r4, r0, asr #16
    2160:	aa000424 	bge	31f8 <.text+0x31f8>
    2164:	e3a00022 	mov	r0, #34	; 0x22
    2168:	eb000a34 	bl	4a40 <readEEPROM>
    216c:	e3100080 	tst	r0, #128	; 0x80
    2170:	1afffd0f 	bne	15b4 <.text+0x15b4>
    2174:	eb00052f 	bl	3638 <getSysTICs>
    2178:	e58d0018 	str	r0, [sp, #24]
    217c:	e51f014c 	ldr	r0, [pc, #-332]	; 2038 <.text+0x2038>
    2180:	eb000e87 	bl	5ba4 <debugWritecrlf>
    2184:	e3a03007 	mov	r3, #7	; 0x7
    2188:	e58d3000 	str	r3, [sp]
    218c:	eafffd08 	b	15b4 <.text+0x15b4>
    2190:	e3a00000 	mov	r0, #0	; 0x0
    2194:	ebfffb48 	bl	ebc <ctrFan>
    2198:	e3a00000 	mov	r0, #0	; 0x0
    219c:	ebfffae9 	bl	d48 <ctrFurnaceHeater>
    21a0:	e3a00000 	mov	r0, #0	; 0x0
    21a4:	ebfffb25 	bl	e40 <ctrTransportMotorA>
    21a8:	e3a00001 	mov	r0, #1	; 0x1
    21ac:	ebfffb04 	bl	dc4 <ctrTransportMotorB>
    21b0:	e51f117c 	ldr	r1, [pc, #-380]	; 203c <.text+0x203c>
    21b4:	e3a0200b 	mov	r2, #11	; 0xb
    21b8:	e28d0088 	add	r0, sp, #136	; 0x88
    21bc:	eb000e7e 	bl	5bbc <memcpy>
    21c0:	e59d0018 	ldr	r0, [sp, #24]
    21c4:	eb000529 	bl	3670 <getElapsedSysTICs>
    21c8:	e1a04000 	mov	r4, r0
    21cc:	e3a00037 	mov	r0, #55	; 0x37
    21d0:	eb000a1a 	bl	4a40 <readEEPROM>
    21d4:	e1a00800 	mov	r0, r0, lsl #16
    21d8:	e1a00840 	mov	r0, r0, asr #16
    21dc:	e0603280 	rsb	r3, r0, r0, lsl #5
    21e0:	e0633303 	rsb	r3, r3, r3, lsl #6
    21e4:	e0800183 	add	r0, r0, r3, lsl #3
    21e8:	e0800100 	add	r0, r0, r0, lsl #2
    21ec:	e1540380 	cmp	r4, r0, lsl #7
    21f0:	9afffcef 	bls	15b4 <.text+0x15b4>
    21f4:	e51f01bc 	ldr	r0, [pc, #-444]	; 2040 <.text+0x2040>
    21f8:	eb000e69 	bl	5ba4 <debugWritecrlf>
    21fc:	e3a02003 	mov	r2, #3	; 0x3
    2200:	e58d2000 	str	r2, [sp]
    2204:	eafffcea 	b	15b4 <.text+0x15b4>
    2208:	e3a00000 	mov	r0, #0	; 0x0
    220c:	ebfffb2a 	bl	ebc <ctrFan>
    2210:	e3a00000 	mov	r0, #0	; 0x0
    2214:	ebfffacb 	bl	d48 <ctrFurnaceHeater>
    2218:	e3a00000 	mov	r0, #0	; 0x0
    221c:	ebfffb07 	bl	e40 <ctrTransportMotorA>
    2220:	e3a00000 	mov	r0, #0	; 0x0
    2224:	ebfffae6 	bl	dc4 <ctrTransportMotorB>
    2228:	e51f11ec 	ldr	r1, [pc, #-492]	; 2044 <.text+0x2044>
    222c:	e3a0200b 	mov	r2, #11	; 0xb
    2230:	e28d0088 	add	r0, sp, #136	; 0x88
    2234:	eb000e60 	bl	5bbc <memcpy>
    2238:	e51f3190 	ldr	r3, [pc, #-400]	; 20b0 <.text+0x20b0>
    223c:	e3a0002c 	mov	r0, #44	; 0x2c
    2240:	e5d35000 	ldrb	r5, [r3]
    2244:	eb0009fd 	bl	4a40 <readEEPROM>
    2248:	e1a04800 	mov	r4, r0, lsl #16
    224c:	e3a0003b 	mov	r0, #59	; 0x3b
    2250:	eb0009fa 	bl	4a40 <readEEPROM>
    2254:	e1a04824 	mov	r4, r4, lsr #16
    2258:	e1a00800 	mov	r0, r0, lsl #16
    225c:	e1a04804 	mov	r4, r4, lsl #16
    2260:	e1a00840 	mov	r0, r0, asr #16
    2264:	e0600844 	rsb	r0, r0, r4, asr #16
    2268:	e1550000 	cmp	r5, r0
    226c:	ba000414 	blt	32c4 <.text+0x32c4>
    2270:	e3a00022 	mov	r0, #34	; 0x22
    2274:	eb0009f1 	bl	4a40 <readEEPROM>
    2278:	e3100080 	tst	r0, #128	; 0x80
    227c:	1afffccc 	bne	15b4 <.text+0x15b4>
    2280:	e3a00022 	mov	r0, #34	; 0x22
    2284:	eb0009ed 	bl	4a40 <readEEPROM>
    2288:	e1a00800 	mov	r0, r0, lsl #16
    228c:	e1a00840 	mov	r0, r0, asr #16
    2290:	eb000827 	bl	4334 <itoa>
    2294:	eb000e42 	bl	5ba4 <debugWritecrlf>
    2298:	e51f0258 	ldr	r0, [pc, #-600]	; 2048 <.text+0x2048>
    229c:	eb000e40 	bl	5ba4 <debugWritecrlf>
    22a0:	e3a00001 	mov	r0, #1	; 0x1
    22a4:	e58d0000 	str	r0, [sp]
    22a8:	eafffcc1 	b	15b4 <.text+0x15b4>
    22ac:	e3a0200a 	mov	r2, #10	; 0xa
    22b0:	e58d200c 	str	r2, [sp, #12]
    22b4:	eafffd9f 	b	1938 <.text+0x1938>
    22b8:	ebfffa51 	bl	c04 <BtnForward>
    22bc:	e3500000 	cmp	r0, #0	; 0x0
    22c0:	0a000004 	beq	22d8 <.text+0x22d8>
    22c4:	e3a00001 	mov	r0, #1	; 0x1
    22c8:	ebfff7ba 	bl	1b8 <getConfigValue>
    22cc:	e3a03001 	mov	r3, #1	; 0x1
    22d0:	e58d300c 	str	r3, [sp, #12]
    22d4:	e1a07000 	mov	r7, r0
    22d8:	ebfffa36 	bl	bb8 <BtnUp>
    22dc:	e3500000 	cmp	r0, #0	; 0x0
    22e0:	0a000004 	beq	22f8 <.text+0x22f8>
    22e4:	e2873001 	add	r3, r7, #1	; 0x1
    22e8:	e1a03803 	mov	r3, r3, lsl #16
    22ec:	e353085f 	cmp	r3, #6225920	; 0x5f0000
    22f0:	d1a07823 	movle	r7, r3, lsr #16
    22f4:	c3a07064 	movgt	r7, #100	; 0x64
    22f8:	ebfffa1b 	bl	b6c <BtnDown>
    22fc:	e3500000 	cmp	r0, #0	; 0x0
    2300:	0a000006 	beq	2320 <.text+0x2320>
    2304:	e2473001 	sub	r3, r7, #1	; 0x1
    2308:	e1a03803 	mov	r3, r3, lsl #16
    230c:	e1a03843 	mov	r3, r3, asr #16
    2310:	e3530000 	cmp	r3, #0	; 0x0
    2314:	b3a03000 	movlt	r3, #0	; 0x0
    2318:	e1a03803 	mov	r3, r3, lsl #16
    231c:	e1a07823 	mov	r7, r3, lsr #16
    2320:	ebfff9fe 	bl	b20 <BtnEnter>
    2324:	e3500000 	cmp	r0, #0	; 0x0
    2328:	0a000005 	beq	2344 <.text+0x2344>
    232c:	e20710ff 	and	r1, r7, #255	; 0xff
    2330:	e3a0002d 	mov	r0, #45	; 0x2d
    2334:	eb0009ef 	bl	4af8 <writeEEPROM>
    2338:	e3a00000 	mov	r0, #0	; 0x0
    233c:	ebfff79d 	bl	1b8 <getConfigValue>
    2340:	e1a07000 	mov	r7, r0
    2344:	e51f5290 	ldr	r5, [pc, #-656]	; 20bc <.text+0x20bc>
    2348:	e51f1304 	ldr	r1, [pc, #-772]	; 204c <.text+0x204c>
    234c:	e3a0200f 	mov	r2, #15	; 0xf
    2350:	e51f02a0 	ldr	r0, [pc, #-672]	; 20b8 <.text+0x20b8>
    2354:	e1a04807 	mov	r4, r7, lsl #16
    2358:	eb000e17 	bl	5bbc <memcpy>
    235c:	e1a04844 	mov	r4, r4, asr #16
    2360:	e51f12f0 	ldr	r1, [pc, #-752]	; 2078 <.text+0x2078>
    2364:	e3a0200a 	mov	r2, #10	; 0xa
    2368:	e1a00005 	mov	r0, r5
    236c:	eb000e12 	bl	5bbc <memcpy>
    2370:	e3a03020 	mov	r3, #32	; 0x20
    2374:	e3a0200a 	mov	r2, #10	; 0xa
    2378:	e28d1038 	add	r1, sp, #56	; 0x38
    237c:	e1a00004 	mov	r0, r4
    2380:	eb00080b 	bl	43b4 <__itoa>
    2384:	e1a01000 	mov	r1, r0
    2388:	e1a00005 	mov	r0, r5
    238c:	eb000e19 	bl	5bf8 <strcat>
    2390:	e1a00005 	mov	r0, r5
    2394:	eb000e28 	bl	5c3c <strlen>
    2398:	e51f1350 	ldr	r1, [pc, #-848]	; 2050 <.text+0x2050>
    239c:	e3a02003 	mov	r2, #3	; 0x3
    23a0:	e0800005 	add	r0, r0, r5
    23a4:	eb000e04 	bl	5bbc <memcpy>
    23a8:	e3a0002d 	mov	r0, #45	; 0x2d
    23ac:	eb0009a3 	bl	4a40 <readEEPROM>
    23b0:	e1a00800 	mov	r0, r0, lsl #16
    23b4:	e1540840 	cmp	r4, r0, asr #16
    23b8:	0afffd5e 	beq	1938 <.text+0x1938>
    23bc:	e1a00005 	mov	r0, r5
    23c0:	eb000e1d 	bl	5c3c <strlen>
    23c4:	e51f134c 	ldr	r1, [pc, #-844]	; 2080 <.text+0x2080>
    23c8:	e0800005 	add	r0, r0, r5
    23cc:	e3a02002 	mov	r2, #2	; 0x2
    23d0:	eb000df9 	bl	5bbc <memcpy>
    23d4:	eafffd57 	b	1938 <.text+0x1938>
    23d8:	ebfffa09 	bl	c04 <BtnForward>
    23dc:	e3500000 	cmp	r0, #0	; 0x0
    23e0:	0a000004 	beq	23f8 <.text+0x23f8>
    23e4:	e3a00002 	mov	r0, #2	; 0x2
    23e8:	ebfff772 	bl	1b8 <getConfigValue>
    23ec:	e3a0c002 	mov	ip, #2	; 0x2
    23f0:	e58dc00c 	str	ip, [sp, #12]
    23f4:	e1a07000 	mov	r7, r0
    23f8:	ebfff9ee 	bl	bb8 <BtnUp>
    23fc:	e3500000 	cmp	r0, #0	; 0x0
    2400:	0a000006 	beq	2420 <.text+0x2420>
    2404:	e2873001 	add	r3, r7, #1	; 0x1
    2408:	e1a03803 	mov	r3, r3, lsl #16
    240c:	e1a03843 	mov	r3, r3, asr #16
    2410:	e3530064 	cmp	r3, #100	; 0x64
    2414:	a3a03064 	movge	r3, #100	; 0x64
    2418:	e1a03803 	mov	r3, r3, lsl #16
    241c:	e1a07823 	mov	r7, r3, lsr #16
    2420:	ebfff9d1 	bl	b6c <BtnDown>
    2424:	e3500000 	cmp	r0, #0	; 0x0
    2428:	0a000006 	beq	2448 <.text+0x2448>
    242c:	e2473001 	sub	r3, r7, #1	; 0x1
    2430:	e1a03803 	mov	r3, r3, lsl #16
    2434:	e1a03843 	mov	r3, r3, asr #16
    2438:	e3530000 	cmp	r3, #0	; 0x0
    243c:	b3a03000 	movlt	r3, #0	; 0x0
    2440:	e1a03803 	mov	r3, r3, lsl #16
    2444:	e1a07823 	mov	r7, r3, lsr #16
    2448:	ebfff9b4 	bl	b20 <BtnEnter>
    244c:	e3500000 	cmp	r0, #0	; 0x0
    2450:	0a000005 	beq	246c <.text+0x246c>
    2454:	e20710ff 	and	r1, r7, #255	; 0xff
    2458:	e3a0002c 	mov	r0, #44	; 0x2c
    245c:	eb0009a5 	bl	4af8 <writeEEPROM>
    2460:	e3a00001 	mov	r0, #1	; 0x1
    2464:	ebfff753 	bl	1b8 <getConfigValue>
    2468:	e1a07000 	mov	r7, r0
    246c:	e51f53b8 	ldr	r5, [pc, #-952]	; 20bc <.text+0x20bc>
    2470:	e51f1424 	ldr	r1, [pc, #-1060]	; 2054 <.text+0x2054>
    2474:	e3a02011 	mov	r2, #17	; 0x11
    2478:	e51f03c8 	ldr	r0, [pc, #-968]	; 20b8 <.text+0x20b8>
    247c:	e1a04807 	mov	r4, r7, lsl #16
    2480:	eb000dcd 	bl	5bbc <memcpy>
    2484:	e1a04844 	mov	r4, r4, asr #16
    2488:	e51f1418 	ldr	r1, [pc, #-1048]	; 2078 <.text+0x2078>
    248c:	e3a0200a 	mov	r2, #10	; 0xa
    2490:	e1a00005 	mov	r0, r5
    2494:	eb000dc8 	bl	5bbc <memcpy>
    2498:	e3a03020 	mov	r3, #32	; 0x20
    249c:	e3a0200a 	mov	r2, #10	; 0xa
    24a0:	e28d1038 	add	r1, sp, #56	; 0x38
    24a4:	e1a00004 	mov	r0, r4
    24a8:	eb0007c1 	bl	43b4 <__itoa>
    24ac:	e1a01000 	mov	r1, r0
    24b0:	e1a00005 	mov	r0, r5
    24b4:	eb000dcf 	bl	5bf8 <strcat>
    24b8:	e1a00005 	mov	r0, r5
    24bc:	eb000dde 	bl	5c3c <strlen>
    24c0:	e51f1470 	ldr	r1, [pc, #-1136]	; 2058 <.text+0x2058>
    24c4:	e3a02003 	mov	r2, #3	; 0x3
    24c8:	e0800005 	add	r0, r0, r5
    24cc:	eb000dba 	bl	5bbc <memcpy>
    24d0:	e3a0002c 	mov	r0, #44	; 0x2c
    24d4:	eb000959 	bl	4a40 <readEEPROM>
    24d8:	e1a00800 	mov	r0, r0, lsl #16
    24dc:	e1540840 	cmp	r4, r0, asr #16
    24e0:	0afffd14 	beq	1938 <.text+0x1938>
    24e4:	e1a00005 	mov	r0, r5
    24e8:	eb000dd3 	bl	5c3c <strlen>
    24ec:	e51f1474 	ldr	r1, [pc, #-1140]	; 2080 <.text+0x2080>
    24f0:	e0800005 	add	r0, r0, r5
    24f4:	e3a02002 	mov	r2, #2	; 0x2
    24f8:	eb000daf 	bl	5bbc <memcpy>
    24fc:	eafffd0d 	b	1938 <.text+0x1938>
    2500:	ebfff9bf 	bl	c04 <BtnForward>
    2504:	e3500000 	cmp	r0, #0	; 0x0
    2508:	0a000004 	beq	2520 <.text+0x2520>
    250c:	e3a00003 	mov	r0, #3	; 0x3
    2510:	ebfff728 	bl	1b8 <getConfigValue>
    2514:	e1a07000 	mov	r7, r0
    2518:	e3a00003 	mov	r0, #3	; 0x3
    251c:	e58d000c 	str	r0, [sp, #12]
    2520:	ebfff9a4 	bl	bb8 <BtnUp>
    2524:	e3500000 	cmp	r0, #0	; 0x0
    2528:	0a000006 	beq	2548 <.text+0x2548>
    252c:	e2873001 	add	r3, r7, #1	; 0x1
    2530:	e1a03803 	mov	r3, r3, lsl #16
    2534:	e1a03843 	mov	r3, r3, asr #16
    2538:	e35300ff 	cmp	r3, #255	; 0xff
    253c:	a3a030ff 	movge	r3, #255	; 0xff
    2540:	e1a03803 	mov	r3, r3, lsl #16
    2544:	e1a07823 	mov	r7, r3, lsr #16
    2548:	ebfff987 	bl	b6c <BtnDown>
    254c:	e3500000 	cmp	r0, #0	; 0x0
    2550:	0a000006 	beq	2570 <.text+0x2570>
    2554:	e2473001 	sub	r3, r7, #1	; 0x1
    2558:	e1a03803 	mov	r3, r3, lsl #16
    255c:	e1a03843 	mov	r3, r3, asr #16
    2560:	e3530000 	cmp	r3, #0	; 0x0
    2564:	b3a03000 	movlt	r3, #0	; 0x0
    2568:	e1a03803 	mov	r3, r3, lsl #16
    256c:	e1a07823 	mov	r7, r3, lsr #16
    2570:	ebfff96a 	bl	b20 <BtnEnter>
    2574:	e3500000 	cmp	r0, #0	; 0x0
    2578:	0a000005 	beq	2594 <.text+0x2594>
    257c:	e20710ff 	and	r1, r7, #255	; 0xff
    2580:	e3a00038 	mov	r0, #56	; 0x38
    2584:	eb00095b 	bl	4af8 <writeEEPROM>
    2588:	e3a00002 	mov	r0, #2	; 0x2
    258c:	ebfff709 	bl	1b8 <getConfigValue>
    2590:	e1a07000 	mov	r7, r0
    2594:	e51f54e0 	ldr	r5, [pc, #-1248]	; 20bc <.text+0x20bc>
    2598:	e51f1544 	ldr	r1, [pc, #-1348]	; 205c <.text+0x205c>
    259c:	e3a0200e 	mov	r2, #14	; 0xe
    25a0:	e51f04f0 	ldr	r0, [pc, #-1264]	; 20b8 <.text+0x20b8>
    25a4:	e1a04807 	mov	r4, r7, lsl #16
    25a8:	eb000d83 	bl	5bbc <memcpy>
    25ac:	e1a04844 	mov	r4, r4, asr #16
    25b0:	e51f1540 	ldr	r1, [pc, #-1344]	; 2078 <.text+0x2078>
    25b4:	e3a0200a 	mov	r2, #10	; 0xa
    25b8:	e1a00005 	mov	r0, r5
    25bc:	eb000d7e 	bl	5bbc <memcpy>
    25c0:	e3a03020 	mov	r3, #32	; 0x20
    25c4:	e3a0200a 	mov	r2, #10	; 0xa
    25c8:	e28d1038 	add	r1, sp, #56	; 0x38
    25cc:	e1a00004 	mov	r0, r4
    25d0:	eb000777 	bl	43b4 <__itoa>
    25d4:	e1a01000 	mov	r1, r0
    25d8:	e1a00005 	mov	r0, r5
    25dc:	eb000d85 	bl	5bf8 <strcat>
    25e0:	e1a00005 	mov	r0, r5
    25e4:	eb000d94 	bl	5c3c <strlen>
    25e8:	e51f158c 	ldr	r1, [pc, #-1420]	; 2064 <.text+0x2064>
    25ec:	e3a02003 	mov	r2, #3	; 0x3
    25f0:	e0800005 	add	r0, r0, r5
    25f4:	eb000d70 	bl	5bbc <memcpy>
    25f8:	e3a00038 	mov	r0, #56	; 0x38
    25fc:	eb00090f 	bl	4a40 <readEEPROM>
    2600:	e1a00800 	mov	r0, r0, lsl #16
    2604:	e1540840 	cmp	r4, r0, asr #16
    2608:	0afffcca 	beq	1938 <.text+0x1938>
    260c:	e1a00005 	mov	r0, r5
    2610:	eb000d89 	bl	5c3c <strlen>
    2614:	e51f159c 	ldr	r1, [pc, #-1436]	; 2080 <.text+0x2080>
    2618:	e0800005 	add	r0, r0, r5
    261c:	e3a02002 	mov	r2, #2	; 0x2
    2620:	eb000d65 	bl	5bbc <memcpy>
    2624:	eafffcc3 	b	1938 <.text+0x1938>
    2628:	ebfff975 	bl	c04 <BtnForward>
    262c:	e3500000 	cmp	r0, #0	; 0x0
    2630:	0a000004 	beq	2648 <.text+0x2648>
    2634:	e3a00004 	mov	r0, #4	; 0x4
    2638:	ebfff6de 	bl	1b8 <getConfigValue>
    263c:	e3a01004 	mov	r1, #4	; 0x4
    2640:	e58d100c 	str	r1, [sp, #12]
    2644:	e1a07000 	mov	r7, r0
    2648:	ebfff95a 	bl	bb8 <BtnUp>
    264c:	e3500000 	cmp	r0, #0	; 0x0
    2650:	0a000006 	beq	2670 <.text+0x2670>
    2654:	e2873001 	add	r3, r7, #1	; 0x1
    2658:	e1a03803 	mov	r3, r3, lsl #16
    265c:	e1a03843 	mov	r3, r3, asr #16
    2660:	e35300ff 	cmp	r3, #255	; 0xff
    2664:	a3a030ff 	movge	r3, #255	; 0xff
    2668:	e1a03803 	mov	r3, r3, lsl #16
    266c:	e1a07823 	mov	r7, r3, lsr #16
    2670:	ebfff93d 	bl	b6c <BtnDown>
    2674:	e3500000 	cmp	r0, #0	; 0x0
    2678:	0a000006 	beq	2698 <.text+0x2698>
    267c:	e2473001 	sub	r3, r7, #1	; 0x1
    2680:	e1a03803 	mov	r3, r3, lsl #16
    2684:	e1a03843 	mov	r3, r3, asr #16
    2688:	e3530000 	cmp	r3, #0	; 0x0
    268c:	b3a03000 	movlt	r3, #0	; 0x0
    2690:	e1a03803 	mov	r3, r3, lsl #16
    2694:	e1a07823 	mov	r7, r3, lsr #16
    2698:	ebfff920 	bl	b20 <BtnEnter>
    269c:	e3500000 	cmp	r0, #0	; 0x0
    26a0:	0a000005 	beq	26bc <.text+0x26bc>
    26a4:	e20710ff 	and	r1, r7, #255	; 0xff
    26a8:	e3a00037 	mov	r0, #55	; 0x37
    26ac:	eb000911 	bl	4af8 <writeEEPROM>
    26b0:	e3a00003 	mov	r0, #3	; 0x3
    26b4:	ebfff6bf 	bl	1b8 <getConfigValue>
    26b8:	e1a07000 	mov	r7, r0
    26bc:	e51f5608 	ldr	r5, [pc, #-1544]	; 20bc <.text+0x20bc>
    26c0:	e51f1668 	ldr	r1, [pc, #-1640]	; 2060 <.text+0x2060>
    26c4:	e3a0200e 	mov	r2, #14	; 0xe
    26c8:	e51f0618 	ldr	r0, [pc, #-1560]	; 20b8 <.text+0x20b8>
    26cc:	e1a04807 	mov	r4, r7, lsl #16
    26d0:	eb000d39 	bl	5bbc <memcpy>
    26d4:	e1a04844 	mov	r4, r4, asr #16
    26d8:	e51f1668 	ldr	r1, [pc, #-1640]	; 2078 <.text+0x2078>
    26dc:	e3a0200a 	mov	r2, #10	; 0xa
    26e0:	e1a00005 	mov	r0, r5
    26e4:	eb000d34 	bl	5bbc <memcpy>
    26e8:	e3a03020 	mov	r3, #32	; 0x20
    26ec:	e3a0200a 	mov	r2, #10	; 0xa
    26f0:	e28d1038 	add	r1, sp, #56	; 0x38
    26f4:	e1a00004 	mov	r0, r4
    26f8:	eb00072d 	bl	43b4 <__itoa>
    26fc:	e1a01000 	mov	r1, r0
    2700:	e1a00005 	mov	r0, r5
    2704:	eb000d3b 	bl	5bf8 <strcat>
    2708:	e1a00005 	mov	r0, r5
    270c:	eb000d4a 	bl	5c3c <strlen>
    2710:	e51f16b4 	ldr	r1, [pc, #-1716]	; 2064 <.text+0x2064>
    2714:	e3a02003 	mov	r2, #3	; 0x3
    2718:	e0800005 	add	r0, r0, r5
    271c:	eb000d26 	bl	5bbc <memcpy>
    2720:	e3a00037 	mov	r0, #55	; 0x37
    2724:	eb0008c5 	bl	4a40 <readEEPROM>
    2728:	e1a00800 	mov	r0, r0, lsl #16
    272c:	e1540840 	cmp	r4, r0, asr #16
    2730:	0afffc80 	beq	1938 <.text+0x1938>
    2734:	e1a00005 	mov	r0, r5
    2738:	eb000d3f 	bl	5c3c <strlen>
    273c:	e51f16c4 	ldr	r1, [pc, #-1732]	; 2080 <.text+0x2080>
    2740:	e0800005 	add	r0, r0, r5
    2744:	e3a02002 	mov	r2, #2	; 0x2
    2748:	eb000d1b 	bl	5bbc <memcpy>
    274c:	eafffc79 	b	1938 <.text+0x1938>
    2750:	ebfff92b 	bl	c04 <BtnForward>
    2754:	e3500000 	cmp	r0, #0	; 0x0
    2758:	0a000004 	beq	2770 <.text+0x2770>
    275c:	e3a00005 	mov	r0, #5	; 0x5
    2760:	ebfff694 	bl	1b8 <getConfigValue>
    2764:	e3a02005 	mov	r2, #5	; 0x5
    2768:	e58d200c 	str	r2, [sp, #12]
    276c:	e1a07000 	mov	r7, r0
    2770:	ebfff910 	bl	bb8 <BtnUp>
    2774:	e3500000 	cmp	r0, #0	; 0x0
    2778:	0a000006 	beq	2798 <.text+0x2798>
    277c:	e2873001 	add	r3, r7, #1	; 0x1
    2780:	e1a03803 	mov	r3, r3, lsl #16
    2784:	e1a03843 	mov	r3, r3, asr #16
    2788:	e353003c 	cmp	r3, #60	; 0x3c
    278c:	a3a0303c 	movge	r3, #60	; 0x3c
    2790:	e1a03803 	mov	r3, r3, lsl #16
    2794:	e1a07823 	mov	r7, r3, lsr #16
    2798:	ebfff8f3 	bl	b6c <BtnDown>
    279c:	e3500000 	cmp	r0, #0	; 0x0
    27a0:	0a000006 	beq	27c0 <.text+0x27c0>
    27a4:	e2473001 	sub	r3, r7, #1	; 0x1
    27a8:	e1a03803 	mov	r3, r3, lsl #16
    27ac:	e1a03843 	mov	r3, r3, asr #16
    27b0:	e3530000 	cmp	r3, #0	; 0x0
    27b4:	b3a03000 	movlt	r3, #0	; 0x0
    27b8:	e1a03803 	mov	r3, r3, lsl #16
    27bc:	e1a07823 	mov	r7, r3, lsr #16
    27c0:	ebfff8d6 	bl	b20 <BtnEnter>
    27c4:	e3500000 	cmp	r0, #0	; 0x0
    27c8:	0a000005 	beq	27e4 <.text+0x27e4>
    27cc:	e20710ff 	and	r1, r7, #255	; 0xff
    27d0:	e3a00036 	mov	r0, #54	; 0x36
    27d4:	eb0008c7 	bl	4af8 <writeEEPROM>
    27d8:	e3a00004 	mov	r0, #4	; 0x4
    27dc:	ebfff675 	bl	1b8 <getConfigValue>
    27e0:	e1a07000 	mov	r7, r0
    27e4:	e51f5730 	ldr	r5, [pc, #-1840]	; 20bc <.text+0x20bc>
    27e8:	e51f1788 	ldr	r1, [pc, #-1928]	; 2068 <.text+0x2068>
    27ec:	e3a0200c 	mov	r2, #12	; 0xc
    27f0:	e51f0740 	ldr	r0, [pc, #-1856]	; 20b8 <.text+0x20b8>
    27f4:	e1a04807 	mov	r4, r7, lsl #16
    27f8:	eb000cef 	bl	5bbc <memcpy>
    27fc:	e1a04844 	mov	r4, r4, asr #16
    2800:	e51f1790 	ldr	r1, [pc, #-1936]	; 2078 <.text+0x2078>
    2804:	e3a0200a 	mov	r2, #10	; 0xa
    2808:	e1a00005 	mov	r0, r5
    280c:	eb000cea 	bl	5bbc <memcpy>
    2810:	e3a03020 	mov	r3, #32	; 0x20
    2814:	e3a0200a 	mov	r2, #10	; 0xa
    2818:	e28d1038 	add	r1, sp, #56	; 0x38
    281c:	e1a00004 	mov	r0, r4
    2820:	eb0006e3 	bl	43b4 <__itoa>
    2824:	e1a01000 	mov	r1, r0
    2828:	e1a00005 	mov	r0, r5
    282c:	eb000cf1 	bl	5bf8 <strcat>
    2830:	e1a00005 	mov	r0, r5
    2834:	eb000d00 	bl	5c3c <strlen>
    2838:	e51f17d0 	ldr	r1, [pc, #-2000]	; 2070 <.text+0x2070>
    283c:	e3a02003 	mov	r2, #3	; 0x3
    2840:	e0800005 	add	r0, r0, r5
    2844:	eb000cdc 	bl	5bbc <memcpy>
    2848:	e3a00036 	mov	r0, #54	; 0x36
    284c:	eb00087b 	bl	4a40 <readEEPROM>
    2850:	e1a00800 	mov	r0, r0, lsl #16
    2854:	e1540840 	cmp	r4, r0, asr #16
    2858:	0afffc36 	beq	1938 <.text+0x1938>
    285c:	e1a00005 	mov	r0, r5
    2860:	eb000cf5 	bl	5c3c <strlen>
    2864:	e51f17ec 	ldr	r1, [pc, #-2028]	; 2080 <.text+0x2080>
    2868:	e0800005 	add	r0, r0, r5
    286c:	e3a02002 	mov	r2, #2	; 0x2
    2870:	eb000cd1 	bl	5bbc <memcpy>
    2874:	eafffc2f 	b	1938 <.text+0x1938>
    2878:	ebfff8e1 	bl	c04 <BtnForward>
    287c:	e3500000 	cmp	r0, #0	; 0x0
    2880:	0a000004 	beq	2898 <.text+0x2898>
    2884:	e3a00006 	mov	r0, #6	; 0x6
    2888:	ebfff64a 	bl	1b8 <getConfigValue>
    288c:	e3a03006 	mov	r3, #6	; 0x6
    2890:	e58d300c 	str	r3, [sp, #12]
    2894:	e1a07000 	mov	r7, r0
    2898:	ebfff8c6 	bl	bb8 <BtnUp>
    289c:	e3500000 	cmp	r0, #0	; 0x0
    28a0:	0a000006 	beq	28c0 <.text+0x28c0>
    28a4:	e2873001 	add	r3, r7, #1	; 0x1
    28a8:	e1a03803 	mov	r3, r3, lsl #16
    28ac:	e1a03843 	mov	r3, r3, asr #16
    28b0:	e35300ff 	cmp	r3, #255	; 0xff
    28b4:	a3a030ff 	movge	r3, #255	; 0xff
    28b8:	e1a03803 	mov	r3, r3, lsl #16
    28bc:	e1a07823 	mov	r7, r3, lsr #16
    28c0:	ebfff8a9 	bl	b6c <BtnDown>
    28c4:	e3500000 	cmp	r0, #0	; 0x0
    28c8:	0a000006 	beq	28e8 <.text+0x28e8>
    28cc:	e2473001 	sub	r3, r7, #1	; 0x1
    28d0:	e1a03803 	mov	r3, r3, lsl #16
    28d4:	e1a03843 	mov	r3, r3, asr #16
    28d8:	e3530000 	cmp	r3, #0	; 0x0
    28dc:	b3a03000 	movlt	r3, #0	; 0x0
    28e0:	e1a03803 	mov	r3, r3, lsl #16
    28e4:	e1a07823 	mov	r7, r3, lsr #16
    28e8:	ebfff88c 	bl	b20 <BtnEnter>
    28ec:	e3500000 	cmp	r0, #0	; 0x0
    28f0:	0a000005 	beq	290c <.text+0x290c>
    28f4:	e20710ff 	and	r1, r7, #255	; 0xff
    28f8:	e3a0003f 	mov	r0, #63	; 0x3f
    28fc:	eb00087d 	bl	4af8 <writeEEPROM>
    2900:	e3a00005 	mov	r0, #5	; 0x5
    2904:	ebfff62b 	bl	1b8 <getConfigValue>
    2908:	e1a07000 	mov	r7, r0
    290c:	e51f5858 	ldr	r5, [pc, #-2136]	; 20bc <.text+0x20bc>
    2910:	e51f18ac 	ldr	r1, [pc, #-2220]	; 206c <.text+0x206c>
    2914:	e3a02011 	mov	r2, #17	; 0x11
    2918:	e51f0868 	ldr	r0, [pc, #-2152]	; 20b8 <.text+0x20b8>
    291c:	e1a04807 	mov	r4, r7, lsl #16
    2920:	eb000ca5 	bl	5bbc <memcpy>
    2924:	e1a04844 	mov	r4, r4, asr #16
    2928:	e51f18b8 	ldr	r1, [pc, #-2232]	; 2078 <.text+0x2078>
    292c:	e3a0200a 	mov	r2, #10	; 0xa
    2930:	e1a00005 	mov	r0, r5
    2934:	eb000ca0 	bl	5bbc <memcpy>
    2938:	e3a03020 	mov	r3, #32	; 0x20
    293c:	e3a0200a 	mov	r2, #10	; 0xa
    2940:	e28d1038 	add	r1, sp, #56	; 0x38
    2944:	e1a00004 	mov	r0, r4
    2948:	eb000699 	bl	43b4 <__itoa>
    294c:	e1a01000 	mov	r1, r0
    2950:	e1a00005 	mov	r0, r5
    2954:	eb000ca7 	bl	5bf8 <strcat>
    2958:	e1a00005 	mov	r0, r5
    295c:	eb000cb6 	bl	5c3c <strlen>
    2960:	e51f18f8 	ldr	r1, [pc, #-2296]	; 2070 <.text+0x2070>
    2964:	e3a02003 	mov	r2, #3	; 0x3
    2968:	e0800005 	add	r0, r0, r5
    296c:	eb000c92 	bl	5bbc <memcpy>
    2970:	e3a0003f 	mov	r0, #63	; 0x3f
    2974:	eb000831 	bl	4a40 <readEEPROM>
    2978:	e1a00800 	mov	r0, r0, lsl #16
    297c:	e1540840 	cmp	r4, r0, asr #16
    2980:	0afffbec 	beq	1938 <.text+0x1938>
    2984:	e1a00005 	mov	r0, r5
    2988:	eb000cab 	bl	5c3c <strlen>
    298c:	e51f1914 	ldr	r1, [pc, #-2324]	; 2080 <.text+0x2080>
    2990:	e0800005 	add	r0, r0, r5
    2994:	e3a02002 	mov	r2, #2	; 0x2
    2998:	eb000c87 	bl	5bbc <memcpy>
    299c:	eafffbe5 	b	1938 <.text+0x1938>
    29a0:	ebfff897 	bl	c04 <BtnForward>
    29a4:	e59dc00c 	ldr	ip, [sp, #12]
    29a8:	e3500000 	cmp	r0, #0	; 0x0
    29ac:	13a0c00a 	movne	ip, #10	; 0xa
    29b0:	e58dc00c 	str	ip, [sp, #12]
    29b4:	ebfff87f 	bl	bb8 <BtnUp>
    29b8:	e3500000 	cmp	r0, #0	; 0x0
    29bc:	0a000006 	beq	29dc <.text+0x29dc>
    29c0:	e2873001 	add	r3, r7, #1	; 0x1
    29c4:	e1a03803 	mov	r3, r3, lsl #16
    29c8:	e1a03843 	mov	r3, r3, asr #16
    29cc:	e35300ff 	cmp	r3, #255	; 0xff
    29d0:	a3a030ff 	movge	r3, #255	; 0xff
    29d4:	e1a03803 	mov	r3, r3, lsl #16
    29d8:	e1a07823 	mov	r7, r3, lsr #16
    29dc:	ebfff862 	bl	b6c <BtnDown>
    29e0:	e3500000 	cmp	r0, #0	; 0x0
    29e4:	0a000006 	beq	2a04 <.text+0x2a04>
    29e8:	e2473001 	sub	r3, r7, #1	; 0x1
    29ec:	e1a03803 	mov	r3, r3, lsl #16
    29f0:	e1a03843 	mov	r3, r3, asr #16
    29f4:	e3530000 	cmp	r3, #0	; 0x0
    29f8:	b3a03000 	movlt	r3, #0	; 0x0
    29fc:	e1a03803 	mov	r3, r3, lsl #16
    2a00:	e1a07823 	mov	r7, r3, lsr #16
    2a04:	ebfff845 	bl	b20 <BtnEnter>
    2a08:	e3500000 	cmp	r0, #0	; 0x0
    2a0c:	0a000005 	beq	2a28 <.text+0x2a28>
    2a10:	e20710ff 	and	r1, r7, #255	; 0xff
    2a14:	e3a00039 	mov	r0, #57	; 0x39
    2a18:	eb000836 	bl	4af8 <writeEEPROM>
    2a1c:	e3a00006 	mov	r0, #6	; 0x6
    2a20:	ebfff5e4 	bl	1b8 <getConfigValue>
    2a24:	e1a07000 	mov	r7, r0
    2a28:	e51f5974 	ldr	r5, [pc, #-2420]	; 20bc <.text+0x20bc>
    2a2c:	e51f19c0 	ldr	r1, [pc, #-2496]	; 2074 <.text+0x2074>
    2a30:	e3a0200f 	mov	r2, #15	; 0xf
    2a34:	e51f0984 	ldr	r0, [pc, #-2436]	; 20b8 <.text+0x20b8>
    2a38:	e1a04807 	mov	r4, r7, lsl #16
    2a3c:	eb000c5e 	bl	5bbc <memcpy>
    2a40:	e1a04844 	mov	r4, r4, asr #16
    2a44:	e51f19d4 	ldr	r1, [pc, #-2516]	; 2078 <.text+0x2078>
    2a48:	e3a0200a 	mov	r2, #10	; 0xa
    2a4c:	e1a00005 	mov	r0, r5
    2a50:	eb000c59 	bl	5bbc <memcpy>
    2a54:	e3a03020 	mov	r3, #32	; 0x20
    2a58:	e3a0200a 	mov	r2, #10	; 0xa
    2a5c:	e28d1038 	add	r1, sp, #56	; 0x38
    2a60:	e1a00004 	mov	r0, r4
    2a64:	eb000652 	bl	43b4 <__itoa>
    2a68:	e1a01000 	mov	r1, r0
    2a6c:	e1a00005 	mov	r0, r5
    2a70:	eb000c60 	bl	5bf8 <strcat>
    2a74:	e1a00005 	mov	r0, r5
    2a78:	eb000c6f 	bl	5c3c <strlen>
    2a7c:	e51f1a08 	ldr	r1, [pc, #-2568]	; 207c <.text+0x207c>
    2a80:	e3a02002 	mov	r2, #2	; 0x2
    2a84:	e0800005 	add	r0, r0, r5
    2a88:	eb000c4b 	bl	5bbc <memcpy>
    2a8c:	e3a00039 	mov	r0, #57	; 0x39
    2a90:	eb0007ea 	bl	4a40 <readEEPROM>
    2a94:	e1a00800 	mov	r0, r0, lsl #16
    2a98:	e1540840 	cmp	r4, r0, asr #16
    2a9c:	0afffba5 	beq	1938 <.text+0x1938>
    2aa0:	e1a00005 	mov	r0, r5
    2aa4:	eb000c64 	bl	5c3c <strlen>
    2aa8:	e51f1a30 	ldr	r1, [pc, #-2608]	; 2080 <.text+0x2080>
    2aac:	e0800005 	add	r0, r0, r5
    2ab0:	e3a02002 	mov	r2, #2	; 0x2
    2ab4:	eb000c40 	bl	5bbc <memcpy>
    2ab8:	eafffb9e 	b	1938 <.text+0x1938>
    2abc:	ebfff850 	bl	c04 <BtnForward>
    2ac0:	e3500000 	cmp	r0, #0	; 0x0
    2ac4:	0a000004 	beq	2adc <.text+0x2adc>
    2ac8:	e3a00008 	mov	r0, #8	; 0x8
    2acc:	ebfff5b9 	bl	1b8 <getConfigValue>
    2ad0:	e1a07000 	mov	r7, r0
    2ad4:	e3a00008 	mov	r0, #8	; 0x8
    2ad8:	e58d000c 	str	r0, [sp, #12]
    2adc:	ebfff835 	bl	bb8 <BtnUp>
    2ae0:	e3500000 	cmp	r0, #0	; 0x0
    2ae4:	0a000002 	beq	2af4 <.text+0x2af4>
    2ae8:	e1b07807 	movs	r7, r7, lsl #16
    2aec:	13a07000 	movne	r7, #0	; 0x0
    2af0:	03a07001 	moveq	r7, #1	; 0x1
    2af4:	ebfff81c 	bl	b6c <BtnDown>
    2af8:	e3500000 	cmp	r0, #0	; 0x0
    2afc:	0a000002 	beq	2b0c <.text+0x2b0c>
    2b00:	e1b07807 	movs	r7, r7, lsl #16
    2b04:	13a07000 	movne	r7, #0	; 0x0
    2b08:	03a07001 	moveq	r7, #1	; 0x1
    2b0c:	ebfff803 	bl	b20 <BtnEnter>
    2b10:	e3500000 	cmp	r0, #0	; 0x0
    2b14:	0a000016 	beq	2b74 <.text+0x2b74>
    2b18:	e3570000 	cmp	r7, #0	; 0x0
    2b1c:	0a000285 	beq	3538 <.text+0x3538>
    2b20:	e3a00022 	mov	r0, #34	; 0x22
    2b24:	eb0007c5 	bl	4a40 <readEEPROM>
    2b28:	e1a00800 	mov	r0, r0, lsl #16
    2b2c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2b30:	e1a00820 	mov	r0, r0, lsr #16
    2b34:	e20010ff 	and	r1, r0, #255	; 0xff
    2b38:	e3a00022 	mov	r0, #34	; 0x22
    2b3c:	eb0007ed 	bl	4af8 <writeEEPROM>
    2b40:	e3a00007 	mov	r0, #7	; 0x7
    2b44:	ebfff59b 	bl	1b8 <getConfigValue>
    2b48:	e1a07000 	mov	r7, r0
    2b4c:	eb0002b9 	bl	3638 <getSysTICs>
    2b50:	e58d0010 	str	r0, [sp, #16]
    2b54:	eb0002b7 	bl	3638 <getSysTICs>
    2b58:	e58d0014 	str	r0, [sp, #20]
    2b5c:	eb0002b5 	bl	3638 <getSysTICs>
    2b60:	e58d0018 	str	r0, [sp, #24]
    2b64:	eb0002b3 	bl	3638 <getSysTICs>
    2b68:	e3a01003 	mov	r1, #3	; 0x3
    2b6c:	e58d001c 	str	r0, [sp, #28]
    2b70:	e58d1000 	str	r1, [sp]
    2b74:	e51f4ac0 	ldr	r4, [pc, #-2752]	; 20bc <.text+0x20bc>
    2b78:	e51f1afc 	ldr	r1, [pc, #-2812]	; 2084 <.text+0x2084>
    2b7c:	e3a0200d 	mov	r2, #13	; 0xd
    2b80:	e51f0ad0 	ldr	r0, [pc, #-2768]	; 20b8 <.text+0x20b8>
    2b84:	eb000c0c 	bl	5bbc <memcpy>
    2b88:	e1a00004 	mov	r0, r4
    2b8c:	e51f1b04 	ldr	r1, [pc, #-2820]	; 2090 <.text+0x2090>
    2b90:	e3a0200b 	mov	r2, #11	; 0xb
    2b94:	eb000c08 	bl	5bbc <memcpy>
    2b98:	e3570000 	cmp	r7, #0	; 0x0
    2b9c:	0a00025e 	beq	351c <.text+0x351c>
    2ba0:	e1a00004 	mov	r0, r4
    2ba4:	eb000c24 	bl	5c3c <strlen>
    2ba8:	e51f1b1c 	ldr	r1, [pc, #-2844]	; 2094 <.text+0x2094>
    2bac:	e0800004 	add	r0, r0, r4
    2bb0:	e3a02003 	mov	r2, #3	; 0x3
    2bb4:	eb000c00 	bl	5bbc <memcpy>
    2bb8:	eafffb5e 	b	1938 <.text+0x1938>
    2bbc:	ebfff810 	bl	c04 <BtnForward>
    2bc0:	e3500000 	cmp	r0, #0	; 0x0
    2bc4:	0a000004 	beq	2bdc <.text+0x2bdc>
    2bc8:	e3a00009 	mov	r0, #9	; 0x9
    2bcc:	ebfff579 	bl	1b8 <getConfigValue>
    2bd0:	e3a02009 	mov	r2, #9	; 0x9
    2bd4:	e58d200c 	str	r2, [sp, #12]
    2bd8:	e1a07000 	mov	r7, r0
    2bdc:	ebfff7f5 	bl	bb8 <BtnUp>
    2be0:	e3500000 	cmp	r0, #0	; 0x0
    2be4:	0a000002 	beq	2bf4 <.text+0x2bf4>
    2be8:	e1b07807 	movs	r7, r7, lsl #16
    2bec:	13a07000 	movne	r7, #0	; 0x0
    2bf0:	03a07001 	moveq	r7, #1	; 0x1
    2bf4:	ebfff7dc 	bl	b6c <BtnDown>
    2bf8:	e3500000 	cmp	r0, #0	; 0x0
    2bfc:	0a000002 	beq	2c0c <.text+0x2c0c>
    2c00:	e1b07807 	movs	r7, r7, lsl #16
    2c04:	13a07000 	movne	r7, #0	; 0x0
    2c08:	03a07001 	moveq	r7, #1	; 0x1
    2c0c:	ebfff7c3 	bl	b20 <BtnEnter>
    2c10:	e3500000 	cmp	r0, #0	; 0x0
    2c14:	0a00000c 	beq	2c4c <.text+0x2c4c>
    2c18:	e3570000 	cmp	r7, #0	; 0x0
    2c1c:	0a000249 	beq	3548 <.text+0x3548>
    2c20:	e3a00023 	mov	r0, #35	; 0x23
    2c24:	eb000785 	bl	4a40 <readEEPROM>
    2c28:	e1a00800 	mov	r0, r0, lsl #16
    2c2c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2c30:	e1a00820 	mov	r0, r0, lsr #16
    2c34:	e20010ff 	and	r1, r0, #255	; 0xff
    2c38:	e3a00023 	mov	r0, #35	; 0x23
    2c3c:	eb0007ad 	bl	4af8 <writeEEPROM>
    2c40:	e3a00008 	mov	r0, #8	; 0x8
    2c44:	ebfff55b 	bl	1b8 <getConfigValue>
    2c48:	e1a07000 	mov	r7, r0
    2c4c:	e51f4b98 	ldr	r4, [pc, #-2968]	; 20bc <.text+0x20bc>
    2c50:	e51f1bd0 	ldr	r1, [pc, #-3024]	; 2088 <.text+0x2088>
    2c54:	e3a0200c 	mov	r2, #12	; 0xc
    2c58:	e51f0ba8 	ldr	r0, [pc, #-2984]	; 20b8 <.text+0x20b8>
    2c5c:	eb000bd6 	bl	5bbc <memcpy>
    2c60:	e1a00004 	mov	r0, r4
    2c64:	e51f1bdc 	ldr	r1, [pc, #-3036]	; 2090 <.text+0x2090>
    2c68:	e3a0200b 	mov	r2, #11	; 0xb
    2c6c:	eb000bd2 	bl	5bbc <memcpy>
    2c70:	e3570000 	cmp	r7, #0	; 0x0
    2c74:	0a00021a 	beq	34e4 <.text+0x34e4>
    2c78:	e1a00004 	mov	r0, r4
    2c7c:	eb000bee 	bl	5c3c <strlen>
    2c80:	e51f1bf4 	ldr	r1, [pc, #-3060]	; 2094 <.text+0x2094>
    2c84:	e0800004 	add	r0, r0, r4
    2c88:	e3a02003 	mov	r2, #3	; 0x3
    2c8c:	eb000bca 	bl	5bbc <memcpy>
    2c90:	eafffb28 	b	1938 <.text+0x1938>
    2c94:	ebfff7da 	bl	c04 <BtnForward>
    2c98:	e3500000 	cmp	r0, #0	; 0x0
    2c9c:	0a000004 	beq	2cb4 <.text+0x2cb4>
    2ca0:	e3a00000 	mov	r0, #0	; 0x0
    2ca4:	ebfff543 	bl	1b8 <getConfigValue>
    2ca8:	e3a03000 	mov	r3, #0	; 0x0
    2cac:	e58d300c 	str	r3, [sp, #12]
    2cb0:	e1a07000 	mov	r7, r0
    2cb4:	ebfff7bf 	bl	bb8 <BtnUp>
    2cb8:	e3500000 	cmp	r0, #0	; 0x0
    2cbc:	0a000002 	beq	2ccc <.text+0x2ccc>
    2cc0:	e1b07807 	movs	r7, r7, lsl #16
    2cc4:	13a07000 	movne	r7, #0	; 0x0
    2cc8:	03a07001 	moveq	r7, #1	; 0x1
    2ccc:	ebfff7a6 	bl	b6c <BtnDown>
    2cd0:	e3500000 	cmp	r0, #0	; 0x0
    2cd4:	0a000002 	beq	2ce4 <.text+0x2ce4>
    2cd8:	e1b07807 	movs	r7, r7, lsl #16
    2cdc:	13a07000 	movne	r7, #0	; 0x0
    2ce0:	03a07001 	moveq	r7, #1	; 0x1
    2ce4:	ebfff78d 	bl	b20 <BtnEnter>
    2ce8:	e3500000 	cmp	r0, #0	; 0x0
    2cec:	0a00000c 	beq	2d24 <.text+0x2d24>
    2cf0:	e3570000 	cmp	r7, #0	; 0x0
    2cf4:	0a000217 	beq	3558 <.text+0x3558>
    2cf8:	e3a00023 	mov	r0, #35	; 0x23
    2cfc:	eb00074f 	bl	4a40 <readEEPROM>
    2d00:	e1a00800 	mov	r0, r0, lsl #16
    2d04:	e3800501 	orr	r0, r0, #4194304	; 0x400000
    2d08:	e1a00820 	mov	r0, r0, lsr #16
    2d0c:	e20010ff 	and	r1, r0, #255	; 0xff
    2d10:	e3a00023 	mov	r0, #35	; 0x23
    2d14:	eb000777 	bl	4af8 <writeEEPROM>
    2d18:	e3a00009 	mov	r0, #9	; 0x9
    2d1c:	ebfff525 	bl	1b8 <getConfigValue>
    2d20:	e1a07000 	mov	r7, r0
    2d24:	e51f4c70 	ldr	r4, [pc, #-3184]	; 20bc <.text+0x20bc>
    2d28:	e51f1ca4 	ldr	r1, [pc, #-3236]	; 208c <.text+0x208c>
    2d2c:	e3a0200b 	mov	r2, #11	; 0xb
    2d30:	e51f0c80 	ldr	r0, [pc, #-3200]	; 20b8 <.text+0x20b8>
    2d34:	eb000ba0 	bl	5bbc <memcpy>
    2d38:	e1a00004 	mov	r0, r4
    2d3c:	e51f1cb4 	ldr	r1, [pc, #-3252]	; 2090 <.text+0x2090>
    2d40:	e3a0200b 	mov	r2, #11	; 0xb
    2d44:	eb000b9c 	bl	5bbc <memcpy>
    2d48:	e3570000 	cmp	r7, #0	; 0x0
    2d4c:	0a0001eb 	beq	3500 <.text+0x3500>
    2d50:	e1a00004 	mov	r0, r4
    2d54:	eb000bb8 	bl	5c3c <strlen>
    2d58:	e51f1ccc 	ldr	r1, [pc, #-3276]	; 2094 <.text+0x2094>
    2d5c:	e0800004 	add	r0, r0, r4
    2d60:	e3a02003 	mov	r2, #3	; 0x3
    2d64:	eb000b94 	bl	5bbc <memcpy>
    2d68:	eafffaf2 	b	1938 <.text+0x1938>
    2d6c:	ebfff7a4 	bl	c04 <BtnForward>
    2d70:	e3500000 	cmp	r0, #0	; 0x0
    2d74:	0a000004 	beq	2d8c <.text+0x2d8c>
    2d78:	e3a00007 	mov	r0, #7	; 0x7
    2d7c:	ebfff50d 	bl	1b8 <getConfigValue>
    2d80:	e3a0c007 	mov	ip, #7	; 0x7
    2d84:	e58dc00c 	str	ip, [sp, #12]
    2d88:	e1a07000 	mov	r7, r0
    2d8c:	ebfff763 	bl	b20 <BtnEnter>
    2d90:	e3500000 	cmp	r0, #0	; 0x0
    2d94:	13a00001 	movne	r0, #1	; 0x1
    2d98:	13a01000 	movne	r1, #0	; 0x0
    2d9c:	158d0008 	strne	r0, [sp, #8]
    2da0:	158d100c 	strne	r1, [sp, #12]
    2da4:	e3a0200f 	mov	r2, #15	; 0xf
    2da8:	e51f1d18 	ldr	r1, [pc, #-3352]	; 2098 <.text+0x2098>
    2dac:	e51f0cfc 	ldr	r0, [pc, #-3324]	; 20b8 <.text+0x20b8>
    2db0:	eb000b81 	bl	5bbc <memcpy>
    2db4:	e51f1d20 	ldr	r1, [pc, #-3360]	; 209c <.text+0x209c>
    2db8:	e3a0200e 	mov	r2, #14	; 0xe
    2dbc:	e51f0d08 	ldr	r0, [pc, #-3336]	; 20bc <.text+0x20bc>
    2dc0:	eb000b7d 	bl	5bbc <memcpy>
    2dc4:	eafffadb 	b	1938 <.text+0x1938>
    2dc8:	eb000853 	bl	4f1c <vscp_rcv_heartbeat>
    2dcc:	eafff95e 	b	134c <.text+0x134c>
    2dd0:	eb000a13 	bl	5624 <vscp_rcv_new_node_online>
    2dd4:	eafff95c 	b	134c <.text+0x134c>
    2dd8:	eb000839 	bl	4ec4 <vscp_rcv_set_nickname>
    2ddc:	eafff95a 	b	134c <.text+0x134c>
    2de0:	eb0008b2 	bl	50b0 <vscp_rcv_drop_nickname>
    2de4:	eafff958 	b	134c <.text+0x134c>
    2de8:	e202300f 	and	r3, r2, #15	; 0xf
    2dec:	e3530002 	cmp	r3, #2	; 0x2
    2df0:	1afff955 	bne	134c <.text+0x134c>
    2df4:	e51fcd5c 	ldr	ip, [pc, #-3420]	; 20a0 <.text+0x20a0>
    2df8:	e51f0d5c 	ldr	r0, [pc, #-3420]	; 20a4 <.text+0x20a4>
    2dfc:	e5dc2006 	ldrb	r2, [ip, #6]
    2e00:	e5d03000 	ldrb	r3, [r0]
    2e04:	e1520003 	cmp	r2, r3
    2e08:	1afff94f 	bne	134c <.text+0x134c>
    2e0c:	e5dc0007 	ldrb	r0, [ip, #7]
    2e10:	e3100080 	tst	r0, #128	; 0x80
    2e14:	1a0001d3 	bne	3568 <.text+0x3568>
    2e18:	ebfff62c 	bl	6d0 <read_app_register>
    2e1c:	eafff94a 	b	134c <.text+0x134c>
    2e20:	e202300f 	and	r3, r2, #15	; 0xf
    2e24:	e3530003 	cmp	r3, #3	; 0x3
    2e28:	1afff947 	bne	134c <.text+0x134c>
    2e2c:	e51f1d94 	ldr	r1, [pc, #-3476]	; 20a0 <.text+0x20a0>
    2e30:	e51fcd94 	ldr	ip, [pc, #-3476]	; 20a4 <.text+0x20a4>
    2e34:	e5d12006 	ldrb	r2, [r1, #6]
    2e38:	e5dc3000 	ldrb	r3, [ip]
    2e3c:	e1520003 	cmp	r2, r3
    2e40:	1afff941 	bne	134c <.text+0x134c>
    2e44:	e5d10007 	ldrb	r0, [r1, #7]
    2e48:	e3100080 	tst	r0, #128	; 0x80
    2e4c:	1a0001c7 	bne	3570 <.text+0x3570>
    2e50:	e5d11008 	ldrb	r1, [r1, #8]
    2e54:	ebfff51e 	bl	2d4 <write_app_register>
    2e58:	eafff93b 	b	134c <.text+0x134c>
    2e5c:	e51f0dc4 	ldr	r0, [pc, #-3524]	; 20a0 <.text+0x20a0>
    2e60:	e51f1dc4 	ldr	r1, [pc, #-3524]	; 20a4 <.text+0x20a4>
    2e64:	e5d02006 	ldrb	r2, [r0, #6]
    2e68:	e5d13000 	ldrb	r3, [r1]
    2e6c:	e1520003 	cmp	r2, r3
    2e70:	e1a04000 	mov	r4, r0
    2e74:	1afff934 	bne	134c <.text+0x134c>
    2e78:	e5d03007 	ldrb	r3, [r0, #7]
    2e7c:	e3530001 	cmp	r3, #1	; 0x1
    2e80:	1afff931 	bne	134c <.text+0x134c>
    2e84:	e3a00011 	mov	r0, #17	; 0x11
    2e88:	eb0006ec 	bl	4a40 <readEEPROM>
    2e8c:	e5d43008 	ldrb	r3, [r4, #8]
    2e90:	e1a00800 	mov	r0, r0, lsl #16
    2e94:	e1530840 	cmp	r3, r0, asr #16
    2e98:	1afff92b 	bne	134c <.text+0x134c>
    2e9c:	e3a00014 	mov	r0, #20	; 0x14
    2ea0:	eb0006e6 	bl	4a40 <readEEPROM>
    2ea4:	e5d43009 	ldrb	r3, [r4, #9]
    2ea8:	e1a00800 	mov	r0, r0, lsl #16
    2eac:	e1530840 	cmp	r3, r0, asr #16
    2eb0:	1afff925 	bne	134c <.text+0x134c>
    2eb4:	e3a00016 	mov	r0, #22	; 0x16
    2eb8:	eb0006e0 	bl	4a40 <readEEPROM>
    2ebc:	e5d4300a 	ldrb	r3, [r4, #10]
    2ec0:	e1a00800 	mov	r0, r0, lsl #16
    2ec4:	e1530840 	cmp	r3, r0, asr #16
    2ec8:	1afff91f 	bne	134c <.text+0x134c>
    2ecc:	e3a00018 	mov	r0, #24	; 0x18
    2ed0:	eb0006da 	bl	4a40 <readEEPROM>
    2ed4:	e5d4300b 	ldrb	r3, [r4, #11]
    2ed8:	e1a00800 	mov	r0, r0, lsl #16
    2edc:	e1530840 	cmp	r3, r0, asr #16
    2ee0:	1afff919 	bne	134c <.text+0x134c>
    2ee4:	e51f2e44 	ldr	r2, [pc, #-3652]	; 20a8 <.text+0x20a8>
    2ee8:	e5d4300c 	ldrb	r3, [r4, #12]
    2eec:	e1d210b0 	ldrh	r1, [r2]
    2ef0:	e1530421 	cmp	r3, r1, lsr #8
    2ef4:	1afff914 	bne	134c <.text+0x134c>
    2ef8:	e5d4200d 	ldrb	r2, [r4, #13]
    2efc:	e20130ff 	and	r3, r1, #255	; 0xff
    2f00:	e1530002 	cmp	r3, r2
    2f04:	1afff910 	bne	134c <.text+0x134c>
    2f08:	e3a00000 	mov	r0, #0	; 0x0
    2f0c:	e3a010ff 	mov	r1, #255	; 0xff
    2f10:	eb0006f8 	bl	4af8 <writeEEPROM>
    2f14:	eafffffe 	b	2f14 <.text+0x2f14>
    2f18:	ebfff595 	bl	574 <getHeaterTemp>
    2f1c:	e51f2e70 	ldr	r2, [pc, #-3696]	; 20b4 <.text+0x20b4>
    2f20:	e5c20000 	strb	r0, [r2]
    2f24:	eb000432 	bl	3ff4 <disableIRQ>
    2f28:	e3a04000 	mov	r4, #0	; 0x0
    2f2c:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
    2f30:	e28cc90a 	add	ip, ip, #163840	; 0x28000
    2f34:	e1a02004 	mov	r2, r4
    2f38:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    2f3c:	e3e05055 	mvn	r5, #85	; 0x55
    2f40:	e3a0e055 	mov	lr, #85	; 0x55
    2f44:	e5c15008 	strb	r5, [r1, #8]
    2f48:	e5c1e008 	strb	lr, [r1, #8]
    2f4c:	e59c3000 	ldr	r3, [ip]
    2f50:	e2822001 	add	r2, r2, #1	; 0x1
    2f54:	e3130802 	tst	r3, #131072	; 0x20000
    2f58:	12844001 	addne	r4, r4, #1	; 0x1
    2f5c:	e3520801 	cmp	r2, #65536	; 0x10000
    2f60:	1afffff7 	bne	2f44 <.text+0x2f44>
    2f64:	eb00040c 	bl	3f9c <restoreIRQ>
    2f68:	e0643284 	rsb	r3, r4, r4, lsl #5
    2f6c:	e0843103 	add	r3, r4, r3, lsl #2
    2f70:	e0833103 	add	r3, r3, r3, lsl #2
    2f74:	e0833103 	add	r3, r3, r3, lsl #2
    2f78:	e3a01902 	mov	r1, #32768	; 0x8000
    2f7c:	e1a03283 	mov	r3, r3, lsl #5
    2f80:	e2811106 	add	r1, r1, #-2147483647	; 0x80000001
    2f84:	e082c391 	umull	ip, r2, r1, r3
    2f88:	e3a01dd1 	mov	r1, #13376	; 0x3440
    2f8c:	e1a027a2 	mov	r2, r2, lsr #15
    2f90:	e2422c7d 	sub	r2, r2, #32000	; 0x7d00
    2f94:	e281112e 	add	r1, r1, #-2147483637	; 0x8000000b
    2f98:	e1a020a2 	mov	r2, r2, lsr #1
    2f9c:	e28116b7 	add	r1, r1, #191889408	; 0xb700000
    2fa0:	e0830291 	umull	r0, r3, r1, r2
    2fa4:	e51f1efc 	ldr	r1, [pc, #-3836]	; 20b0 <.text+0x20b0>
    2fa8:	e1a033a3 	mov	r3, r3, lsr #7
    2fac:	e5c13000 	strb	r3, [r1]
    2fb0:	e28d0088 	add	r0, sp, #136	; 0x88
    2fb4:	eb000afa 	bl	5ba4 <debugWritecrlf>
    2fb8:	e51f0f14 	ldr	r0, [pc, #-3860]	; 20ac <.text+0x20ac>
    2fbc:	eb00032a 	bl	3c6c <uart0Puts>
    2fc0:	e1a00008 	mov	r0, r8
    2fc4:	eb0001a9 	bl	3670 <getElapsedSysTICs>
    2fc8:	e3a0358f 	mov	r3, #599785472	; 0x23c00000
    2fcc:	e2833bd1 	add	r3, r3, #214016	; 0x34400
    2fd0:	e28aa7be 	add	sl, sl, #49807360	; 0x2f80000
    2fd4:	e2833c02 	add	r3, r3, #512	; 0x200
    2fd8:	e28aaa2f 	add	sl, sl, #192512	; 0x2f000
    2fdc:	e1500003 	cmp	r0, r3
    2fe0:	e28aa080 	add	sl, sl, #128	; 0x80
    2fe4:	9afff90f 	bls	1428 <.text+0x1428>
    2fe8:	eb000a73 	bl	59bc <sendHeartBeat>
    2fec:	e51f2f44 	ldr	r2, [pc, #-3908]	; 20b0 <.text+0x20b0>
    2ff0:	e3a00000 	mov	r0, #0	; 0x0
    2ff4:	e5d21000 	ldrb	r1, [r2]
    2ff8:	eb000aa0 	bl	5a80 <sendTempEvent>
    2ffc:	e51f3f50 	ldr	r3, [pc, #-3920]	; 20b4 <.text+0x20b4>
    3000:	e3a00003 	mov	r0, #3	; 0x3
    3004:	e5d31000 	ldrb	r1, [r3]
    3008:	eb000a9c 	bl	5a80 <sendTempEvent>
    300c:	e288858f 	add	r8, r8, #599785472	; 0x23c00000
    3010:	e2888bd1 	add	r8, r8, #214016	; 0x34400
    3014:	e2888c02 	add	r8, r8, #512	; 0x200
    3018:	eafff902 	b	1428 <.text+0x1428>
    301c:	e3a00080 	mov	r0, #128	; 0x80
    3020:	eb000472 	bl	41f0 <LCDSendCommand>
    3024:	e51f0f74 	ldr	r0, [pc, #-3956]	; 20b8 <.text+0x20b8>
    3028:	eb000464 	bl	41c0 <LCDSendTxt>
    302c:	e3a000c0 	mov	r0, #192	; 0xc0
    3030:	eb00046e 	bl	41f0 <LCDSendCommand>
    3034:	e51f0f80 	ldr	r0, [pc, #-3968]	; 20bc <.text+0x20bc>
    3038:	eb000460 	bl	41c0 <LCDSendTxt>
    303c:	e2899726 	add	r9, r9, #9961472	; 0x980000
    3040:	e2899c96 	add	r9, r9, #38400	; 0x9600
    3044:	e2899080 	add	r9, r9, #128	; 0x80
    3048:	eafff8e8 	b	13f0 <.text+0x13f0>
    304c:	e51f1f90 	ldr	r1, [pc, #-3984]	; 20c4 <.text+0x20c4>
    3050:	e5913014 	ldr	r3, [r1, #20]
    3054:	e3530000 	cmp	r3, #0	; 0x0
    3058:	1afff8aa 	bne	1308 <main+0x3d0>
			!button_lock[ BUTTON_FORCE_MOTOR_ON ] )  {
		button_lock[ BUTTON_FORCE_MOTOR_ON ] = TRUE;
    305c:	e5814014 	str	r4, [r1, #20]
		DEBUGWRITECRLF("Button 'Force Motor On'.");
    3060:	e51f0fa8 	ldr	r0, [pc, #-4008]	; 20c0 <.text+0x20c0>
    3064:	eb000ace 	bl	5ba4 <debugWritecrlf>
    3068:	e1a00004 	mov	r0, r4
    306c:	ebfff773 	bl	e40 <ctrTransportMotorA>
    3070:	e1a00004 	mov	r0, r4
    3074:	ebfff752 	bl	dc4 <ctrTransportMotorB>
    3078:	e2444212 	sub	r4, r4, #536870913	; 0x20000001
    307c:	e3e06055 	mvn	r6, #85	; 0x55
    3080:	e3a05055 	mov	r5, #85	; 0x55
    3084:	ea000003 	b	3098 <.text+0x3098>
    3088:	eb0003d9 	bl	3ff4 <disableIRQ>
    308c:	e5c46008 	strb	r6, [r4, #8]
    3090:	e5c45008 	strb	r5, [r4, #8]
    3094:	eb0003c0 	bl	3f9c <restoreIRQ>
    3098:	e3a00005 	mov	r0, #5	; 0x5
    309c:	ebfff63a 	bl	98c <button_state>
    30a0:	e3500000 	cmp	r0, #0	; 0x0
    30a4:	1afffff7 	bne	3088 <.text+0x3088>
    30a8:	eafff896 	b	1308 <main+0x3d0>
    30ac:	e51fcff0 	ldr	ip, [pc, #-4080]	; 20c4 <.text+0x20c4>
    30b0:	e59c3000 	ldr	r3, [ip]
    30b4:	e3530000 	cmp	r3, #0	; 0x0
    30b8:	1afff88d 	bne	12f4 <main+0x3bc>
    30bc:	e59f04b4 	ldr	r0, [pc, #1204]	; 3578 <.text+0x3578>
    30c0:	e5d03000 	ldrb	r3, [r0]
    30c4:	e3530001 	cmp	r3, #1	; 0x1
    30c8:	0afff889 	beq	12f4 <main+0x3bc>
    30cc:	e59f04a8 	ldr	r0, [pc, #1192]	; 357c <.text+0x357c>
    30d0:	eb0002e5 	bl	3c6c <uart0Puts>
    30d4:	e59f34a4 	ldr	r3, [pc, #1188]	; 3580 <.text+0x3580>
    30d8:	e5834000 	str	r4, [r3]
    30dc:	e59f34a0 	ldr	r3, [pc, #1184]	; 3584 <.text+0x3584>
    30e0:	e3e02000 	mvn	r2, #0	; 0x0
    30e4:	e3a010ff 	mov	r1, #255	; 0xff
    30e8:	e5c32000 	strb	r2, [r3]
    30ec:	e1a00004 	mov	r0, r4
    30f0:	eb000680 	bl	4af8 <writeEEPROM>
    30f4:	eb0007b7 	bl	4fd8 <vscp_init>
    30f8:	e59f0488 	ldr	r0, [pc, #1160]	; 3588 <.text+0x3588>
    30fc:	eb000aa8 	bl	5ba4 <debugWritecrlf>
    3100:	e59f0484 	ldr	r0, [pc, #1156]	; 358c <.text+0x358c>
    3104:	eb000aa6 	bl	5ba4 <debugWritecrlf>
    3108:	e3a0c003 	mov	ip, #3	; 0x3
    310c:	e3a00007 	mov	r0, #7	; 0x7
    3110:	e58d4008 	str	r4, [sp, #8]
    3114:	e58dc000 	str	ip, [sp]
    3118:	e58d4004 	str	r4, [sp, #4]
    311c:	e58d000c 	str	r0, [sp, #12]
    3120:	eafff873 	b	12f4 <main+0x3bc>
    3124:	eb000143 	bl	3638 <getSysTICs>
    3128:	e58d0024 	str	r0, [sp, #36]
    312c:	e59f045c 	ldr	r0, [pc, #1116]	; 3590 <.text+0x3590>
    3130:	eb000a9b 	bl	5ba4 <debugWritecrlf>
    3134:	e3a03002 	mov	r3, #2	; 0x2
    3138:	e58d3004 	str	r3, [sp, #4]
    313c:	eafff957 	b	16a0 <.text+0x16a0>
    3140:	e59f0444 	ldr	r0, [pc, #1092]	; 358c <.text+0x358c>
    3144:	eb000a96 	bl	5ba4 <debugWritecrlf>
    3148:	e3a02001 	mov	r2, #1	; 0x1
    314c:	e58d2004 	str	r2, [sp, #4]
    3150:	eafff967 	b	16f4 <.text+0x16f4>
    3154:	e59f1438 	ldr	r1, [pc, #1080]	; 3594 <.text+0x3594>
    3158:	e3a0200c 	mov	r2, #12	; 0xc
    315c:	e59f0434 	ldr	r0, [pc, #1076]	; 3598 <.text+0x3598>
    3160:	eb000a95 	bl	5bbc <memcpy>
    3164:	e59fc430 	ldr	ip, [pc, #1072]	; 359c <.text+0x359c>
    3168:	e3a0200a 	mov	r2, #10	; 0xa
    316c:	e3a03020 	mov	r3, #32	; 0x20
    3170:	e28d1038 	add	r1, sp, #56	; 0x38
    3174:	e5dc0000 	ldrb	r0, [ip]
    3178:	eb00048d 	bl	43b4 <__itoa>
    317c:	e1a01000 	mov	r1, r0
    3180:	e59f0410 	ldr	r0, [pc, #1040]	; 3598 <.text+0x3598>
    3184:	eb000a9b 	bl	5bf8 <strcat>
    3188:	e59f0408 	ldr	r0, [pc, #1032]	; 3598 <.text+0x3598>
    318c:	eb000aaa 	bl	5c3c <strlen>
    3190:	eafff9bd 	b	188c <.text+0x188c>
    3194:	e59f0404 	ldr	r0, [pc, #1028]	; 35a0 <.text+0x35a0>
    3198:	eb000a81 	bl	5ba4 <debugWritecrlf>
    319c:	e3a02006 	mov	r2, #6	; 0x6
    31a0:	e58d2000 	str	r2, [sp]
    31a4:	eafff902 	b	15b4 <.text+0x15b4>
    31a8:	e59d002c 	ldr	r0, [sp, #44]
    31ac:	eb00012f 	bl	3670 <getElapsedSysTICs>
    31b0:	e3a0365f 	mov	r3, #99614720	; 0x5f00000
    31b4:	e2833a5e 	add	r3, r3, #385024	; 0x5e000
    31b8:	e2833c01 	add	r3, r3, #256	; 0x100
    31bc:	e1500003 	cmp	r0, r3
    31c0:	9afffbe0 	bls	2148 <.text+0x2148>
    31c4:	eb00011b 	bl	3638 <getSysTICs>
    31c8:	e58d001c 	str	r0, [sp, #28]
    31cc:	e59f03d0 	ldr	r0, [pc, #976]	; 35a4 <.text+0x35a4>
    31d0:	eb000a73 	bl	5ba4 <debugWritecrlf>
    31d4:	e3a00006 	mov	r0, #6	; 0x6
    31d8:	e59f13c8 	ldr	r1, [pc, #968]	; 35a8 <.text+0x35a8>
    31dc:	e58d0000 	str	r0, [sp]
    31e0:	e3a0002c 	mov	r0, #44	; 0x2c
    31e4:	e5d14000 	ldrb	r4, [r1]
    31e8:	eb000614 	bl	4a40 <readEEPROM>
    31ec:	e1a00800 	mov	r0, r0, lsl #16
    31f0:	e1540840 	cmp	r4, r0, asr #16
    31f4:	bafffbda 	blt	2164 <.text+0x2164>
    31f8:	eb00010e 	bl	3638 <getSysTICs>
    31fc:	e58d0018 	str	r0, [sp, #24]
    3200:	e59f03a4 	ldr	r0, [pc, #932]	; 35ac <.text+0x35ac>
    3204:	eb000a66 	bl	5ba4 <debugWritecrlf>
    3208:	e3a02007 	mov	r2, #7	; 0x7
    320c:	e58d2000 	str	r2, [sp]
    3210:	eafffbd3 	b	2164 <.text+0x2164>
    3214:	e3a00007 	mov	r0, #7	; 0x7
    3218:	e58d0008 	str	r0, [sp, #8]
    321c:	ebfff3e5 	bl	1b8 <getConfigValue>
    3220:	e59d3008 	ldr	r3, [sp, #8]
    3224:	e1a07000 	mov	r7, r0
    3228:	e58d300c 	str	r3, [sp, #12]
    322c:	eafff9bc 	b	1924 <.text+0x1924>
    3230:	e59f1378 	ldr	r1, [pc, #888]	; 35b0 <.text+0x35b0>
    3234:	e3a0200e 	mov	r2, #14	; 0xe
    3238:	e59f0358 	ldr	r0, [pc, #856]	; 3598 <.text+0x3598>
    323c:	eb000a5e 	bl	5bbc <memcpy>
    3240:	e59fc354 	ldr	ip, [pc, #852]	; 359c <.text+0x359c>
    3244:	e3a0200a 	mov	r2, #10	; 0xa
    3248:	e3a03020 	mov	r3, #32	; 0x20
    324c:	e28d1038 	add	r1, sp, #56	; 0x38
    3250:	e5dc0000 	ldrb	r0, [ip]
    3254:	eb000456 	bl	43b4 <__itoa>
    3258:	e1a01000 	mov	r1, r0
    325c:	e59f0334 	ldr	r0, [pc, #820]	; 3598 <.text+0x3598>
    3260:	eb000a64 	bl	5bf8 <strcat>
    3264:	e59f032c 	ldr	r0, [pc, #812]	; 3598 <.text+0x3598>
    3268:	eb000a73 	bl	5c3c <strlen>
    326c:	eafff986 	b	188c <.text+0x188c>
    3270:	eb0000f0 	bl	3638 <getSysTICs>
    3274:	e58d0018 	str	r0, [sp, #24]
    3278:	e59f0334 	ldr	r0, [pc, #820]	; 35b4 <.text+0x35b4>
    327c:	eb000a48 	bl	5ba4 <debugWritecrlf>
    3280:	e3a00007 	mov	r0, #7	; 0x7
    3284:	e58d0000 	str	r0, [sp]
    3288:	eafff8c9 	b	15b4 <.text+0x15b4>
    328c:	eb0000e9 	bl	3638 <getSysTICs>
    3290:	e58d0028 	str	r0, [sp, #40]
    3294:	e59f031c 	ldr	r0, [pc, #796]	; 35b8 <.text+0x35b8>
    3298:	eb000a41 	bl	5ba4 <debugWritecrlf>
    329c:	e3a01005 	mov	r1, #5	; 0x5
    32a0:	e58d1000 	str	r1, [sp]
    32a4:	eafff8aa 	b	1554 <.text+0x1554>
    32a8:	eb0000e2 	bl	3638 <getSysTICs>
    32ac:	e58d002c 	str	r0, [sp, #44]
    32b0:	e59f0304 	ldr	r0, [pc, #772]	; 35bc <.text+0x35bc>
    32b4:	eb000a3a 	bl	5ba4 <debugWritecrlf>
    32b8:	e3a0000a 	mov	r0, #10	; 0xa
    32bc:	e58d0000 	str	r0, [sp]
    32c0:	eafffba0 	b	2148 <.text+0x2148>
    32c4:	eb0000db 	bl	3638 <getSysTICs>
    32c8:	e58d001c 	str	r0, [sp, #28]
    32cc:	eb0000d9 	bl	3638 <getSysTICs>
    32d0:	e58d0014 	str	r0, [sp, #20]
    32d4:	e59f02e4 	ldr	r0, [pc, #740]	; 35c0 <.text+0x35c0>
    32d8:	eb000a31 	bl	5ba4 <debugWritecrlf>
    32dc:	e3a0c004 	mov	ip, #4	; 0x4
    32e0:	e58dc000 	str	ip, [sp]
    32e4:	eafffbe1 	b	2270 <.text+0x2270>
    32e8:	e59f12d4 	ldr	r1, [pc, #724]	; 35c4 <.text+0x35c4>
    32ec:	e5d14000 	ldrb	r4, [r1]
    32f0:	e2844001 	add	r4, r4, #1	; 0x1
    32f4:	e20440ff 	and	r4, r4, #255	; 0xff
    32f8:	e3a00039 	mov	r0, #57	; 0x39
    32fc:	e5c14000 	strb	r4, [r1]
    3300:	eb0005ce 	bl	4a40 <readEEPROM>
    3304:	e1a00800 	mov	r0, r0, lsl #16
    3308:	e1540840 	cmp	r4, r0, asr #16
    330c:	aa000068 	bge	34b4 <.text+0x34b4>
    3310:	eb0000c8 	bl	3638 <getSysTICs>
    3314:	e58d001c 	str	r0, [sp, #28]
    3318:	eb0000c6 	bl	3638 <getSysTICs>
    331c:	e58d0014 	str	r0, [sp, #20]
    3320:	e59f02a0 	ldr	r0, [pc, #672]	; 35c8 <.text+0x35c8>
    3324:	eb000a1e 	bl	5ba4 <debugWritecrlf>
    3328:	e59f0274 	ldr	r0, [pc, #628]	; 35a4 <.text+0x35a4>
    332c:	eb000a1c 	bl	5ba4 <debugWritecrlf>
    3330:	e3a02004 	mov	r2, #4	; 0x4
    3334:	e58d2000 	str	r2, [sp]
    3338:	eafffa5f 	b	1cbc <.text+0x1cbc>
    333c:	eb0000bd 	bl	3638 <getSysTICs>
    3340:	e58d0028 	str	r0, [sp, #40]
    3344:	e59f026c 	ldr	r0, [pc, #620]	; 35b8 <.text+0x35b8>
    3348:	eb000a15 	bl	5ba4 <debugWritecrlf>
    334c:	e3a00005 	mov	r0, #5	; 0x5
    3350:	e58d0000 	str	r0, [sp]
    3354:	eafffa4a 	b	1c84 <.text+0x1c84>
    3358:	e3a03602 	mov	r3, #2097152	; 0x200000
    335c:	e5823014 	str	r3, [r2, #20]
    3360:	e59f0264 	ldr	r0, [pc, #612]	; 35cc <.text+0x35cc>
    3364:	eb000a0e 	bl	5ba4 <debugWritecrlf>
    3368:	eafffacb 	b	1e9c <.text+0x1e9c>
    336c:	e3a00022 	mov	r0, #34	; 0x22
    3370:	eb0005b2 	bl	4a40 <readEEPROM>
    3374:	e3100080 	tst	r0, #128	; 0x80
    3378:	0afffa90 	beq	1dc0 <.text+0x1dc0>
    337c:	eb0000ad 	bl	3638 <getSysTICs>
    3380:	e58d0014 	str	r0, [sp, #20]
    3384:	e59f0244 	ldr	r0, [pc, #580]	; 35d0 <.text+0x35d0>
    3388:	eb000a05 	bl	5ba4 <debugWritecrlf>
    338c:	e3a02004 	mov	r2, #4	; 0x4
    3390:	e58d2000 	str	r2, [sp]
    3394:	eafffa89 	b	1dc0 <.text+0x1dc0>
    3398:	eb0000a6 	bl	3638 <getSysTICs>
    339c:	e58d0018 	str	r0, [sp, #24]
    33a0:	e59f022c 	ldr	r0, [pc, #556]	; 35d4 <.text+0x35d4>
    33a4:	eb0009fe 	bl	5ba4 <debugWritecrlf>
    33a8:	e3a0c007 	mov	ip, #7	; 0x7
    33ac:	e58dc000 	str	ip, [sp]
    33b0:	eafff87b 	b	15a4 <.text+0x15a4>
    33b4:	e3a00000 	mov	r0, #0	; 0x0
    33b8:	ebfff6a0 	bl	e40 <ctrTransportMotorA>
    33bc:	e3a00000 	mov	r0, #0	; 0x0
    33c0:	ebfff67f 	bl	dc4 <ctrTransportMotorB>
    33c4:	eb00009b 	bl	3638 <getSysTICs>
    33c8:	e58d001c 	str	r0, [sp, #28]
    33cc:	e59f0204 	ldr	r0, [pc, #516]	; 35d8 <.text+0x35d8>
    33d0:	eb0009f3 	bl	5ba4 <debugWritecrlf>
    33d4:	e3a02006 	mov	r2, #6	; 0x6
    33d8:	e58d2000 	str	r2, [sp]
    33dc:	eafff869 	b	1588 <.text+0x1588>
    33e0:	eb000094 	bl	3638 <getSysTICs>
    33e4:	e58d0018 	str	r0, [sp, #24]
    33e8:	e59f01ec 	ldr	r0, [pc, #492]	; 35dc <.text+0x35dc>
    33ec:	eb0009ec 	bl	5ba4 <debugWritecrlf>
    33f0:	e59f01b4 	ldr	r0, [pc, #436]	; 35ac <.text+0x35ac>
    33f4:	eb0009ea 	bl	5ba4 <debugWritecrlf>
    33f8:	e3a0c007 	mov	ip, #7	; 0x7
    33fc:	e58dc000 	str	ip, [sp]
    3400:	eafffa1a 	b	1c70 <.text+0x1c70>
    3404:	e59f11d4 	ldr	r1, [pc, #468]	; 35e0 <.text+0x35e0>
    3408:	e3a0200c 	mov	r2, #12	; 0xc
    340c:	e59f0184 	ldr	r0, [pc, #388]	; 3598 <.text+0x3598>
    3410:	eb0009e9 	bl	5bbc <memcpy>
    3414:	e59fc18c 	ldr	ip, [pc, #396]	; 35a8 <.text+0x35a8>
    3418:	e3a03020 	mov	r3, #32	; 0x20
    341c:	e5dc0000 	ldrb	r0, [ip]
    3420:	e3a0200a 	mov	r2, #10	; 0xa
    3424:	e28d1038 	add	r1, sp, #56	; 0x38
    3428:	eb0003e1 	bl	43b4 <__itoa>
    342c:	e1a01000 	mov	r1, r0
    3430:	e59f0160 	ldr	r0, [pc, #352]	; 3598 <.text+0x3598>
    3434:	eb0009ef 	bl	5bf8 <strcat>
    3438:	e59f0158 	ldr	r0, [pc, #344]	; 3598 <.text+0x3598>
    343c:	eb0009fe 	bl	5c3c <strlen>
    3440:	e59f1150 	ldr	r1, [pc, #336]	; 3598 <.text+0x3598>
    3444:	e1a02004 	mov	r2, r4
    3448:	e0800001 	add	r0, r0, r1
    344c:	e59f1190 	ldr	r1, [pc, #400]	; 35e4 <.text+0x35e4>
    3450:	eb0009d9 	bl	5bbc <memcpy>
    3454:	e59f018c 	ldr	r0, [pc, #396]	; 35e8 <.text+0x35e8>
    3458:	eb0005b6 	bl	4b38 <padBuf>
    345c:	e59f0134 	ldr	r0, [pc, #308]	; 3598 <.text+0x3598>
    3460:	eb0005b4 	bl	4b38 <padBuf>
    3464:	e59d0008 	ldr	r0, [sp, #8]
    3468:	e3500007 	cmp	r0, #7	; 0x7
    346c:	1afff776 	bne	124c <main+0x314>
    3470:	eafff911 	b	18bc <.text+0x18bc>
    3474:	e59f1170 	ldr	r1, [pc, #368]	; 35ec <.text+0x35ec>
    3478:	e3a0200d 	mov	r2, #13	; 0xd
    347c:	e59f0114 	ldr	r0, [pc, #276]	; 3598 <.text+0x3598>
    3480:	eb0009cd 	bl	5bbc <memcpy>
    3484:	e59fc110 	ldr	ip, [pc, #272]	; 359c <.text+0x359c>
    3488:	e3a0200a 	mov	r2, #10	; 0xa
    348c:	e3a03020 	mov	r3, #32	; 0x20
    3490:	e28d1038 	add	r1, sp, #56	; 0x38
    3494:	e5dc0000 	ldrb	r0, [ip]
    3498:	eb0003c5 	bl	43b4 <__itoa>
    349c:	e1a01000 	mov	r1, r0
    34a0:	e59f00f0 	ldr	r0, [pc, #240]	; 3598 <.text+0x3598>
    34a4:	eb0009d3 	bl	5bf8 <strcat>
    34a8:	e59f00e8 	ldr	r0, [pc, #232]	; 3598 <.text+0x3598>
    34ac:	eb0009e2 	bl	5c3c <strlen>
    34b0:	eafff8f5 	b	188c <.text+0x188c>
    34b4:	e59f0134 	ldr	r0, [pc, #308]	; 35f0 <.text+0x35f0>
    34b8:	eb0009b9 	bl	5ba4 <debugWritecrlf>
    34bc:	e59f0130 	ldr	r0, [pc, #304]	; 35f4 <.text+0x35f4>
    34c0:	eb0009b7 	bl	5ba4 <debugWritecrlf>
    34c4:	e3a00022 	mov	r0, #34	; 0x22
    34c8:	eb00055c 	bl	4a40 <readEEPROM>
    34cc:	e200107f 	and	r1, r0, #127	; 0x7f
    34d0:	e3a00022 	mov	r0, #34	; 0x22
    34d4:	eb000587 	bl	4af8 <writeEEPROM>
    34d8:	e3a03000 	mov	r3, #0	; 0x0
    34dc:	e58d3000 	str	r3, [sp]
    34e0:	eafff9f5 	b	1cbc <.text+0x1cbc>
    34e4:	e1a00004 	mov	r0, r4
    34e8:	eb0009d3 	bl	5c3c <strlen>
    34ec:	e59f1104 	ldr	r1, [pc, #260]	; 35f8 <.text+0x35f8>
    34f0:	e0800004 	add	r0, r0, r4
    34f4:	e3a02004 	mov	r2, #4	; 0x4
    34f8:	eb0009af 	bl	5bbc <memcpy>
    34fc:	eafff90d 	b	1938 <.text+0x1938>
    3500:	e1a00004 	mov	r0, r4
    3504:	eb0009cc 	bl	5c3c <strlen>
    3508:	e59f10e8 	ldr	r1, [pc, #232]	; 35f8 <.text+0x35f8>
    350c:	e0800004 	add	r0, r0, r4
    3510:	e3a02004 	mov	r2, #4	; 0x4
    3514:	eb0009a8 	bl	5bbc <memcpy>
    3518:	eafff906 	b	1938 <.text+0x1938>
    351c:	e1a00004 	mov	r0, r4
    3520:	eb0009c5 	bl	5c3c <strlen>
    3524:	e59f10cc 	ldr	r1, [pc, #204]	; 35f8 <.text+0x35f8>
    3528:	e0800004 	add	r0, r0, r4
    352c:	e3a02004 	mov	r2, #4	; 0x4
    3530:	eb0009a1 	bl	5bbc <memcpy>
    3534:	eafff8ff 	b	1938 <.text+0x1938>
    3538:	e3a00022 	mov	r0, #34	; 0x22
    353c:	eb00053f 	bl	4a40 <readEEPROM>
    3540:	e200007f 	and	r0, r0, #127	; 0x7f
    3544:	eafffd7a 	b	2b34 <.text+0x2b34>
    3548:	e3a00023 	mov	r0, #35	; 0x23
    354c:	eb00053b 	bl	4a40 <readEEPROM>
    3550:	e200007f 	and	r0, r0, #127	; 0x7f
    3554:	eafffdb6 	b	2c34 <.text+0x2c34>
    3558:	e3a00023 	mov	r0, #35	; 0x23
    355c:	eb000537 	bl	4a40 <readEEPROM>
    3560:	e20000bf 	and	r0, r0, #191	; 0xbf
    3564:	eafffde8 	b	2d0c <.text+0x2d0c>
    3568:	eb0007c3 	bl	547c <vscp_rcv_readreg>
    356c:	eafff776 	b	134c <.text+0x134c>
    3570:	eb00075d 	bl	52ec <vscp_rcv_writereg>
    3574:	eafff774 	b	134c <.text+0x134c>
    3578:	4000074c 	andmi	r0, r0, ip, asr #14
    357c:	00008910 	andeq	r8, r0, r0, lsl r9
    3580:	40000410 	andmi	r0, r0, r0, lsl r4
    3584:	4000074e 	andmi	r0, r0, lr, asr #14
    3588:	000088c8 	andeq	r8, r0, r8, asr #17
    358c:	000088ec 	andeq	r8, r0, ip, ror #17
    3590:	00008d3c 	andeq	r8, r0, ip, lsr sp
    3594:	00008e00 	andeq	r8, r0, r0, lsl #28
    3598:	400004c0 	andmi	r0, r0, r0, asr #9
    359c:	40000429 	andmi	r0, r0, r9, lsr #8
    35a0:	00008b40 	andeq	r8, r0, r0, asr #22
    35a4:	00008c90 	muleq	r0, r0, ip
    35a8:	4000042a 	andmi	r0, r0, sl, lsr #8
    35ac:	00008ba8 	andeq	r8, r0, r8, lsr #23
    35b0:	00008dd8 	ldreqd	r8, [r0], -r8
    35b4:	00008ad0 	ldreqd	r8, [r0], -r0
    35b8:	00008a28 	andeq	r8, r0, r8, lsr #20
    35bc:	00008cfc 	streqd	r8, [r0], -ip
    35c0:	000089b8 	streqh	r8, [r0], -r8
    35c4:	4000042b 	andmi	r0, r0, fp, lsr #8
    35c8:	00008bd0 	ldreqd	r8, [r0], -r0
    35cc:	00008954 	andeq	r8, r0, r4, asr r9
    35d0:	00008c84 	andeq	r8, r0, r4, lsl #25
    35d4:	00008a9c 	muleq	r0, ip, sl
    35d8:	00008a64 	andeq	r8, r0, r4, ror #20
    35dc:	00008b90 	muleq	r0, r0, fp
    35e0:	00008de8 	andeq	r8, r0, r8, ror #27
    35e4:	00008dd4 	ldreqd	r8, [r0], -r4
    35e8:	400004dc 	ldrmid	r0, [r0], -ip
    35ec:	00008e0c 	andeq	r8, r0, ip, lsl #28
    35f0:	00008be4 	andeq	r8, r0, r4, ror #23
    35f4:	00008bfc 	streqd	r8, [r0], -ip
    35f8:	00008860 	andeq	r8, r0, r0, ror #16

000035fc <initSysTime>:
	T0MCR = 0;                            // disable match registers
	T0CCR = 0;                            // disable compare registers
	T0EMR = 0;                            // disable external match register
	T0TCR = TCR_ENABLE;                   // enable timer 0
	sysTICs = 0;
    35fc:	e59f2030 	ldr	r2, [pc, #48]	; 3634 <.text+0x3634>
    3600:	e3a01000 	mov	r1, #0	; 0x0
    3604:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3608:	e5821000 	str	r1, [r2]
    360c:	e2833901 	add	r3, r3, #16384	; 0x4000
    3610:	e3a00002 	mov	r0, #2	; 0x2
    3614:	e3a02001 	mov	r2, #1	; 0x1
    3618:	e5830004 	str	r0, [r3, #4]
    361c:	e583000c 	str	r0, [r3, #12]
    3620:	e5831014 	str	r1, [r3, #20]
    3624:	e5831028 	str	r1, [r3, #40]
    3628:	e583103c 	str	r1, [r3, #60]
    362c:	e5832004 	str	r2, [r3, #4]
}
    3630:	e12fff1e 	bx	lr
    3634:	40000474 	andmi	r0, r0, r4, ror r4

00003638 <getSysTICs>:

/******************************************************************************
 *
 * Function Name: getSysTICs()
 *
 * Description:
 *    This function returns the current syetem time in TICs.
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    The current time in TICs as represented by sysTICs
 *
 *****************************************************************************/
uint32_t getSysTICs(void)
{
	uint32_t now = T0TC;

	sysTICs += (uint32_t)(now - lastT0TC);
    3638:	e59f1028 	ldr	r1, [pc, #40]	; 3668 <.text+0x3668>
    363c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3640:	e59fc024 	ldr	ip, [pc, #36]	; 366c <.text+0x366c>
    3644:	e2833901 	add	r3, r3, #16384	; 0x4000
    3648:	e5932008 	ldr	r2, [r3, #8]
    364c:	e5910000 	ldr	r0, [r1]
    3650:	e59c3000 	ldr	r3, [ip]
    3654:	e0600002 	rsb	r0, r0, r2
    3658:	e0800003 	add	r0, r0, r3
	lastT0TC = now;
    365c:	e5812000 	str	r2, [r1]
    3660:	e58c0000 	str	r0, [ip]
	return sysTICs;
}
    3664:	e12fff1e 	bx	lr
    3668:	40000478 	andmi	r0, r0, r8, ror r4
    366c:	40000474 	andmi	r0, r0, r4, ror r4

00003670 <getElapsedSysTICs>:


/******************************************************************************
 *
 * Function Name: getElapsedSysTICs()
 *
 * Description:
 *    This function then returns the difference in TICs between the
 *    given starting time and the current system time.
 *
 * Calling Sequence: 
 *    The starting time.
 *
 * Returns:
 *    The time difference.
 *
 *****************************************************************************/
uint32_t getElapsedSysTICs(uint32_t startTime)
{
    3670:	e92d4010 	stmdb	sp!, {r4, lr}
    3674:	e1a04000 	mov	r4, r0
	return getSysTICs() - startTime;
    3678:	ebffffee 	bl	3638 <getSysTICs>
}
    367c:	e0640000 	rsb	r0, r4, r0
    3680:	e8bd8010 	ldmia	sp!, {r4, pc}

00003684 <pause>:


/******************************************************************************
 *
 * Function Name: pause()
 *
 * Description:
 *    This function does not return until the specified 'duration' in
 *    TICs has elapsed.
 *
 * Calling Sequence: 
 *    duration - length of time in TICs to wait before returning
 *
 * Returns:
 *    void
 *
 *****************************************************************************/
void pause(uint32_t duration)
{
    3684:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    3688:	e1a05000 	mov	r5, r0
	uint32_t startTime = getSysTICs();
    368c:	ebffffe9 	bl	3638 <getSysTICs>
    3690:	e1a04000 	mov	r4, r0

	while ( getElapsedSysTICs( startTime ) < duration ) ;
    3694:	e1a00004 	mov	r0, r4
    3698:	ebfffff4 	bl	3670 <getElapsedSysTICs>
    369c:	e1500005 	cmp	r0, r5
    36a0:	3afffffb 	bcc	3694 <pause+0x10>
	
}
    36a4:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

000036a8 <uart0Init>:
 *****************************************************************************/
void uart0Init( uint16_t baud, uint8_t mode, uint8_t fmode )
{
  // set port pins for UART0
  PINSEL0 = ( PINSEL0 & ~U0_PINMASK ) | U0_PINSEL;
    36a8:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
    36ac:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    36b0:	e28ce90b 	add	lr, ip, #180224	; 0x2c000
    36b4:	e59e3000 	ldr	r3, [lr]
    36b8:	e3c3300f 	bic	r3, r3, #15	; 0xf

  U0IER = 0x00;                         // disable all interrupts
    36bc:	e28cc903 	add	ip, ip, #49152	; 0xc000
    36c0:	e3a04000 	mov	r4, #0	; 0x0
    36c4:	e3833005 	orr	r3, r3, #5	; 0x5
    36c8:	e58e3000 	str	r3, [lr]
    36cc:	e1a00800 	mov	r0, r0, lsl #16
    36d0:	e5cc4004 	strb	r4, [ip, #4]
    36d4:	e1a0e820 	mov	lr, r0, lsr #16
  U0IIR;                                // clear interrupt ID
    36d8:	e5dc3008 	ldrb	r3, [ip, #8]
    36dc:	e20220ff 	and	r2, r2, #255	; 0xff
  U0RBR;                                // clear receive register
  U0LSR;                                // clear line status register

  // set the baudrate
  U0LCR = ULCR_DLAB_ENABLE;             // select divisor latches 
  U0DLL = (uint8_t)baud;                // set for baud low byte
  U0DLM = (uint8_t)(baud >> 8);         // set for baud high byte

  // set the number of characters and other
  // user specified operating parameters
  U0LCR = (mode & ~ULCR_DLAB_ENABLE);
    36e0:	e201107f 	and	r1, r1, #127	; 0x7f
    36e4:	e3e0307f 	mvn	r3, #127	; 0x7f
    36e8:	e20ee0ff 	and	lr, lr, #255	; 0xff
    36ec:	e1a00c20 	mov	r0, r0, lsr #24
    36f0:	e5dc5000 	ldrb	r5, [ip]
    36f4:	e5dc6014 	ldrb	r6, [ip, #20]
    36f8:	e5cc300c 	strb	r3, [ip, #12]
    36fc:	e5cce000 	strb	lr, [ip]
    3700:	e5cc0004 	strb	r0, [ip, #4]
    3704:	e5cc100c 	strb	r1, [ip, #12]
  U0FCR = fmode;
    3708:	e5cc2008 	strb	r2, [ip, #8]

#if defined(UART0_TX_INT_MODE) || defined(UART0_RX_INT_MODE)
  // initialize the interrupt vector
  VICIntSelect &= ~VIC_BIT (VIC_UART0 );	// UART0 selected as IRQ
  VICIntEnable = VIC_BIT( VIC_UART0 );    	// UART0 interrupt enabled
  VICVectCntl0 = VIC_ENABLE | VIC_UART0;
  VICVectAddr0 = (uint32_t)uart0ISR;    	// address of the ISR

#ifdef UART0_TX_INT_MODE
  // initialize the transmit data queue
  uart0_tx_extract_idx = uart0_tx_insert_idx = 0;
  uart0_tx_running = 0;
#endif

#ifdef UART0_RX_INT_MODE
  // initialize the receive data queue
  uart0_rx_extract_idx = uart0_rx_insert_idx = 0;
    370c:	e59f2054 	ldr	r2, [pc, #84]	; 3768 <.text+0x3768>
    3710:	e3e01000 	mvn	r1, #0	; 0x0
    3714:	e5113ff3 	ldr	r3, [r1, #-4083]
    3718:	e1c240b0 	strh	r4, [r2]
    371c:	e59f2048 	ldr	r2, [pc, #72]	; 376c <.text+0x376c>
    3720:	e3c33040 	bic	r3, r3, #64	; 0x40
    3724:	e1c240b0 	strh	r4, [r2]
    3728:	e59f2040 	ldr	r2, [pc, #64]	; 3770 <.text+0x3770>
    372c:	e5013ff3 	str	r3, [r1, #-4083]
    3730:	e3a03040 	mov	r3, #64	; 0x40
    3734:	e5013fef 	str	r3, [r1, #-4079]
    3738:	e1c240b0 	strh	r4, [r2]
    373c:	e243301a 	sub	r3, r3, #26	; 0x1a
    3740:	e59f202c 	ldr	r2, [pc, #44]	; 3774 <.text+0x3774>
    3744:	e5013dff 	str	r3, [r1, #-3583]

  // enable receiver interrupts
  U0IER = UIER_ERBFI;
    3748:	e2433025 	sub	r3, r3, #37	; 0x25
    374c:	e5012eff 	str	r2, [r1, #-3839]
    3750:	e5cc3004 	strb	r3, [ip, #4]
    3754:	e59f201c 	ldr	r2, [pc, #28]	; 3778 <.text+0x3778>
    3758:	e59f301c 	ldr	r3, [pc, #28]	; 377c <.text+0x377c>
    375c:	e5824000 	str	r4, [r2]
    3760:	e1c340b0 	strh	r4, [r3]
#endif
#endif
}
    3764:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    3768:	4000070a 	andmi	r0, r0, sl, lsl #14
    376c:	40000572 	andmi	r0, r0, r2, ror r5
    3770:	4000067c 	andmi	r0, r0, ip, ror r6
    3774:	00003ca4 	andeq	r3, r0, r4, lsr #25
    3778:	40000684 	andmi	r0, r0, r4, lsl #13
    377c:	40000674 	andmi	r0, r0, r4, ror r6

00003780 <uart0Space>:

/******************************************************************************
 *
 * Function Name: uart0Putch()
 *
 * Description:  
 *    This function puts a character into the UART output queue for
 *    transmission.
 *
 * Calling Sequence: 
 *    character to be transmitted
 *
 * Returns:
 *    ch on success, -1 on error (queue full)
 *
 *****************************************************************************/
int uart0Putch(int ch)
{
#ifdef UART0_TX_INT_MODE
  uint16_t temp;
  unsigned cpsr;

  temp = (uart0_tx_insert_idx + 1) % UART0_TX_BUFFER_SIZE;

  if (temp == uart0_tx_extract_idx)
    return -1;                          // no room

  cpsr = disableIRQ();                  // disable global interrupts
  U0IER &= ~UIER_ETBEI;                 // disable TX interrupts
  restoreIRQ(cpsr);                     // restore global interrupts

  // check if in process of sending data
  if (uart0_tx_running)
    {
    // add to queue
    uart0_tx_buffer[uart0_tx_insert_idx] = (uint8_t)ch;
    uart0_tx_insert_idx = temp;
    }
  else
    {
    // set running flag and write to output register
    uart0_tx_running = 1;
    U0THR = (uint8_t)ch;
    }

  cpsr = disableIRQ();                  // disable global interrupts
  U0IER |= UIER_ETBEI;                  // enable TX interrupts
  restoreIRQ(cpsr);                     // restore global interrupts
#else
  while (!(U0LSR & ULSR_THRE))          // wait for TX buffer to empty
    continue;                           // also either WDOG() or swap()

  U0THR = (uint8_t)ch;
#endif
  return (uint8_t)ch;
}

/******************************************************************************
 *
 * Function Name: uart0Space()
 *
 * Description:  
 *    This function gets the available space in the transmit queue
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    available space in the transmit queue
 *
 *****************************************************************************/
uint16_t uart0Space(void)
{
#ifdef UART0_TX_INT_MODE
  int space;

  if ((space = (uart0_tx_extract_idx - uart0_tx_insert_idx)) <= 0)
    3780:	e59f3024 	ldr	r3, [pc, #36]	; 37ac <.text+0x37ac>
    3784:	e59f2024 	ldr	r2, [pc, #36]	; 37b0 <.text+0x37b0>
    3788:	e1d310b0 	ldrh	r1, [r3]
    378c:	e1d230b0 	ldrh	r3, [r2]
    3790:	e0630001 	rsb	r0, r3, r1
    3794:	e3500000 	cmp	r0, #0	; 0x0
    space += UART0_TX_BUFFER_SIZE;
    3798:	d2800080 	addle	r0, r0, #128	; 0x80
    379c:	e2400001 	sub	r0, r0, #1	; 0x1
    37a0:	e1a00800 	mov	r0, r0, lsl #16

  return (uint16_t)(space - 1);
#else
  return USHRT_MAX;
#endif
}
    37a4:	e1a00820 	mov	r0, r0, lsr #16
    37a8:	e12fff1e 	bx	lr
    37ac:	4000067c 	andmi	r0, r0, ip, ror r6
    37b0:	40000572 	andmi	r0, r0, r2, ror r5

000037b4 <uart0TxEmpty>:

/******************************************************************************
 *
 * Function Name: uart0Puts()
 *
 * Description:  
 *    This function writes a NULL terminated 'string' to the UART output
 *    queue, returning a pointer to the next character to be written.
 *
 * Calling Sequence: 
 *    address of the string
 *
 * Returns:
 *    a pointer to the next character to be written
 *    (\0 if full string is written)
 *
 *****************************************************************************/
const char *uart0Puts(const char *string)
{
	register char ch;

	while ( ( ch = *string ) && ( uart0Putch( ch ) >= 0 ) ) {
		string++;
	}
	
	return string;
}

/******************************************************************************
 *
 * Function Name: uart0Write()
 *
 * Description:  
 *    This function writes 'count' characters from 'buffer' to the UART
 *    output queue.
 *
 * Calling Sequence: 
 *    
 *
 * Returns:
 *    0 on success, -1 if insufficient room, -2 on error
 *    NOTE: if insufficient room, no characters are written.
 *
 *****************************************************************************/
int uart0Write(const char *buffer, uint16_t count)
{
#ifdef UART0_TX_INT_MODE
  if (count > uart0Space())
    return -1;
#endif
  while (count && (uart0Putch(*buffer++) >= 0))
    count--;

  return (count ? -2 : 0);
}

/******************************************************************************
 *
 * Function Name: uart0TxEmpty()
 *
 * Description:
 *    This function returns the status of the UART transmit data
 *    registers.
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    FALSE - either the tx holding or shift register is not empty
 *   !FALSE - if both the tx holding & shift registers are empty
 *
 *****************************************************************************/
int uart0TxEmpty(void)
{
  return (U0LSR & (ULSR_THRE | ULSR_TEMT)) == (ULSR_THRE | ULSR_TEMT);
    37b4:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    37b8:	e2833903 	add	r3, r3, #49152	; 0xc000
    37bc:	e5d30014 	ldrb	r0, [r3, #20]
    37c0:	e2000060 	and	r0, r0, #96	; 0x60
}
    37c4:	e3500060 	cmp	r0, #96	; 0x60
    37c8:	13a00000 	movne	r0, #0	; 0x0
    37cc:	03a00001 	moveq	r0, #1	; 0x1
    37d0:	e12fff1e 	bx	lr

000037d4 <uart0Getch>:

/******************************************************************************
 *
 * Function Name: uart0TxFlush()
 *
 * Description:  
 *    This function removes all characters from the UART transmit queue
 *    (without transmitting them).
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    void
 *
 *****************************************************************************/
void uart0TxFlush(void)
{
#ifdef UART0_TX_INT_MODE
  unsigned cpsr;

  U0FCR |= UFCR_TX_FIFO_RESET;          // clear the TX fifo

  // "Empty" the transmit buffer.
  cpsr = disableIRQ();                  // disable global interrupts
  U0IER &= ~UIER_ETBEI;                 // disable TX interrupts
  restoreIRQ(cpsr);                     // restore global interrupts
  uart0_tx_insert_idx = uart0_tx_extract_idx = 0;
#else
  U0FCR |= UFCR_TX_FIFO_RESET;          // clear the TX fifo
#endif
}

/******************************************************************************
 *
 * Function Name: uart0Getch()
 *
 * Description:  
 *    This function gets a character from the UART receive queue
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    character on success, -1 if no character is available
 *
 *****************************************************************************/
int uart0Getch(void)
{
#ifdef UART0_RX_INT_MODE
  uint8_t ch;

  if (uart0_rx_insert_idx == uart0_rx_extract_idx) // check if character is available
    37d4:	e59fc02c 	ldr	ip, [pc, #44]	; 3808 <.text+0x3808>
    37d8:	e59f302c 	ldr	r3, [pc, #44]	; 380c <.text+0x380c>
    37dc:	e1dc10b0 	ldrh	r1, [ip]
    37e0:	e1d320b0 	ldrh	r2, [r3]
    return -1;

  ch = uart0_rx_buffer[uart0_rx_extract_idx++]; // get character, bump pointer
  uart0_rx_extract_idx %= UART0_RX_BUFFER_SIZE; // limit the pointer
    37e4:	e2813001 	add	r3, r1, #1	; 0x1
    37e8:	e1520001 	cmp	r2, r1
    37ec:	e203307f 	and	r3, r3, #127	; 0x7f
    37f0:	11cc30b0 	strneh	r3, [ip]
    37f4:	159f3014 	ldrne	r3, [pc, #20]	; 3810 <.text+0x3810>
    37f8:	17d32001 	ldrneb	r2, [r3, r1]
    37fc:	e3e00000 	mvn	r0, #0	; 0x0
  return ch;
    3800:	11a00002 	movne	r0, r2
#else
  if (U0LSR & ULSR_RDR)                 // check if character is available
    return U0RBR;                       // return character

  return -1;
#endif
}
    3804:	e12fff1e 	bx	lr
    3808:	4000070a 	andmi	r0, r0, sl, lsl #14
    380c:	40000674 	andmi	r0, r0, r4, ror r6
    3810:	40000688 	andmi	r0, r0, r8, lsl #13

00003814 <uart1Init>:

#endif


#if UART1_SUPPORT

/******************************************************************************
 *
 * Function Name: uart1Init()
 *
 * Description:  
 *    This function initializes the UART for async mode
 *
 * Calling Sequence: 
 *    baudrate divisor - use UART_BAUD macro
 *    mode - see typical modes (uart.h)
 *    fmode - see typical fmodes (uart.h)
 *
 * Returns:
 *    void
 *
 * NOTE: uart1Init(UART_BAUD(9600), UART_8N1, UART_FIFO_8);
 *
 *****************************************************************************/
void uart1Init(uint16_t baud, uint8_t mode, uint8_t fmode)
{
  // set port pins for UART1
  PINSEL0 = (PINSEL0 & ~U1_PINMASK) | U1_PINSEL;
    3814:	e3a0c20e 	mov	ip, #-536870912	; 0xe0000000
    3818:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    381c:	e28ce90b 	add	lr, ip, #180224	; 0x2c000
    3820:	e59e3000 	ldr	r3, [lr]
    3824:	e3c3380f 	bic	r3, r3, #983040	; 0xf0000

  U1IER = 0x00;                         // disable all interrupts
    3828:	e28cc801 	add	ip, ip, #65536	; 0x10000
    382c:	e3a04000 	mov	r4, #0	; 0x0
    3830:	e3833805 	orr	r3, r3, #327680	; 0x50000
    3834:	e58e3000 	str	r3, [lr]
    3838:	e1a00800 	mov	r0, r0, lsl #16
    383c:	e5cc4004 	strb	r4, [ip, #4]
    3840:	e1a0e820 	mov	lr, r0, lsr #16
  U1IIR;                                // clear interrupt ID
    3844:	e5dc3008 	ldrb	r3, [ip, #8]
    3848:	e20220ff 	and	r2, r2, #255	; 0xff
  U1RBR;                                // clear receive register
  U1LSR;                                // clear line status register

  // set the baudrate
  U1LCR = ULCR_DLAB_ENABLE;             // select divisor latches 
  U1DLL = (uint8_t)baud;                // set for baud low byte
  U1DLM = (uint8_t)(baud >> 8);         // set for baud high byte

  // set the number of characters and other
  // user specified operating parameters
  U1LCR = (mode & ~ULCR_DLAB_ENABLE);
    384c:	e201107f 	and	r1, r1, #127	; 0x7f
    3850:	e3e0307f 	mvn	r3, #127	; 0x7f
    3854:	e20ee0ff 	and	lr, lr, #255	; 0xff
    3858:	e1a00c20 	mov	r0, r0, lsr #24
    385c:	e5dc5000 	ldrb	r5, [ip]
    3860:	e5dc6014 	ldrb	r6, [ip, #20]
    3864:	e5cc300c 	strb	r3, [ip, #12]
    3868:	e5cce000 	strb	lr, [ip]
    386c:	e5cc0004 	strb	r0, [ip, #4]
    3870:	e5cc100c 	strb	r1, [ip, #12]
  U1FCR = fmode;
    3874:	e5cc2008 	strb	r2, [ip, #8]

#if defined(UART1_TX_INT_MODE) || defined(UART1_RX_INT_MODE)
  // initialize the interrupt vector
  VICIntSelect &= ~VIC_BIT(VIC_UART1);  // UART1 selected as IRQ
    3878:	e3e01000 	mvn	r1, #0	; 0x0
    387c:	e5113ff3 	ldr	r3, [r1, #-4083]
  VICIntEnable = VIC_BIT(VIC_UART1);    // UART1 interrupt enabled
    3880:	e3a02080 	mov	r2, #128	; 0x80
    3884:	e3c33080 	bic	r3, r3, #128	; 0x80
    3888:	e5013ff3 	str	r3, [r1, #-4083]
    388c:	e5012fef 	str	r2, [r1, #-4079]
  VICVectCntl1 = VIC_ENABLE | VIC_UART1;
  VICVectAddr1 = (uint32_t)uart1ISR;    // address of the ISR
    3890:	e59f2040 	ldr	r2, [pc, #64]	; 38d8 <.text+0x38d8>
    3894:	e3a03027 	mov	r3, #39	; 0x27
    3898:	e5013dfb 	str	r3, [r1, #-3579]
    389c:	e5012efb 	str	r2, [r1, #-3835]

#ifdef UART1_TX_INT_MODE
  uart1_tx_extract_idx = uart1_tx_insert_idx = 0;
  uart1_tx_running = 0;
#endif

#ifdef UART1_RX_INT_MODE
  // initialize data queues
  uart1_rx_extract_idx = uart1_rx_insert_idx = 0;

  // enable receiver interrupts
  U1IER |= UIER_ERBFI;
    38a0:	e5dc3004 	ldrb	r3, [ip, #4]
    38a4:	e59f2030 	ldr	r2, [pc, #48]	; 38dc <.text+0x38dc>
    38a8:	e3833001 	orr	r3, r3, #1	; 0x1
    38ac:	e1c240b0 	strh	r4, [r2]
    38b0:	e5cc3004 	strb	r3, [ip, #4]
    38b4:	e59f2024 	ldr	r2, [pc, #36]	; 38e0 <.text+0x38e0>
    38b8:	e59f3024 	ldr	r3, [pc, #36]	; 38e4 <.text+0x38e4>
    38bc:	e1c240b0 	strh	r4, [r2]
    38c0:	e1c340b0 	strh	r4, [r3]
    38c4:	e59f201c 	ldr	r2, [pc, #28]	; 38e8 <.text+0x38e8>
    38c8:	e59f301c 	ldr	r3, [pc, #28]	; 38ec <.text+0x38ec>
    38cc:	e5824000 	str	r4, [r2]
    38d0:	e1c340b0 	strh	r4, [r3]
#endif
#endif
}
    38d4:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    38d8:	00003e1c 	andeq	r3, r0, ip, lsl lr
    38dc:	40000680 	andmi	r0, r0, r0, lsl #13
    38e0:	4000067e 	andmi	r0, r0, lr, ror r6
    38e4:	40000708 	andmi	r0, r0, r8, lsl #14
    38e8:	40000678 	andmi	r0, r0, r8, ror r6
    38ec:	40000570 	andmi	r0, r0, r0, ror r5

000038f0 <uart1Space>:

/******************************************************************************
 *
 * Function Name: uart1Putch()
 *
 * Description:  
 *    This function puts a character into the UART output queue for
 *    transmission.
 *
 * Calling Sequence: 
 *    ch - character to be transmitted
 *
 * Returns:
 *    ch on success, -1 on error (queue full)
 *
 *****************************************************************************/
int uart1Putch(int ch)
{
#ifdef UART1_TX_INT_MODE
  uint16_t temp;
  unsigned cpsr;

  temp = (uart1_tx_insert_idx + 1) % UART1_TX_BUFFER_SIZE;

  if (temp == uart1_tx_extract_idx)
    return -1;                          // no room

  cpsr = disableIRQ();                  // disable global interrupts
  U1IER &= ~UIER_ETBEI;                 // disable TX interrupts
  restoreIRQ(cpsr);                     // restore global interrupts

  // check if in process of sending data
  if (uart1_tx_running)
    {
    // add to queue
    uart1_tx_buffer[uart1_tx_insert_idx] = (uint8_t)ch;
    uart1_tx_insert_idx = temp;
    }
  else
    {
    // set running flag and write to output register
    uart1_tx_running = 1;
    U1THR = (uint8_t)ch;
    }

  cpsr = disableIRQ();                  // disable global interrupts
  U1IER |= UIER_ETBEI;                  // enable TX interrupts
  restoreIRQ(cpsr);                     // restore global interrupts
#else
  while (!(U1LSR & ULSR_THRE))          // wait for TX buffer to empty
    continue;                           // also either WDOG() or swap()

  U1THR = (uint8_t)ch;
#endif
  return (uint8_t)ch;
}

/******************************************************************************
 *
 * Function Name: uart1Space()
 *
 * Description:  
 *    This function gets the available space in the transmit queue
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    available space in the transmit queue
 *
 *****************************************************************************/
uint16_t uart1Space(void)
{
#ifdef UART1_TX_INT_MODE
  int space;

  if ((space = (uart1_tx_extract_idx - uart1_tx_insert_idx)) <= 0)
    38f0:	e59f3024 	ldr	r3, [pc, #36]	; 391c <.text+0x391c>
    38f4:	e59f2024 	ldr	r2, [pc, #36]	; 3920 <.text+0x3920>
    38f8:	e1d310b0 	ldrh	r1, [r3]
    38fc:	e1d230b0 	ldrh	r3, [r2]
    3900:	e0630001 	rsb	r0, r3, r1
    3904:	e3500000 	cmp	r0, #0	; 0x0
    space += UART1_TX_BUFFER_SIZE;
    3908:	d2800080 	addle	r0, r0, #128	; 0x80
    390c:	e2400001 	sub	r0, r0, #1	; 0x1
    3910:	e1a00800 	mov	r0, r0, lsl #16

  return (uint16_t)(space - 1);
#else
  return USHRT_MAX;
#endif
}
    3914:	e1a00820 	mov	r0, r0, lsr #16
    3918:	e12fff1e 	bx	lr
    391c:	40000708 	andmi	r0, r0, r8, lsl #14
    3920:	4000067e 	andmi	r0, r0, lr, ror r6

00003924 <uart1TxEmpty>:

/******************************************************************************
 *
 * Function Name: uart1Puts()
 *
 * Description:  
 *    This function writes a NULL terminated 'string' to the UART output
 *    queue, returning a pointer to the next character to be written.
 *
 * Calling Sequence: 
 *    address of the string
 *
 * Returns:
 *    a pointer to the next character to be written
 *    (\0 if full string is written)
 *
 *****************************************************************************/
const char *uart1Puts(const char *string)
{
  register char ch;

  while ((ch = *string) && (uart1Putch(ch) >= 0))
    string++;

  return string;
}

/******************************************************************************
 *
 * Function Name: uart1Write()
 *
 * Description:  
 *    This function writes 'count' characters from 'buffer' to the UART
 *    output queue.
 *
 * Calling Sequence: 
 *    
 *
 * Returns:
 *    0 on success, -1 if insufficient room, -2 on error
 *    NOTE: if insufficient room, no characters are written.
 *
 *****************************************************************************/
int uart1Write(const char *buffer, uint16_t count)
{
#ifdef UART1_TX_INT_MODE
  if (count > uart1Space())
    return -1;
#endif
  while (count && (uart1Putch(*buffer++) >= 0))
    count--;

  return (count ? -2 : 0);
}

/******************************************************************************
 *
 * Function Name: uart1TxEmpty()
 *
 * Description:
 *    This function returns the status of the UART transmit data
 *    registers.
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    FALSE - either the tx holding or shift register is not empty
 *   !FALSE - if both the tx holding & shift registers are empty
 *
 *****************************************************************************/
int uart1TxEmpty(void)
{
  return (U1LSR & (ULSR_THRE | ULSR_TEMT)) == (ULSR_THRE | ULSR_TEMT);
    3924:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    3928:	e2833801 	add	r3, r3, #65536	; 0x10000
    392c:	e5d30014 	ldrb	r0, [r3, #20]
    3930:	e2000060 	and	r0, r0, #96	; 0x60
}
    3934:	e3500060 	cmp	r0, #96	; 0x60
    3938:	13a00000 	movne	r0, #0	; 0x0
    393c:	03a00001 	moveq	r0, #1	; 0x1
    3940:	e12fff1e 	bx	lr

00003944 <uart1Getch>:

/******************************************************************************
 *
 * Function Name: uart1TxFlush()
 *
 * Description:  
 *    This function removes all characters from the UART transmit queue
 *    (without transmitting them).
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    void
 *
 *****************************************************************************/
void uart1TxFlush(void)
{
#ifdef UART1_TX_INT_MODE
  unsigned cpsr;

  U1FCR |= UFCR_TX_FIFO_RESET;          // clear the TX fifo

  // "Empty" the transmit buffer.
  cpsr = disableIRQ();                  // disable global interrupts
  U1IER &= ~UIER_ETBEI;                 // disable TX interrupts
  restoreIRQ(cpsr);                     // restore global interrupts
  uart1_tx_insert_idx = uart1_tx_extract_idx = 0;
#else
  U1FCR |= UFCR_TX_FIFO_RESET;          // clear the TX fifo
#endif
}

/******************************************************************************
 *
 * Function Name: uart1Getch()
 *
 * Description:  
 *    This function gets a character from the UART receive queue
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    character on success, -1 if no character is available
 *
 *****************************************************************************/
int uart1Getch(void)
{
#ifdef UART1_RX_INT_MODE
  uint8_t ch;

  if (uart1_rx_insert_idx == uart1_rx_extract_idx) // check if character is available
    3944:	e59fc02c 	ldr	ip, [pc, #44]	; 3978 <.text+0x3978>
    3948:	e59f302c 	ldr	r3, [pc, #44]	; 397c <.text+0x397c>
    394c:	e1dc10b0 	ldrh	r1, [ip]
    3950:	e1d320b0 	ldrh	r2, [r3]
    return -1;

  ch = uart1_rx_buffer[uart1_rx_extract_idx++]; // get character, bump pointer
  uart1_rx_extract_idx %= UART1_RX_BUFFER_SIZE; // limit the pointer
    3954:	e2813001 	add	r3, r1, #1	; 0x1
    3958:	e1520001 	cmp	r2, r1
    395c:	e203307f 	and	r3, r3, #127	; 0x7f
    3960:	11cc30b0 	strneh	r3, [ip]
    3964:	159f3014 	ldrne	r3, [pc, #20]	; 3980 <.text+0x3980>
    3968:	17d32001 	ldrneb	r2, [r3, r1]
    396c:	e3e00000 	mvn	r0, #0	; 0x0
  return ch;
    3970:	11a00002 	movne	r0, r2
#else
  if (U1LSR & ULSR_RDR)                 // check if character is available
    return U1RBR;                       // return character

  return -1;
#endif
}
    3974:	e12fff1e 	bx	lr
    3978:	40000680 	andmi	r0, r0, r0, lsl #13
    397c:	40000570 	andmi	r0, r0, r0, ror r5
    3980:	400005f4 	strmid	r0, [r0], -r4

00003984 <uart1TxFlush>:
    3984:	e92d4010 	stmdb	sp!, {r4, lr}
    3988:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    398c:	e2844801 	add	r4, r4, #65536	; 0x10000
    3990:	e5d43008 	ldrb	r3, [r4, #8]
    3994:	e3833004 	orr	r3, r3, #4	; 0x4
    3998:	e5c43008 	strb	r3, [r4, #8]
    399c:	eb000194 	bl	3ff4 <disableIRQ>
    39a0:	e5d43004 	ldrb	r3, [r4, #4]
    39a4:	e20330fd 	and	r3, r3, #253	; 0xfd
    39a8:	e5c43004 	strb	r3, [r4, #4]
    39ac:	eb00017a 	bl	3f9c <restoreIRQ>
    39b0:	e59f3010 	ldr	r3, [pc, #16]	; 39c8 <.text+0x39c8>
    39b4:	e59f2010 	ldr	r2, [pc, #16]	; 39cc <.text+0x39cc>
    39b8:	e3a01000 	mov	r1, #0	; 0x0
    39bc:	e1c310b0 	strh	r1, [r3]
    39c0:	e1c210b0 	strh	r1, [r2]
    39c4:	e8bd8010 	ldmia	sp!, {r4, pc}
    39c8:	4000067e 	andmi	r0, r0, lr, ror r6
    39cc:	40000708 	andmi	r0, r0, r8, lsl #14

000039d0 <uart1Putch>:
    39d0:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d4:	e59f8094 	ldr	r8, [pc, #148]	; 3a70 <.text+0x3a70>
    39d8:	e59f2094 	ldr	r2, [pc, #148]	; 3a74 <.text+0x3a74>
    39dc:	e1d830b0 	ldrh	r3, [r8]
    39e0:	e1d210b0 	ldrh	r1, [r2]
    39e4:	e2833001 	add	r3, r3, #1	; 0x1
    39e8:	e203707f 	and	r7, r3, #127	; 0x7f
    39ec:	e3a0520e 	mov	r5, #-536870912	; 0xe0000000
    39f0:	e1510007 	cmp	r1, r7
    39f4:	e2855801 	add	r5, r5, #65536	; 0x10000
    39f8:	e3e03000 	mvn	r3, #0	; 0x0
    39fc:	e1a06000 	mov	r6, r0
    3a00:	0a000018 	beq	3a68 <uart1Putch+0x98>
    3a04:	eb00017a 	bl	3ff4 <disableIRQ>
    3a08:	e5d53004 	ldrb	r3, [r5, #4]
    3a0c:	e20330fd 	and	r3, r3, #253	; 0xfd
    3a10:	e5c53004 	strb	r3, [r5, #4]
    3a14:	eb000160 	bl	3f9c <restoreIRQ>
    3a18:	e59f2058 	ldr	r2, [pc, #88]	; 3a78 <.text+0x3a78>
    3a1c:	e5923000 	ldr	r3, [r2]
    3a20:	e3530000 	cmp	r3, #0	; 0x0
    3a24:	11d820b0 	ldrneh	r2, [r8]
    3a28:	159f304c 	ldrne	r3, [pc, #76]	; 3a7c <.text+0x3a7c>
    3a2c:	e20640ff 	and	r4, r6, #255	; 0xff
    3a30:	03a03001 	moveq	r3, #1	; 0x1
    3a34:	020640ff 	andeq	r4, r6, #255	; 0xff
    3a38:	05823000 	streq	r3, [r2]
    3a3c:	17c34002 	strneb	r4, [r3, r2]
    3a40:	05c54000 	streqb	r4, [r5]
    3a44:	11c870b0 	strneh	r7, [r8]
    3a48:	eb000169 	bl	3ff4 <disableIRQ>
    3a4c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    3a50:	e2822801 	add	r2, r2, #65536	; 0x10000
    3a54:	e5d23004 	ldrb	r3, [r2, #4]
    3a58:	e3833002 	orr	r3, r3, #2	; 0x2
    3a5c:	e5c23004 	strb	r3, [r2, #4]
    3a60:	eb00014d 	bl	3f9c <restoreIRQ>
    3a64:	e1a03004 	mov	r3, r4
    3a68:	e1a00003 	mov	r0, r3
    3a6c:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
    3a70:	4000067e 	andmi	r0, r0, lr, ror r6
    3a74:	40000708 	andmi	r0, r0, r8, lsl #14
    3a78:	40000678 	andmi	r0, r0, r8, ror r6
    3a7c:	40000574 	andmi	r0, r0, r4, ror r5

00003a80 <uart1Write>:
    3a80:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    3a84:	e1a01801 	mov	r1, r1, lsl #16
    3a88:	e1a04821 	mov	r4, r1, lsr #16
    3a8c:	e1a05000 	mov	r5, r0
    3a90:	ebffff96 	bl	38f0 <uart1Space>
    3a94:	e1500004 	cmp	r0, r4
    3a98:	33e00000 	mvncc	r0, #0	; 0x0
    3a9c:	38bd8030 	ldmccia	sp!, {r4, r5, pc}
    3aa0:	e3540000 	cmp	r4, #0	; 0x0
    3aa4:	1a000002 	bne	3ab4 <uart1Write+0x34>
    3aa8:	ea000009 	b	3ad4 <uart1Write+0x54>
    3aac:	e1b04821 	movs	r4, r1, lsr #16
    3ab0:	0a000007 	beq	3ad4 <uart1Write+0x54>
    3ab4:	e4d50001 	ldrb	r0, [r5], #1
    3ab8:	ebffffc4 	bl	39d0 <uart1Putch>
    3abc:	e2443001 	sub	r3, r4, #1	; 0x1
    3ac0:	e3500000 	cmp	r0, #0	; 0x0
    3ac4:	e1a01803 	mov	r1, r3, lsl #16
    3ac8:	aafffff7 	bge	3aac <uart1Write+0x2c>
    3acc:	e3e00001 	mvn	r0, #1	; 0x1
    3ad0:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    3ad4:	e3a00000 	mov	r0, #0	; 0x0
    3ad8:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00003adc <uart1Puts>:
    3adc:	e92d4010 	stmdb	sp!, {r4, lr}
    3ae0:	e1a04000 	mov	r4, r0
    3ae4:	e5d00000 	ldrb	r0, [r0]
    3ae8:	e3500000 	cmp	r0, #0	; 0x0
    3aec:	1a000003 	bne	3b00 <uart1Puts+0x24>
    3af0:	ea000005 	b	3b0c <uart1Puts+0x30>
    3af4:	e5f40001 	ldrb	r0, [r4, #1]!
    3af8:	e3500000 	cmp	r0, #0	; 0x0
    3afc:	0a000002 	beq	3b0c <uart1Puts+0x30>
    3b00:	ebffffb2 	bl	39d0 <uart1Putch>
    3b04:	e3500000 	cmp	r0, #0	; 0x0
    3b08:	aafffff9 	bge	3af4 <uart1Puts+0x18>
    3b0c:	e1a00004 	mov	r0, r4
    3b10:	e8bd8010 	ldmia	sp!, {r4, pc}

00003b14 <uart0TxFlush>:
    3b14:	e92d4010 	stmdb	sp!, {r4, lr}
    3b18:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    3b1c:	e2844903 	add	r4, r4, #49152	; 0xc000
    3b20:	e5d43008 	ldrb	r3, [r4, #8]
    3b24:	e3833004 	orr	r3, r3, #4	; 0x4
    3b28:	e5c43008 	strb	r3, [r4, #8]
    3b2c:	eb000130 	bl	3ff4 <disableIRQ>
    3b30:	e5d43004 	ldrb	r3, [r4, #4]
    3b34:	e20330fd 	and	r3, r3, #253	; 0xfd
    3b38:	e5c43004 	strb	r3, [r4, #4]
    3b3c:	eb000116 	bl	3f9c <restoreIRQ>
    3b40:	e59f3010 	ldr	r3, [pc, #16]	; 3b58 <.text+0x3b58>
    3b44:	e59f2010 	ldr	r2, [pc, #16]	; 3b5c <.text+0x3b5c>
    3b48:	e3a01000 	mov	r1, #0	; 0x0
    3b4c:	e1c310b0 	strh	r1, [r3]
    3b50:	e1c210b0 	strh	r1, [r2]
    3b54:	e8bd8010 	ldmia	sp!, {r4, pc}
    3b58:	40000572 	andmi	r0, r0, r2, ror r5
    3b5c:	4000067c 	andmi	r0, r0, ip, ror r6

00003b60 <uart0Putch>:
    3b60:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3b64:	e59f8094 	ldr	r8, [pc, #148]	; 3c00 <.text+0x3c00>
    3b68:	e59f2094 	ldr	r2, [pc, #148]	; 3c04 <.text+0x3c04>
    3b6c:	e1d830b0 	ldrh	r3, [r8]
    3b70:	e1d210b0 	ldrh	r1, [r2]
    3b74:	e2833001 	add	r3, r3, #1	; 0x1
    3b78:	e203707f 	and	r7, r3, #127	; 0x7f
    3b7c:	e3a0520e 	mov	r5, #-536870912	; 0xe0000000
    3b80:	e1510007 	cmp	r1, r7
    3b84:	e2855903 	add	r5, r5, #49152	; 0xc000
    3b88:	e3e03000 	mvn	r3, #0	; 0x0
    3b8c:	e1a06000 	mov	r6, r0
    3b90:	0a000018 	beq	3bf8 <uart0Putch+0x98>
    3b94:	eb000116 	bl	3ff4 <disableIRQ>
    3b98:	e5d53004 	ldrb	r3, [r5, #4]
    3b9c:	e20330fd 	and	r3, r3, #253	; 0xfd
    3ba0:	e5c53004 	strb	r3, [r5, #4]
    3ba4:	eb0000fc 	bl	3f9c <restoreIRQ>
    3ba8:	e59f2058 	ldr	r2, [pc, #88]	; 3c08 <.text+0x3c08>
    3bac:	e5923000 	ldr	r3, [r2]
    3bb0:	e3530000 	cmp	r3, #0	; 0x0
    3bb4:	11d820b0 	ldrneh	r2, [r8]
    3bb8:	159f304c 	ldrne	r3, [pc, #76]	; 3c0c <.text+0x3c0c>
    3bbc:	e20640ff 	and	r4, r6, #255	; 0xff
    3bc0:	03a03001 	moveq	r3, #1	; 0x1
    3bc4:	020640ff 	andeq	r4, r6, #255	; 0xff
    3bc8:	05823000 	streq	r3, [r2]
    3bcc:	17c34002 	strneb	r4, [r3, r2]
    3bd0:	05c54000 	streqb	r4, [r5]
    3bd4:	11c870b0 	strneh	r7, [r8]
    3bd8:	eb000105 	bl	3ff4 <disableIRQ>
    3bdc:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    3be0:	e2822903 	add	r2, r2, #49152	; 0xc000
    3be4:	e5d23004 	ldrb	r3, [r2, #4]
    3be8:	e3833002 	orr	r3, r3, #2	; 0x2
    3bec:	e5c23004 	strb	r3, [r2, #4]
    3bf0:	eb0000e9 	bl	3f9c <restoreIRQ>
    3bf4:	e1a03004 	mov	r3, r4
    3bf8:	e1a00003 	mov	r0, r3
    3bfc:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
    3c00:	40000572 	andmi	r0, r0, r2, ror r5
    3c04:	4000067c 	andmi	r0, r0, ip, ror r6
    3c08:	40000684 	andmi	r0, r0, r4, lsl #13
    3c0c:	400004f0 	strmid	r0, [r0], -r0

00003c10 <uart0Write>:
    3c10:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    3c14:	e1a01801 	mov	r1, r1, lsl #16
    3c18:	e1a04821 	mov	r4, r1, lsr #16
    3c1c:	e1a05000 	mov	r5, r0
    3c20:	ebfffed6 	bl	3780 <uart0Space>
    3c24:	e1500004 	cmp	r0, r4
    3c28:	33e00000 	mvncc	r0, #0	; 0x0
    3c2c:	38bd8030 	ldmccia	sp!, {r4, r5, pc}
    3c30:	e3540000 	cmp	r4, #0	; 0x0
    3c34:	1a000002 	bne	3c44 <uart0Write+0x34>
    3c38:	ea000009 	b	3c64 <uart0Write+0x54>
    3c3c:	e1b04821 	movs	r4, r1, lsr #16
    3c40:	0a000007 	beq	3c64 <uart0Write+0x54>
    3c44:	e4d50001 	ldrb	r0, [r5], #1
    3c48:	ebffffc4 	bl	3b60 <uart0Putch>
    3c4c:	e2443001 	sub	r3, r4, #1	; 0x1
    3c50:	e3500000 	cmp	r0, #0	; 0x0
    3c54:	e1a01803 	mov	r1, r3, lsl #16
    3c58:	aafffff7 	bge	3c3c <uart0Write+0x2c>
    3c5c:	e3e00001 	mvn	r0, #1	; 0x1
    3c60:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    3c64:	e3a00000 	mov	r0, #0	; 0x0
    3c68:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00003c6c <uart0Puts>:
    3c6c:	e92d4010 	stmdb	sp!, {r4, lr}
    3c70:	e1a04000 	mov	r4, r0
    3c74:	e5d00000 	ldrb	r0, [r0]
    3c78:	e3500000 	cmp	r0, #0	; 0x0
    3c7c:	1a000003 	bne	3c90 <uart0Puts+0x24>
    3c80:	ea000005 	b	3c9c <uart0Puts+0x30>
    3c84:	e5f40001 	ldrb	r0, [r4, #1]!
    3c88:	e3500000 	cmp	r0, #0	; 0x0
    3c8c:	0a000002 	beq	3c9c <uart0Puts+0x30>
    3c90:	ebffffb2 	bl	3b60 <uart0Putch>
    3c94:	e3500000 	cmp	r0, #0	; 0x0
    3c98:	aafffff9 	bge	3c84 <uart0Puts+0x18>
    3c9c:	e1a00004 	mov	r0, r4
    3ca0:	e8bd8010 	ldmia	sp!, {r4, pc}

00003ca4 <uart0ISR>:
{
	uint8_t iid;

	// perform proper ISR entry so thumb-interwork works properly
	ISR_ENTRY();
    3ca4:	e24ee004 	sub	lr, lr, #4	; 0x4
    3ca8:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3cac:	e14f1000 	mrs	r1, SPSR
    3cb0:	e92d0002 	stmdb	sp!, {r1}
    3cb4:	e59fa144 	ldr	sl, [pc, #324]	; 3e00 <.text+0x3e00>
    3cb8:	e59f9144 	ldr	r9, [pc, #324]	; 3e04 <.text+0x3e04>
    3cbc:	e59fb144 	ldr	fp, [pc, #324]	; 3e08 <.text+0x3e08>
    3cc0:	e59f3144 	ldr	r3, [pc, #324]	; 3e0c <.text+0x3e0c>
    3cc4:	e59f2144 	ldr	r2, [pc, #324]	; 3e10 <.text+0x3e10>
    3cc8:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    3ccc:	e1d370b0 	ldrh	r7, [r3]
    3cd0:	e1d260b0 	ldrh	r6, [r2]
    3cd4:	e1dac0b0 	ldrh	ip, [sl]
    3cd8:	e1d900b0 	ldrh	r0, [r9]
    3cdc:	e59b8000 	ldr	r8, [fp]
    3ce0:	e2844903 	add	r4, r4, #49152	; 0xc000

	// loop until not more interrupt sources
	while ( 0 == ( ( iid = U0IIR ) & UIIR_NO_INT ) ) {
    3ce4:	e5d43008 	ldrb	r3, [r4, #8]
    3ce8:	e3130001 	tst	r3, #1	; 0x1
    3cec:	1a000022 	bne	3d7c <.text+0x3d7c>
	
		// identify & process the highest priority interrupt
		switch ( iid & UIIR_ID_MASK ) {
    3cf0:	e203300e 	and	r3, r3, #14	; 0xe
    3cf4:	e2433002 	sub	r3, r3, #2	; 0x2
    3cf8:	e353000a 	cmp	r3, #10	; 0xa
    3cfc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    3d00:	ea00003b 	b	3df4 <.text+0x3df4>
    3d04:	00003d30 	andeq	r3, r0, r0, lsr sp
    3d08:	00003df4 	streqd	r3, [r0], -r4
    3d0c:	00003da8 	andeq	r3, r0, r8, lsr #27
    3d10:	00003df4 	streqd	r3, [r0], -r4
    3d14:	00003da0 	andeq	r3, r0, r0, lsr #27
    3d18:	00003df4 	streqd	r3, [r0], -r4
    3d1c:	00003df4 	streqd	r3, [r0], -r4
    3d20:	00003df4 	streqd	r3, [r0], -r4
    3d24:	00003df4 	streqd	r3, [r0], -r4
    3d28:	00003df4 	streqd	r3, [r0], -r4
    3d2c:	00003da8 	andeq	r3, r0, r8, lsr #27
			
			case UIIR_RLS_INT:    	// Receive Line Status
				U0LSR;              // read LSR to clear
				break;

#ifdef UART0_RX_INT_MODE
			case UIIR_CTI_INT:		// Character Timeout Indicator
			case UIIR_RDA_INT:     // Receive Data Available
				do {
					uint16_t temp;

					// calc next insert index & store character
					temp = (uart0_rx_insert_idx + 1) % UART0_RX_BUFFER_SIZE;
					uart0_rx_buffer[uart0_rx_insert_idx] = U0RBR;

					// check for more room in queue
					if ( temp != uart0_rx_extract_idx ) {
						uart0_rx_insert_idx = temp; // update insert index
					}
				}
				while ( U0LSR & ULSR_RDR );

        break;
#endif

#ifdef UART0_TX_INT_MODE
			case UIIR_THRE_INT:               // Transmit Holding Register Empty
				while ( U0LSR & ULSR_THRE ) {
    3d30:	e5d43014 	ldrb	r3, [r4, #20]
    3d34:	e3130020 	tst	r3, #32	; 0x20
    3d38:	0affffe9 	beq	3ce4 <uart0ISR+0x40>
					// check if more data to send
					if ( uart0_tx_insert_idx != uart0_tx_extract_idx ) {
    3d3c:	e1560000 	cmp	r6, r0
    3d40:	159f10cc 	ldrne	r1, [pc, #204]	; 3e14 <.text+0x3e14>
    3d44:	0a000008 	beq	3d6c <.text+0x3d6c>
						U0THR = uart0_tx_buffer[uart0_tx_extract_idx++];
    3d48:	e7d13000 	ldrb	r3, [r1, r0]
    3d4c:	e5c43000 	strb	r3, [r4]
    3d50:	e5d42014 	ldrb	r2, [r4, #20]
						uart0_tx_extract_idx %= UART0_TX_BUFFER_SIZE;
    3d54:	e2803001 	add	r3, r0, #1	; 0x1
    3d58:	e3120020 	tst	r2, #32	; 0x20
    3d5c:	e203007f 	and	r0, r3, #127	; 0x7f
    3d60:	0affffdf 	beq	3ce4 <uart0ISR+0x40>
    3d64:	e1500006 	cmp	r0, r6
    3d68:	1afffff6 	bne	3d48 <.text+0x3d48>
    3d6c:	e5d43008 	ldrb	r3, [r4, #8]
    3d70:	e3130001 	tst	r3, #1	; 0x1
    3d74:	e3a08000 	mov	r8, #0	; 0x0
    3d78:	0affffdc 	beq	3cf0 <uart0ISR+0x4c>
					}
					else {
						// no
						uart0_tx_running = 0;       // clear running flag
						break;
					}
				}
				break;
				
#endif // UART0_TX_INT_MODE

			default:                          // Unknown
				U0LSR;
				U0RBR;
				break;
		}
	}

	VICVectAddr = 0x00000000;             // clear this interrupt from the VIC
    3d7c:	e3a02000 	mov	r2, #0	; 0x0
    3d80:	e3e03000 	mvn	r3, #0	; 0x0
    3d84:	e1cac0b0 	strh	ip, [sl]
    3d88:	e1c900b0 	strh	r0, [r9]
    3d8c:	e58b8000 	str	r8, [fp]
    3d90:	e5032fcf 	str	r2, [r3, #-4047]
	ISR_EXIT();                           // recover registers and return
    3d94:	e8bd0002 	ldmia	sp!, {r1}
    3d98:	e161f001 	msr	SPSR_c, r1
    3d9c:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    3da0:	e5d43014 	ldrb	r3, [r4, #20]
    3da4:	eaffffce 	b	3ce4 <uart0ISR+0x40>
    3da8:	e3a0e20e 	mov	lr, #-536870912	; 0xe0000000
    3dac:	e59f5064 	ldr	r5, [pc, #100]	; 3e18 <.text+0x3e18>
    3db0:	e28ee903 	add	lr, lr, #49152	; 0xc000
    3db4:	e28c3001 	add	r3, ip, #1	; 0x1
    3db8:	e1a02fc3 	mov	r2, r3, asr #31
    3dbc:	e1a02ca2 	mov	r2, r2, lsr #25
    3dc0:	e5de1000 	ldrb	r1, [lr]
    3dc4:	e0833002 	add	r3, r3, r2
    3dc8:	e203307f 	and	r3, r3, #127	; 0x7f
    3dcc:	e7c5100c 	strb	r1, [r5, ip]
    3dd0:	e0623003 	rsb	r3, r2, r3
    3dd4:	e1a03803 	mov	r3, r3, lsl #16
    3dd8:	e1a03823 	mov	r3, r3, lsr #16
    3ddc:	e5de2014 	ldrb	r2, [lr, #20]
    3de0:	e1530007 	cmp	r3, r7
    3de4:	11a0c003 	movne	ip, r3
    3de8:	e3120001 	tst	r2, #1	; 0x1
    3dec:	1afffff0 	bne	3db4 <.text+0x3db4>
    3df0:	eaffffbb 	b	3ce4 <uart0ISR+0x40>
    3df4:	e5d43014 	ldrb	r3, [r4, #20]
    3df8:	e5d42000 	ldrb	r2, [r4]
    3dfc:	eaffffb8 	b	3ce4 <uart0ISR+0x40>
    3e00:	40000674 	andmi	r0, r0, r4, ror r6
    3e04:	4000067c 	andmi	r0, r0, ip, ror r6
    3e08:	40000684 	andmi	r0, r0, r4, lsl #13
    3e0c:	4000070a 	andmi	r0, r0, sl, lsl #14
    3e10:	40000572 	andmi	r0, r0, r2, ror r5
    3e14:	400004f0 	strmid	r0, [r0], -r0
    3e18:	40000688 	andmi	r0, r0, r8, lsl #13

00003e1c <uart1ISR>:
}
#endif // defined(UART0_TX_INT_MODE) || defined(UART0_RX_INT_MODE)
#endif // UART0_SUPPORT


#if UART1_SUPPORT

#ifdef UART1_RX_INT_MODE
extern uint8_t  uart1_rx_buffer[UART1_RX_BUFFER_SIZE];
extern uint16_t uart1_rx_insert_idx, uart1_rx_extract_idx;
#endif // UART1_RX_INT_MODE

#ifdef UART1_TX_INT_MODE
extern uint8_t  uart1_tx_buffer[UART1_TX_BUFFER_SIZE];
extern uint16_t uart1_tx_insert_idx, uart1_tx_extract_idx;
extern int      uart1_tx_running;
#endif // UART1_TX_INT_MODE

#if defined(UART1_TX_INT_MODE) || defined(UART1_RX_INT_MODE)
/******************************************************************************
 *
 * Function Name: uart1ISR()
 *
 * Description:
 *    This function implements the ISR for UART1.
 *
 * Calling Sequence: 
 *    void
 *
 * Returns:
 *    void
 *
 *****************************************************************************/
void uart1ISR(void)
{
	uint8_t iid;

	// perform proper ISR entry so thumb-interwork works properly
	ISR_ENTRY();
    3e1c:	e24ee004 	sub	lr, lr, #4	; 0x4
    3e20:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    3e24:	e14f1000 	mrs	r1, SPSR
    3e28:	e92d0002 	stmdb	sp!, {r1}
    3e2c:	e59fb14c 	ldr	fp, [pc, #332]	; 3f80 <.text+0x3f80>
    3e30:	e59fa14c 	ldr	sl, [pc, #332]	; 3f84 <.text+0x3f84>
    3e34:	e59f914c 	ldr	r9, [pc, #332]	; 3f88 <.text+0x3f88>
    3e38:	e59f314c 	ldr	r3, [pc, #332]	; 3f8c <.text+0x3f8c>
    3e3c:	e59f214c 	ldr	r2, [pc, #332]	; 3f90 <.text+0x3f90>
    3e40:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    3e44:	e1d370b0 	ldrh	r7, [r3]
    3e48:	e1d260b0 	ldrh	r6, [r2]
    3e4c:	e1dbc0b0 	ldrh	ip, [fp]
    3e50:	e1da00b0 	ldrh	r0, [sl]
    3e54:	e5998000 	ldr	r8, [r9]
    3e58:	e2844801 	add	r4, r4, #65536	; 0x10000

	// loop until not more interrupt sources
	while ( 0 == ( ( iid = U1IIR ) & UIIR_NO_INT ) ) {
    3e5c:	e5d43008 	ldrb	r3, [r4, #8]
    3e60:	e3130001 	tst	r3, #1	; 0x1
    3e64:	1a000016 	bne	3ec4 <.text+0x3ec4>
		// identify & process the highest priority interrupt
		switch ( iid & UIIR_ID_MASK ) {
    3e68:	e203300e 	and	r3, r3, #14	; 0xe
    3e6c:	e353000c 	cmp	r3, #12	; 0xc
    3e70:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    3e74:	ea00000c 	b	3eac <.text+0x3eac>
    3e78:	00003eb4 	streqh	r3, [r0], -r4
    3e7c:	00003eac 	andeq	r3, r0, ip, lsr #29
    3e80:	00003ee8 	andeq	r3, r0, r8, ror #29
    3e84:	00003eac 	andeq	r3, r0, ip, lsr #29
    3e88:	00003f34 	andeq	r3, r0, r4, lsr pc
    3e8c:	00003eac 	andeq	r3, r0, ip, lsr #29
    3e90:	00003f2c 	andeq	r3, r0, ip, lsr #30
    3e94:	00003eac 	andeq	r3, r0, ip, lsr #29
    3e98:	00003eac 	andeq	r3, r0, ip, lsr #29
    3e9c:	00003eac 	andeq	r3, r0, ip, lsr #29
    3ea0:	00003eac 	andeq	r3, r0, ip, lsr #29
    3ea4:	00003eac 	andeq	r3, r0, ip, lsr #29
    3ea8:	00003f34 	andeq	r3, r0, r4, lsr pc
			case UIIR_RLS_INT:                // Receive Line Status
				U1LSR;                        // read LSR to clear
				break;

#ifdef UART1_RX_INT_MODE
			case UIIR_CTI_INT:                // Character Timeout Indicator
			case UIIR_RDA_INT:                // Receive Data Available
				do {
					uint16_t temp;

					// calc next insert index & store character
					temp = (uart1_rx_insert_idx + 1) % UART1_RX_BUFFER_SIZE;
					uart1_rx_buffer[uart1_rx_insert_idx] = U1RBR;

					// check for more room in queue
					if (temp != uart1_rx_extract_idx) {
						uart1_rx_insert_idx = temp; // update insert index
					}
				}
				while ( U1LSR & ULSR_RDR );

				break;
#endif

#ifdef UART1_TX_INT_MODE
			case UIIR_THRE_INT:               // Transmit Holding Register Empty
				while ( U1LSR & ULSR_THRE ) {
					// check if more data to send
					if ( uart1_tx_insert_idx != uart1_tx_extract_idx ) {
						U1THR = uart1_tx_buffer[uart1_tx_extract_idx++];
						uart1_tx_extract_idx %= UART1_TX_BUFFER_SIZE;
					}
					else {
						// no
						uart1_tx_running = 0;       // clear running flag
						break;
					}
				}
				break;
				
#endif // UART1_TX_INT_MODE

			case UIIR_MS_INT:          // MODEM Status
				U1MSR;         			// read MSR to clear
				break;

			default:   				// Unknown
				U1LSR;
    3eac:	e5d43014 	ldrb	r3, [r4, #20]
				U1RBR;
    3eb0:	e5d42000 	ldrb	r2, [r4]
				U1MSR;
    3eb4:	e5d43018 	ldrb	r3, [r4, #24]
    3eb8:	e5d43008 	ldrb	r3, [r4, #8]
    3ebc:	e3130001 	tst	r3, #1	; 0x1
    3ec0:	0affffe8 	beq	3e68 <uart1ISR+0x4c>
				break;
		}
    }

	VICVectAddr = 0x00000000;             // clear this interrupt from the VIC
    3ec4:	e3a02000 	mov	r2, #0	; 0x0
    3ec8:	e3e03000 	mvn	r3, #0	; 0x0
    3ecc:	e1cbc0b0 	strh	ip, [fp]
    3ed0:	e1ca00b0 	strh	r0, [sl]
    3ed4:	e5898000 	str	r8, [r9]
    3ed8:	e5032fcf 	str	r2, [r3, #-4047]
	ISR_EXIT();                           // recover registers and return
    3edc:	e8bd0002 	ldmia	sp!, {r1}
    3ee0:	e161f001 	msr	SPSR_c, r1
    3ee4:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
    3ee8:	e5d43014 	ldrb	r3, [r4, #20]
    3eec:	e3130020 	tst	r3, #32	; 0x20
    3ef0:	0affffd9 	beq	3e5c <uart1ISR+0x40>
    3ef4:	e1560000 	cmp	r6, r0
    3ef8:	159f1094 	ldrne	r1, [pc, #148]	; 3f94 <.text+0x3f94>
    3efc:	0a000008 	beq	3f24 <.text+0x3f24>
    3f00:	e7d13000 	ldrb	r3, [r1, r0]
    3f04:	e5c43000 	strb	r3, [r4]
    3f08:	e5d42014 	ldrb	r2, [r4, #20]
    3f0c:	e2803001 	add	r3, r0, #1	; 0x1
    3f10:	e3120020 	tst	r2, #32	; 0x20
    3f14:	e203007f 	and	r0, r3, #127	; 0x7f
    3f18:	0affffcf 	beq	3e5c <uart1ISR+0x40>
    3f1c:	e1500006 	cmp	r0, r6
    3f20:	1afffff6 	bne	3f00 <.text+0x3f00>
    3f24:	e3a08000 	mov	r8, #0	; 0x0
    3f28:	eaffffcb 	b	3e5c <uart1ISR+0x40>
    3f2c:	e5d43014 	ldrb	r3, [r4, #20]
    3f30:	eaffffc9 	b	3e5c <uart1ISR+0x40>
    3f34:	e3a0e20e 	mov	lr, #-536870912	; 0xe0000000
    3f38:	e59f5058 	ldr	r5, [pc, #88]	; 3f98 <.text+0x3f98>
    3f3c:	e28ee801 	add	lr, lr, #65536	; 0x10000
    3f40:	e28c3001 	add	r3, ip, #1	; 0x1
    3f44:	e1a02fc3 	mov	r2, r3, asr #31
    3f48:	e1a02ca2 	mov	r2, r2, lsr #25
    3f4c:	e5de1000 	ldrb	r1, [lr]
    3f50:	e0833002 	add	r3, r3, r2
    3f54:	e203307f 	and	r3, r3, #127	; 0x7f
    3f58:	e7c5100c 	strb	r1, [r5, ip]
    3f5c:	e0623003 	rsb	r3, r2, r3
    3f60:	e1a03803 	mov	r3, r3, lsl #16
    3f64:	e1a03823 	mov	r3, r3, lsr #16
    3f68:	e5de2014 	ldrb	r2, [lr, #20]
    3f6c:	e1530007 	cmp	r3, r7
    3f70:	11a0c003 	movne	ip, r3
    3f74:	e3120001 	tst	r2, #1	; 0x1
    3f78:	1afffff0 	bne	3f40 <.text+0x3f40>
    3f7c:	eaffffb6 	b	3e5c <uart1ISR+0x40>
    3f80:	40000570 	andmi	r0, r0, r0, ror r5
    3f84:	40000708 	andmi	r0, r0, r8, lsl #14
    3f88:	40000678 	andmi	r0, r0, r8, ror r6
    3f8c:	40000680 	andmi	r0, r0, r0, lsl #13
    3f90:	4000067e 	andmi	r0, r0, lr, ror r6
    3f94:	40000574 	andmi	r0, r0, r4, ror r5
    3f98:	400005f4 	strmid	r0, [r0], -r4

00003f9c <restoreIRQ>:

static inline unsigned __get_cpsr(void)
{
  unsigned long retval;
  asm volatile (" mrs  %0, cpsr" : "=r" (retval) : /* no inputs */  );
    3f9c:	e10f2000 	mrs	r2, CPSR
  return retval;
}

static inline void __set_cpsr(unsigned val)
{
  asm volatile (" msr  cpsr, %0" : /* no outputs */ : "r" (val)  );
    3fa0:	e2000080 	and	r0, r0, #128	; 0x80
    3fa4:	e3c23080 	bic	r3, r2, #128	; 0x80
    3fa8:	e1833000 	orr	r3, r3, r0
    3fac:	e129f003 	msr	CPSR_fc, r3
}

unsigned disableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | IRQ_MASK);
  return _cpsr;
}

unsigned restoreIRQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~IRQ_MASK) | (oldCPSR & IRQ_MASK));
  return _cpsr;
}
    3fb0:	e1a00002 	mov	r0, r2
    3fb4:	e12fff1e 	bx	lr

00003fb8 <restoreFIQ>:
    3fb8:	e10f2000 	mrs	r2, CPSR
    3fbc:	e2000040 	and	r0, r0, #64	; 0x40
    3fc0:	e3c23040 	bic	r3, r2, #64	; 0x40
    3fc4:	e1833000 	orr	r3, r3, r0
    3fc8:	e129f003 	msr	CPSR_fc, r3

unsigned enableIRQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~IRQ_MASK);
  return _cpsr;
}

unsigned disableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr | FIQ_MASK);
  return _cpsr;
}

unsigned restoreFIQ(unsigned oldCPSR)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr((_cpsr & ~FIQ_MASK) | (oldCPSR & FIQ_MASK));
  return _cpsr;
}
    3fcc:	e1a00002 	mov	r0, r2
    3fd0:	e12fff1e 	bx	lr

00003fd4 <disableFIQ>:
    3fd4:	e10f0000 	mrs	r0, CPSR
    3fd8:	e3803040 	orr	r3, r0, #64	; 0x40
    3fdc:	e129f003 	msr	CPSR_fc, r3
    3fe0:	e12fff1e 	bx	lr

00003fe4 <enableFIQ>:
    3fe4:	e10f0000 	mrs	r0, CPSR
    3fe8:	e3c03040 	bic	r3, r0, #64	; 0x40
    3fec:	e129f003 	msr	CPSR_fc, r3

unsigned enableFIQ(void)
{
  unsigned _cpsr;

  _cpsr = __get_cpsr();
  __set_cpsr(_cpsr & ~FIQ_MASK);
  return _cpsr;
}
    3ff0:	e12fff1e 	bx	lr

00003ff4 <disableIRQ>:
    3ff4:	e10f0000 	mrs	r0, CPSR
    3ff8:	e3803080 	orr	r3, r0, #128	; 0x80
    3ffc:	e129f003 	msr	CPSR_fc, r3
    4000:	e12fff1e 	bx	lr

00004004 <enableIRQ>:
    4004:	e10f0000 	mrs	r0, CPSR
    4008:	e3c03080 	bic	r3, r0, #128	; 0x80
    400c:	e129f003 	msr	CPSR_fc, r3
    4010:	e12fff1e 	bx	lr

00004014 <crc8>:
#define CRC8INIT	0x00
#define CRC8POLY	0x18              //0X18 = X^8+X^5+X^4+X^0

uint8_t	crc8 ( uint8_t *data_in, uint16_t number_of_bytes_to_read )
{
    4014:	e1a01801 	mov	r1, r1, lsl #16
    4018:	e92d4030 	stmdb	sp!, {r4, r5, lr}
	uint8_t	 crc;
	uint16_t loop_count;
	uint8_t  bit_counter;
	uint8_t  data;
	uint8_t  feedback_bit;
	
	crc = CRC8INIT;

	for ( loop_count = 0; loop_count != number_of_bytes_to_read; loop_count++ ) {
    401c:	e1b05821 	movs	r5, r1, lsr #16
    4020:	e1a04000 	mov	r4, r0
    4024:	01a00005 	moveq	r0, r5
    4028:	08bd8030 	ldmeqia	sp!, {r4, r5, pc}
    402c:	e3a00000 	mov	r0, #0	; 0x0
    4030:	e1a01000 	mov	r1, r0
		data = data_in[loop_count];
    4034:	e7d1c004 	ldrb	ip, [r1, r4]
    4038:	e3a0e008 	mov	lr, #8	; 0x8
		
		bit_counter = 8;
		do {
			feedback_bit = (crc ^ data) & 0x01;
	
			if ( feedback_bit == 0x01 ) {
    403c:	e020200c 	eor	r2, r0, ip
				crc = crc ^ CRC8POLY;
			}
			crc = (crc >> 1) & 0x7F;
    4040:	e2203018 	eor	r3, r0, #24	; 0x18
    4044:	e3120001 	tst	r2, #1	; 0x1
    4048:	e1a030a3 	mov	r3, r3, lsr #1
			if ( feedback_bit == 0x01 ) {
				crc = crc | 0x80;
    404c:	13830080 	orrne	r0, r3, #128	; 0x80
			}
		
			data = data >> 1;
			bit_counter--;
    4050:	e24e3001 	sub	r3, lr, #1	; 0x1
    4054:	01a000a0 	moveq	r0, r0, lsr #1
		
		} while (bit_counter > 0);
    4058:	e213e0ff 	ands	lr, r3, #255	; 0xff
    405c:	e1a0c0ac 	mov	ip, ip, lsr #1
    4060:	1afffff5 	bne	403c <crc8+0x28>
    4064:	e2813001 	add	r3, r1, #1	; 0x1
    4068:	e1a03803 	mov	r3, r3, lsl #16
    406c:	e1a01823 	mov	r1, r3, lsr #16
    4070:	e1550001 	cmp	r5, r1
    4074:	1affffee 	bne	4034 <crc8+0x20>
	}
	
	return crc;
}
    4078:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

0000407c <delay_us_>:
#include "config.h"

void delay_us_(uint32_t delayval)
{
	asm volatile (
    407c:	e2500001 	subs	r0, r0, #1	; 0x1
    4080:	1afffffd 	bne	407c <delay_us_>
		"L_LOOPUS_%=: 		\n\t" \
		"subs	%0, %0, #1 	\n\t" \
		"bne	L_LOOPUS_%=	\n\t" \
		:  /* no outputs */ : "r" (delayval)
	);
	
#if 0
	asm volatile (
		"ldr	r1,=%0 		\n\t" \
		".L_LOOPUS_%=: 		\n\t" \
		"subs	r1, r1, #1 	\n\t" \
		"bne	L_LOOPUS_%=	\n\t" \
		: "=w" (delayval)
		: "0" (delayval)
	);
#endif
}
    4084:	e12fff1e 	bx	lr

00004088 <delay_ms>:

void delay_ms(uint32_t delayval)
{
    4088:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    408c:	e1a04000 	mov	r4, r0
	uint32_t d = (delayval * 1e-3 * sysTICSperSEC) + .5;
	pause( d ); 
    4090:	eb000f84 	bl	7ea8 <__aeabi_i2d>
    4094:	e3a02441 	mov	r2, #1090519040	; 0x41000000
    4098:	e3540000 	cmp	r4, #0	; 0x0
    409c:	e1a05000 	mov	r5, r0
    40a0:	e1a06001 	mov	r6, r1
    40a4:	e282260f 	add	r2, r2, #15728640	; 0xf00000
    40a8:	e3a03000 	mov	r3, #0	; 0x0
    40ac:	ba00000e 	blt	40ec <delay_ms+0x64>
    40b0:	e28f2044 	add	r2, pc, #68	; 0x44
    40b4:	e892000c 	ldmia	r2, {r2, r3}
    40b8:	e1a00005 	mov	r0, r5
    40bc:	e1a01006 	mov	r1, r6
    40c0:	eb000fb3 	bl	7f94 <__aeabi_dmul>
    40c4:	e59f2038 	ldr	r2, [pc, #56]	; 4104 <.text+0x4104>
    40c8:	e3a03000 	mov	r3, #0	; 0x0
    40cc:	eb000fb0 	bl	7f94 <__aeabi_dmul>
    40d0:	e3a025ff 	mov	r2, #1069547520	; 0x3fc00000
    40d4:	e2822602 	add	r2, r2, #2097152	; 0x200000
    40d8:	e3a03000 	mov	r3, #0	; 0x0
    40dc:	eb000eaf 	bl	7ba0 <__adddf3>
    40e0:	eb001128 	bl	8588 <__aeabi_d2uiz>
}
    40e4:	e8bd4070 	ldmia	sp!, {r4, r5, r6, lr}
    40e8:	eafffd65 	b	3684 <pause>
    40ec:	eb000eab 	bl	7ba0 <__adddf3>
    40f0:	e1a05000 	mov	r5, r0
    40f4:	e1a06001 	mov	r6, r1
    40f8:	eaffffec 	b	40b0 <delay_ms+0x28>
    40fc:	3f50624d 	svccc	0x0050624d
    4100:	d2f1a9fc 	rscles	sl, r1, #4128768	; 0x3f0000
    4104:	416312d0 	ldrmid	r1, [r3, #-32]!

00004108 <E_Pulse>:
unsigned long data;
//void Delay (unsigned long a) { while (--a!=0); }

void E_Pulse( void )
{
    4108:	e92d4030 	stmdb	sp!, {r4, r5, lr}
	IOSET0 = PIO0_LCD_E_BIT; //set E to high
    410c:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    4110:	e284490a 	add	r4, r4, #163840	; 0x28000
    4114:	e3a05a02 	mov	r5, #8192	; 0x2000
	delay_us_(10);
    4118:	e3a0000a 	mov	r0, #10	; 0xa
    411c:	e5845004 	str	r5, [r4, #4]
    4120:	ebffffd5 	bl	407c <delay_us_>
	IOCLR0 = PIO0_LCD_E_BIT; //set E to low
    4124:	e584500c 	str	r5, [r4, #12]
}
    4128:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

0000412c <LCDSendChar>:

void LCDInit( void )
{	
	// This is done in the low init routine!!!
	
	// first set D4, D5, D6, D7, RS, RW, E to output ports
	/*IODIR0 = PIO0_LCD_DB4_BIT |
					PIO0_LCD_DB5_BIT |
					PIO0_LCD_DB6_BIT |
					PIO0_LCD_DB7_BIT |
					PIO0_LCD_RS_BIT |
					PIO0_LCD_RW_BIT |
					PIO0_LCD_E_BIT;
					
	delay_ms(100);				*/

	// LCD initialization
	// step by step from LCD Display data sheed
	IOCLR0 = PIO0_LCD_RS_BIT;	// set RS port to 0
	IOCLR0 = PIO0_LCD_RW_BIT;	// set R/W port to 0
	IOCLR0 = PIO0_LCD_E_BIT;	// set E port to 0

	delay_ms( 110 );       		// delay ~110ms

	IOSET0 = PIO0_LCD_DB4_BIT;	// set D4 port to 1	
	IOSET0 = PIO0_LCD_DB5_BIT;	// set D5 port to 1	
	IOCLR0 = PIO0_LCD_DB6_BIT;	// set D6 port to 0
	IOCLR0 = PIO0_LCD_DB7_BIT;	// set D7 port to 0

	E_Pulse();          		// high->low to E port (pulse)
	delay_ms( 10 );       		// delay ~10ms

	IOSET0 = PIO0_LCD_DB4_BIT;	// set D4 port to 1	
	IOSET0 = PIO0_LCD_DB5_BIT;	// set D5 port to 1
	IOCLR0 = PIO0_LCD_DB6_BIT;	// set D6 port to 0
	IOCLR0 = PIO0_LCD_DB7_BIT;	// set D7 port to 0

	E_Pulse();            		// high->low to E port (pulse)
	delay_ms(10);         		// delay ~10ms

	IOSET0 = PIO0_LCD_DB4_BIT;	// set D4 port to 1	
	IOSET0 = PIO0_LCD_DB5_BIT;	// set D4 port to 1
	IOCLR0 = PIO0_LCD_DB6_BIT;	// set D5 port to 0
	IOCLR0 = PIO0_LCD_DB7_BIT;	// set D6 port to 0
	
	E_Pulse();           		// high->low to E port (pulse)
	delay_ms(10);       		// delay ~10ms

	// Set interface to be 4-bit long
	IOCLR0 = PIO0_LCD_DB4_BIT;	// set D4 port to 0	
	IOSET0 = PIO0_LCD_DB5_BIT;	// set D4 port to 1
	IOCLR0 = PIO0_LCD_DB6_BIT;	// set D5 port to 0
	IOCLR0 = PIO0_LCD_DB7_BIT;	// set D6 port to 0

	E_Pulse();           		// high->low to E port (pulse)
	delay_ms(10);       		// delay ~10ms
	
}

void LCDSendCommand( unsigned long a )
{				
	IOCLR0 = PIO0_LCD_RW_BIT;	// set RW port to 0

	delay_ms(2);                // delay for LCD char ~2ms

	data = 0xffffff0f | a;                  	// get high 4 bits
	IOCLR0 |= 0x000000f0;                    	// clear D4-D7
	IOSET0 = (IOSET0 | 0x000000f0) & data;  	// set D4-D7

	IOCLR0 = PIO0_LCD_RS_BIT;					// set RS port to 0 -> display set to comand mode                 	
	E_Pulse();                              	// pulse to set d4-d7 bits

	data = (a << 4) & 0x000000f0;   	  		// get low 4 bits
	IOCLR0 |= 0x000000f0;                    	// clear D4-D7
	IOSET0 = (IOSET0 & 0xffffff0f) | data;		// set D4-D7 (only PORTC4-PORTC7)

	IOCLR0 = PIO0_LCD_RS_BIT;					// set RS port to 0 -> display set to comand mode
	E_Pulse();                              	// pulse to set d4-d7 bits

}

void LCDSendChar(unsigned long a)
{
    412c:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
	IOCLR0 = PIO0_LCD_RW_BIT;					// set RW port to 0
    4130:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    4134:	e284490a 	add	r4, r4, #163840	; 0x28000
    4138:	e3a03a01 	mov	r3, #4096	; 0x1000
    413c:	e1a05000 	mov	r5, r0
    4140:	e584300c 	str	r3, [r4, #12]

	delay_ms(2);                            	// delay for LCD char ~2ms
    4144:	e3a00002 	mov	r0, #2	; 0x2
    4148:	ebffffce 	bl	4088 <delay_ms>

	data = 0xffffff0f | a;                  	// get high 4 bits
	IOCLR0 |= 0x000000f0;                    	// clear D4-D7
    414c:	e594300c 	ldr	r3, [r4, #12]
    4150:	e38330f0 	orr	r3, r3, #240	; 0xf0
    4154:	e584300c 	str	r3, [r4, #12]
    4158:	e1e02005 	mvn	r2, r5
	IOSET0 = (IOSET0 | 0x000000f0) & data;  	// set D4-D7
    415c:	e5943004 	ldr	r3, [r4, #4]
    4160:	e20220f0 	and	r2, r2, #240	; 0xf0
    4164:	e1e02002 	mvn	r2, r2
    4168:	e59f704c 	ldr	r7, [pc, #76]	; 41bc <.text+0x41bc>
    416c:	e38330f0 	orr	r3, r3, #240	; 0xf0
    4170:	e0023003 	and	r3, r2, r3

	IOSET0 = PIO0_LCD_RS_BIT;					// set RS port to 1 -> display set to data mode                	
    4174:	e3a06b01 	mov	r6, #1024	; 0x400
    4178:	e5843004 	str	r3, [r4, #4]
    417c:	e5872000 	str	r2, [r7]
    4180:	e5846004 	str	r6, [r4, #4]
	E_Pulse();                              	// pulse to set d4-d7 bits
    4184:	ebffffdf 	bl	4108 <E_Pulse>

	data = (a << 4) & 0x000000f0;   	  		// get low 4 bits
	IOCLR0 |= 0x000000f0;                    	// clear D4-D7
    4188:	e594300c 	ldr	r3, [r4, #12]
    418c:	e38330f0 	orr	r3, r3, #240	; 0xf0
    4190:	e584300c 	str	r3, [r4, #12]
	IOSET0 = (IOSET0 & 0xffffff0f) | data;		// set D4-D7 (only PORTC4-PORTC7)
    4194:	e5942004 	ldr	r2, [r4, #4]
    4198:	e1a05205 	mov	r5, r5, lsl #4
    419c:	e20550f0 	and	r5, r5, #240	; 0xf0
    41a0:	e3c220f0 	bic	r2, r2, #240	; 0xf0
    41a4:	e1852002 	orr	r2, r5, r2
    41a8:	e5842004 	str	r2, [r4, #4]

	IOSET0 = PIO0_LCD_RS_BIT;					// set RS port to 1 -> display set to data mode
    41ac:	e5846004 	str	r6, [r4, #4]
    41b0:	e5875000 	str	r5, [r7]
	E_Pulse();                              	// pulse to set d4-d7 bits
}
    41b4:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    41b8:	eaffffd2 	b	4108 <E_Pulse>
    41bc:	4000070c 	andmi	r0, r0, ip, lsl #14

000041c0 <LCDSendTxt>:

void LCDSendTxt(char* a)
{
    41c0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    41c4:	e1a05000 	mov	r5, r0
    41c8:	e3a04000 	mov	r4, #0	; 0x0
    41cc:	ea000002 	b	41dc <LCDSendTxt+0x1c>
	for ( int i=0; i<strlen(a); i++ ) {
		LCDSendChar( a[i] );
    41d0:	e7d40005 	ldrb	r0, [r4, r5]
    41d4:	ebffffd4 	bl	412c <LCDSendChar>
    41d8:	e2844001 	add	r4, r4, #1	; 0x1
    41dc:	e1a00005 	mov	r0, r5
    41e0:	eb000695 	bl	5c3c <strlen>
    41e4:	e1500004 	cmp	r0, r4
    41e8:	8afffff8 	bhi	41d0 <LCDSendTxt+0x10>
	}
}
    41ec:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

000041f0 <LCDSendCommand>:
    41f0:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    41f4:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    41f8:	e284490a 	add	r4, r4, #163840	; 0x28000
    41fc:	e3a03a01 	mov	r3, #4096	; 0x1000
    4200:	e1a05000 	mov	r5, r0
    4204:	e584300c 	str	r3, [r4, #12]
    4208:	e3a00002 	mov	r0, #2	; 0x2
    420c:	ebffff9d 	bl	4088 <delay_ms>
    4210:	e594300c 	ldr	r3, [r4, #12]
    4214:	e38330f0 	orr	r3, r3, #240	; 0xf0
    4218:	e584300c 	str	r3, [r4, #12]
    421c:	e1e02005 	mvn	r2, r5
    4220:	e5943004 	ldr	r3, [r4, #4]
    4224:	e20220f0 	and	r2, r2, #240	; 0xf0
    4228:	e1e02002 	mvn	r2, r2
    422c:	e59f704c 	ldr	r7, [pc, #76]	; 4280 <.text+0x4280>
    4230:	e38330f0 	orr	r3, r3, #240	; 0xf0
    4234:	e0023003 	and	r3, r2, r3
    4238:	e3a06b01 	mov	r6, #1024	; 0x400
    423c:	e5843004 	str	r3, [r4, #4]
    4240:	e5872000 	str	r2, [r7]
    4244:	e584600c 	str	r6, [r4, #12]
    4248:	ebffffae 	bl	4108 <E_Pulse>
    424c:	e594300c 	ldr	r3, [r4, #12]
    4250:	e38330f0 	orr	r3, r3, #240	; 0xf0
    4254:	e584300c 	str	r3, [r4, #12]
    4258:	e5942004 	ldr	r2, [r4, #4]
    425c:	e1a05205 	mov	r5, r5, lsl #4
    4260:	e20550f0 	and	r5, r5, #240	; 0xf0
    4264:	e3c220f0 	bic	r2, r2, #240	; 0xf0
    4268:	e1852002 	orr	r2, r5, r2
    426c:	e5842004 	str	r2, [r4, #4]
    4270:	e584600c 	str	r6, [r4, #12]
    4274:	e5875000 	str	r5, [r7]
    4278:	e8bd40f0 	ldmia	sp!, {r4, r5, r6, r7, lr}
    427c:	eaffffa1 	b	4108 <E_Pulse>
    4280:	4000070c 	andmi	r0, r0, ip, lsl #14

00004284 <LCDInit>:
    4284:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4288:	e3a0420e 	mov	r4, #-536870912	; 0xe0000000
    428c:	e284490a 	add	r4, r4, #163840	; 0x28000
    4290:	e3a03b01 	mov	r3, #1024	; 0x400
    4294:	e3a02a01 	mov	r2, #4096	; 0x1000
    4298:	e584300c 	str	r3, [r4, #12]
    429c:	e2833b07 	add	r3, r3, #7168	; 0x1c00
    42a0:	e584200c 	str	r2, [r4, #12]
    42a4:	e3a05010 	mov	r5, #16	; 0x10
    42a8:	e584300c 	str	r3, [r4, #12]
    42ac:	e3a06020 	mov	r6, #32	; 0x20
    42b0:	e3a07040 	mov	r7, #64	; 0x40
    42b4:	e3a08080 	mov	r8, #128	; 0x80
    42b8:	e3a0006e 	mov	r0, #110	; 0x6e
    42bc:	ebffff71 	bl	4088 <delay_ms>
    42c0:	e5845004 	str	r5, [r4, #4]
    42c4:	e5846004 	str	r6, [r4, #4]
    42c8:	e584700c 	str	r7, [r4, #12]
    42cc:	e584800c 	str	r8, [r4, #12]
    42d0:	ebffff8c 	bl	4108 <E_Pulse>
    42d4:	e3a0000a 	mov	r0, #10	; 0xa
    42d8:	ebffff6a 	bl	4088 <delay_ms>
    42dc:	e5845004 	str	r5, [r4, #4]
    42e0:	e5846004 	str	r6, [r4, #4]
    42e4:	e584700c 	str	r7, [r4, #12]
    42e8:	e584800c 	str	r8, [r4, #12]
    42ec:	ebffff85 	bl	4108 <E_Pulse>
    42f0:	e3a0000a 	mov	r0, #10	; 0xa
    42f4:	ebffff63 	bl	4088 <delay_ms>
    42f8:	e5845004 	str	r5, [r4, #4]
    42fc:	e5846004 	str	r6, [r4, #4]
    4300:	e584700c 	str	r7, [r4, #12]
    4304:	e584800c 	str	r8, [r4, #12]
    4308:	ebffff7e 	bl	4108 <E_Pulse>
    430c:	e3a0000a 	mov	r0, #10	; 0xa
    4310:	ebffff5c 	bl	4088 <delay_ms>
    4314:	e584500c 	str	r5, [r4, #12]
    4318:	e5846004 	str	r6, [r4, #4]
    431c:	e584700c 	str	r7, [r4, #12]
    4320:	e584800c 	str	r8, [r4, #12]
    4324:	ebffff77 	bl	4108 <E_Pulse>
    4328:	e3a0000a 	mov	r0, #10	; 0xa
    432c:	e8bd41f0 	ldmia	sp!, {r4, r5, r6, r7, r8, lr}
    4330:	eaffff54 	b	4088 <delay_ms>

00004334 <itoa>:

#define __MAX_INT_CHARS 7

char* itoa(int16_t i)
{
    4334:	e1a00800 	mov	r0, r0, lsl #16
    4338:	e1a00820 	mov	r0, r0, lsr #16
	static char a[__MAX_INT_CHARS];
	
	char *b = a + sizeof(a) - 1;
	
	uint8_t   sign = (i < 0);
    433c:	e1a0c800 	mov	ip, r0, lsl #16
    4340:	e92d4010 	stmdb	sp!, {r4, lr}

	if (sign) i = -i;
    4344:	e1b04fac 	movs	r4, ip, lsr #31
    4348:	12603000 	rsbne	r3, r0, #0	; 0x0
    434c:	11a0c803 	movne	ip, r3, lsl #16
	
	*b = 0;
    4350:	e59f3054 	ldr	r3, [pc, #84]	; 43ac <.text+0x43ac>
    4354:	e3a02000 	mov	r2, #0	; 0x0
    4358:	e5e32006 	strb	r2, [r3, #6]!
    435c:	e1a0e003 	mov	lr, r3
    4360:	ea000000 	b	4368 <itoa+0x34>
    4364:	e1a0c800 	mov	ip, r0, lsl #16
	
	do {
		*--b = '0' + (i % 10);
    4368:	e59f2040 	ldr	r2, [pc, #64]	; 43b0 <.text+0x43b0>
    436c:	e1a0184c 	mov	r1, ip, asr #16
    4370:	e0c03192 	smull	r3, r0, r2, r1
    4374:	e1a03fcc 	mov	r3, ip, asr #31
    4378:	e0633140 	rsb	r3, r3, r0, asr #2
    437c:	e0832103 	add	r2, r3, r3, lsl #2
    4380:	e0411082 	sub	r1, r1, r2, lsl #1
		i /= 10;
    4384:	e1a03803 	mov	r3, r3, lsl #16
    4388:	e2811030 	add	r1, r1, #48	; 0x30
	} while (i);
    438c:	e1b00823 	movs	r0, r3, lsr #16
    4390:	e56e1001 	strb	r1, [lr, #-1]!
    4394:	1afffff2 	bne	4364 <itoa+0x30>
	
	if (sign) *--b = '-';
    4398:	e3540000 	cmp	r4, #0	; 0x0
    439c:	e1a0000e 	mov	r0, lr
    43a0:	13a0302d 	movne	r3, #45	; 0x2d
    43a4:	15603001 	strneb	r3, [r0, #-1]!
	
	return b;
}
    43a8:	e8bd8010 	ldmia	sp!, {r4, pc}
    43ac:	4000047c 	andmi	r0, r0, ip, ror r4
    43b0:	66666667 	strvsbt	r6, [r6], -r7, ror #12

000043b4 <__itoa>:
    43b4:	e1a0c00d 	mov	ip, sp
    43b8:	e92ddff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr, pc}
    43bc:	e1a08003 	mov	r8, r3
    43c0:	e2833007 	add	r3, r3, #7	; 0x7
    43c4:	e24cb004 	sub	fp, ip, #4	; 0x4
    43c8:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    43cc:	e3c33003 	bic	r3, r3, #3	; 0x3
    43d0:	e24b9038 	sub	r9, fp, #56	; 0x38
    43d4:	e50bd064 	str	sp, [fp, #-100]
    43d8:	e063d00d 	rsb	sp, r3, sp
    43dc:	e1a0312d 	mov	r3, sp, lsr #2
    43e0:	e1a07001 	mov	r7, r1
    43e4:	e1a04002 	mov	r4, r2
    43e8:	e1a06000 	mov	r6, r0
    43ec:	e59f1158 	ldr	r1, [pc, #344]	; 454c <.text+0x454c>
    43f0:	e1a00009 	mov	r0, r9
    43f4:	e3a02010 	mov	r2, #16	; 0x10
    43f8:	e1a0a103 	mov	sl, r3, lsl #2
    43fc:	eb0005ee 	bl	5bbc <memcpy>
    4400:	e3540010 	cmp	r4, #16	; 0x10
    4404:	d3a03000 	movle	r3, #0	; 0x0
    4408:	c3a03001 	movgt	r3, #1	; 0x1
    440c:	e3570000 	cmp	r7, #0	; 0x0
    4410:	11a05003 	movne	r5, r3
    4414:	03835001 	orreq	r5, r3, #1	; 0x1
    4418:	e3550000 	cmp	r5, #0	; 0x0
    441c:	0a000004 	beq	4434 <__itoa+0x80>
    4420:	e3a07000 	mov	r7, #0	; 0x0
    4424:	e51bd064 	ldr	sp, [fp, #-100]
    4428:	e1a00007 	mov	r0, r7
    442c:	e24bd028 	sub	sp, fp, #40	; 0x28
    4430:	e89daff0 	ldmia	sp, {r4, r5, r6, r7, r8, r9, sl, fp, sp, pc}
    4434:	e3540001 	cmp	r4, #1	; 0x1
    4438:	dafffff8 	ble	4420 <__itoa+0x6c>
    443c:	e3560000 	cmp	r6, #0	; 0x0
    4440:	0a00003c 	beq	4538 <__itoa+0x184>
    4444:	e1a00004 	mov	r0, r4
    4448:	eb000e96 	bl	7ea8 <__aeabi_i2d>
    444c:	e50b0060 	str	r0, [fp, #-96]
    4450:	e50b105c 	str	r1, [fp, #-92]
    4454:	e265001f 	rsb	r0, r5, #31	; 0x1f
    4458:	eb000e92 	bl	7ea8 <__aeabi_i2d>
    445c:	e1a02000 	mov	r2, r0
    4460:	e1a03001 	mov	r3, r1
    4464:	e24b0060 	sub	r0, fp, #96	; 0x60
    4468:	e8900003 	ldmia	r0, {r0, r1}
    446c:	eb000662 	bl	5dfc <pow>
    4470:	eb00102d 	bl	852c <__aeabi_d2iz>
    4474:	e1a04000 	mov	r4, r0
    4478:	e1a01004 	mov	r1, r4
    447c:	e1a00006 	mov	r0, r6
    4480:	eb000d3f 	bl	7984 <__aeabi_idiv>
    4484:	e0010490 	mul	r1, r0, r4
    4488:	e24b2028 	sub	r2, fp, #40	; 0x28
    448c:	e0823000 	add	r3, r2, r0
    4490:	e5532010 	ldrb	r2, [r3, #-16]
    4494:	e2453058 	sub	r3, r5, #88	; 0x58
    4498:	e2855001 	add	r5, r5, #1	; 0x1
    449c:	e3550020 	cmp	r5, #32	; 0x20
    44a0:	e7c3200b 	strb	r2, [r3, fp]
    44a4:	e0616006 	rsb	r6, r1, r6
    44a8:	1affffe9 	bne	4454 <__itoa+0xa0>
    44ac:	e2683020 	rsb	r3, r8, #32	; 0x20
    44b0:	e353001f 	cmp	r3, #31	; 0x1f
    44b4:	ca000007 	bgt	44d8 <__itoa+0x124>
    44b8:	e24b1058 	sub	r1, fp, #88	; 0x58
    44bc:	e0812003 	add	r2, r1, r3
    44c0:	e3a01000 	mov	r1, #0	; 0x0
    44c4:	e4d23001 	ldrb	r3, [r2], #1
    44c8:	e1520009 	cmp	r2, r9
    44cc:	e7c1300a 	strb	r3, [r1, sl]
    44d0:	e2811001 	add	r1, r1, #1	; 0x1
    44d4:	1afffffa 	bne	44c4 <__itoa+0x110>
    44d8:	e3a03000 	mov	r3, #0	; 0x0
    44dc:	e7ca3008 	strb	r3, [sl, r8]
    44e0:	e5da3000 	ldrb	r3, [sl]
    44e4:	e3530000 	cmp	r3, #0	; 0x0
    44e8:	e1a0400a 	mov	r4, sl
    44ec:	0a000008 	beq	4514 <__itoa+0x160>
    44f0:	e3530030 	cmp	r3, #48	; 0x30
    44f4:	01a0200a 	moveq	r2, sl
    44f8:	0a000002 	beq	4508 <__itoa+0x154>
    44fc:	ea000004 	b	4514 <__itoa+0x160>
    4500:	e3530030 	cmp	r3, #48	; 0x30
    4504:	1a000009 	bne	4530 <__itoa+0x17c>
    4508:	e5f23001 	ldrb	r3, [r2, #1]!
    450c:	e3530000 	cmp	r3, #0	; 0x0
    4510:	1afffffa 	bne	4500 <__itoa+0x14c>
    4514:	e1a00004 	mov	r0, r4
    4518:	eb0005c7 	bl	5c3c <strlen>
    451c:	e1a01004 	mov	r1, r4
    4520:	e2802001 	add	r2, r0, #1	; 0x1
    4524:	e1a00007 	mov	r0, r7
    4528:	eb0005a3 	bl	5bbc <memcpy>
    452c:	eaffffbc 	b	4424 <__itoa+0x70>
    4530:	e1a04002 	mov	r4, r2
    4534:	eafffff6 	b	4514 <__itoa+0x160>
    4538:	e1a00007 	mov	r0, r7
    453c:	e59f100c 	ldr	r1, [pc, #12]	; 4550 <.text+0x4550>
    4540:	e3a02002 	mov	r2, #2	; 0x2
    4544:	eb00059c 	bl	5bbc <memcpy>
    4548:	eaffffb5 	b	4424 <__itoa+0x70>
    454c:	000085fc 	streqd	r8, [r0], -ip
    4550:	00008f44 	andeq	r8, r0, r4, asr #30

00004554 <i2cInit>:
//

void i2cInit( void )
{
	bI2c_lock = FALSE;						// Initilise the lock flag
    4554:	e59f3058 	ldr	r3, [pc, #88]	; 45b4 <.text+0x45b4>
    4558:	e3a02000 	mov	r2, #0	; 0x0
    455c:	e5832000 	str	r2, [r3]

	//PINSEL0  |= 0x30c00000; 				// Activate I2C 1
	PINSEL0 = ( PINSEL0 & ~0xF0 ) | 0x50; 	// Activate I2C 0
    4560:	e3a0020e 	mov	r0, #-536870912	; 0xe0000000
    4564:	e280290b 	add	r2, r0, #180224	; 0x2c000
    4568:	e5923000 	ldr	r3, [r2]
    456c:	e3c330f0 	bic	r3, r3, #240	; 0xf0
    4570:	e3833050 	orr	r3, r3, #80	; 0x50
    4574:	e5823000 	str	r3, [r2]
	
	// initialize the interrupt vector
	VICIntSelect &= ~VIC_BIT (VIC_I2C0 );	// I2C selected as IRQ
    4578:	e3e01000 	mvn	r1, #0	; 0x0
    457c:	e5113ff3 	ldr	r3, [r1, #-4083]
    4580:	e3c33c02 	bic	r3, r3, #512	; 0x200
    4584:	e5013ff3 	str	r3, [r1, #-4083]
	VICVectCntl2 = VIC_ENABLE | VIC_I2C0;
    4588:	e3a02029 	mov	r2, #41	; 0x29
	VICVectAddr2 = (uint32_t)I2CISR;    	// address of the ISR
    458c:	e59f3024 	ldr	r3, [pc, #36]	; 45b8 <.text+0x45b8>
    4590:	e5012df7 	str	r2, [r1, #-3575]
	VICIntEnable = VIC_BIT( VIC_I2C0 );    	// I2C interrupt enabled
	
	I20SCLH = 75;	// Set bit rate 60.0000hz / (SCLH + SCLL ) = 60.0000/(75+75) = 400.0Khz
    4594:	e2800907 	add	r0, r0, #114688	; 0x1c000
    4598:	e3a0c04b 	mov	ip, #75	; 0x4b
    459c:	e3a02c02 	mov	r2, #512	; 0x200
    45a0:	e5013ef7 	str	r3, [r1, #-3831]
    45a4:	e5012fef 	str	r2, [r1, #-4079]
    45a8:	e1c0c1b0 	strh	ip, [r0, #16]
	I20SCLL = 75;
    45ac:	e1c0c1b4 	strh	ip, [r0, #20]
}
    45b0:	e12fff1e 	bx	lr
    45b4:	40000714 	andmi	r0, r0, r4, lsl r7
    45b8:	000045bc 	streqh	r4, [r0], -ip

000045bc <I2CISR>:

///////////////////////////////////////////////////////////////////////////////
// writeEEPROM
//
// return: True on success.

boolean writeEEPROM( uint16_t addr, uint8_t data )
{
	boolean rv;
	
	rv = I2CTransferByte( EEPROM_ADDR, addr, 1, (unsigned char *)&data );
	pause( TEN_MS );	// HACK!!! TODO Remove
	
	return rv;
}

///////////////////////////////////////////////////////////////////////////////
// readEEPROM
//
// Return: -1 on failure, data on success.

int16_t readEEPROM( uint16_t addr )
{
	unsigned mycpsr;
	uint32_t start;
	
	// Write address
	if ( !I2CTransferByte( EEPROM_ADDR, addr, 0, NULL ) ) {
		return -1;	
	}
	
	//  Read content of address
	if ( !I2CTransferByte( EEPROM_ADDR + 1, addr, 1, NULL ) ) {	
		return -1;
	}
	
	// Wait until data is available
	start = getSysTICs();
	while ( bI2c_lock ) {			// Wait for interrupt to signal end of I2C activity
		
		if ( getElapsedSysTICs( start ) > HUNDRED_MS ) { 
			return -1;
		}
		
		mycpsr = disableIRQ();
		WDFEED = 0xAA; WDFEED = 0x55;
		restoreIRQ( mycpsr );
	}
	
	return I2CData[ 0 ];
}

///////////////////////////////////////////////////////////////////////////////
// I2CTransferByte
//

boolean I2CTransferByte( unsigned char I2CAddr,
							unsigned short memAddr,
							unsigned char count,
							unsigned char *pData )
{
	unsigned mycpsr;
	unsigned char i;
	uint32_t start;

	// CAN only hadle MAX_I2C_DATA + sizeof( addr )
	if ( I2CAddr & 1 ) {
		if ( count > MAX_I2C_DATA ) return FALSE;
	}
	else {
		if ( count > ( MAX_I2C_DATA - 2 ) ) return FALSE;
	}
	
	// Wait until last I2C operation has finished.
	start = getSysTICs();
	while ( bI2c_lock ) {			// Wait for interrupt to signal end of I2C activity
		
		if ( getElapsedSysTICs( start ) > HUNDRED_MS ) {
			return FALSE;
		}
		
		mycpsr = disableIRQ();
		WDFEED = 0xAA; WDFEED = 0x55;
		restoreIRQ( mycpsr );
		
	}
	
	bI2c_lock = TRUE;                  		// Set I2C bus as active
	I2CAddress = I2CAddr;					// Sava I2C address

	// If write operation the address should also be sent
	if ( I2CAddr & 1 ) {
	
		// Read
		I2Counter = count;
		pI2CData = pData;					// Point at user buffer
		
	}
	else {
	
		// Write
		I2Counter = count + 2;				// Add address length to count
		I2CData[ 0 ] = ( memAddr >> 8 );	// MSB of memeory address
		I2CData[ 1 ] = memAddr & 0xff;		// LSB of address
		
		for ( i=0; i<count; i++ ) {
			I2CData[ i + 2 ] = pData[ i ];
		}
		
		pI2CData = I2CData;		// Point at internal buffer

	}
	
	I20CONCLR 	= 0x000000FF;	// Clear all I2C settings
	I20CONSET 	= 0x00000040; 	// Enable the I2C interface
	I20CONSET 	= 0x00000020; 	// Start condition
			
	return TRUE;
}





///////////////////////////////////////////////////////////////////////////////
// I2CISR
//

void I2CISR( void )					// I2C interrupt routine
{
	// perform proper ISR entry so thumb-interwork works properly
	ISR_ENTRY();
    45bc:	e24ee004 	sub	lr, lr, #4	; 0x4
    45c0:	e92d5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    45c4:	e14f1000 	mrs	r1, SPSR
    45c8:	e92d0002 	stmdb	sp!, {r1}
	
	switch ( I20STAT ) {				// Read result code and switch to next action
    45cc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    45d0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    45d4:	e5d32004 	ldrb	r2, [r3, #4]
    45d8:	e3520058 	cmp	r2, #88	; 0x58
    45dc:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
    45e0:	ea000062 	b	4770 <.text+0x4770>
    45e4:	000047bc 	streqh	r4, [r0], -ip
    45e8:	00004770 	andeq	r4, r0, r0, ror r7
    45ec:	00004770 	andeq	r4, r0, r0, ror r7
    45f0:	00004770 	andeq	r4, r0, r0, ror r7
    45f4:	00004770 	andeq	r4, r0, r0, ror r7
    45f8:	00004770 	andeq	r4, r0, r0, ror r7
    45fc:	00004770 	andeq	r4, r0, r0, ror r7
    4600:	00004770 	andeq	r4, r0, r0, ror r7
    4604:	00004888 	andeq	r4, r0, r8, lsl #17
    4608:	00004770 	andeq	r4, r0, r0, ror r7
    460c:	00004770 	andeq	r4, r0, r0, ror r7
    4610:	00004770 	andeq	r4, r0, r0, ror r7
    4614:	00004770 	andeq	r4, r0, r0, ror r7
    4618:	00004770 	andeq	r4, r0, r0, ror r7
    461c:	00004770 	andeq	r4, r0, r0, ror r7
    4620:	00004770 	andeq	r4, r0, r0, ror r7
    4624:	00004848 	andeq	r4, r0, r8, asr #16
    4628:	00004770 	andeq	r4, r0, r0, ror r7
    462c:	00004770 	andeq	r4, r0, r0, ror r7
    4630:	00004770 	andeq	r4, r0, r0, ror r7
    4634:	00004770 	andeq	r4, r0, r0, ror r7
    4638:	00004770 	andeq	r4, r0, r0, ror r7
    463c:	00004770 	andeq	r4, r0, r0, ror r7
    4640:	00004770 	andeq	r4, r0, r0, ror r7
    4644:	00004868 	andeq	r4, r0, r8, ror #16
    4648:	00004770 	andeq	r4, r0, r0, ror r7
    464c:	00004770 	andeq	r4, r0, r0, ror r7
    4650:	00004770 	andeq	r4, r0, r0, ror r7
    4654:	00004770 	andeq	r4, r0, r0, ror r7
    4658:	00004770 	andeq	r4, r0, r0, ror r7
    465c:	00004770 	andeq	r4, r0, r0, ror r7
    4660:	00004770 	andeq	r4, r0, r0, ror r7
    4664:	0000479c 	muleq	r0, ip, r7
    4668:	00004770 	andeq	r4, r0, r0, ror r7
    466c:	00004770 	andeq	r4, r0, r0, ror r7
    4670:	00004770 	andeq	r4, r0, r0, ror r7
    4674:	00004770 	andeq	r4, r0, r0, ror r7
    4678:	00004770 	andeq	r4, r0, r0, ror r7
    467c:	00004770 	andeq	r4, r0, r0, ror r7
    4680:	00004770 	andeq	r4, r0, r0, ror r7
    4684:	00004804 	andeq	r4, r0, r4, lsl #16
    4688:	00004770 	andeq	r4, r0, r0, ror r7
    468c:	00004770 	andeq	r4, r0, r0, ror r7
    4690:	00004770 	andeq	r4, r0, r0, ror r7
    4694:	00004770 	andeq	r4, r0, r0, ror r7
    4698:	00004770 	andeq	r4, r0, r0, ror r7
    469c:	00004770 	andeq	r4, r0, r0, ror r7
    46a0:	00004770 	andeq	r4, r0, r0, ror r7
    46a4:	0000479c 	muleq	r0, ip, r7
    46a8:	00004770 	andeq	r4, r0, r0, ror r7
    46ac:	00004770 	andeq	r4, r0, r0, ror r7
    46b0:	00004770 	andeq	r4, r0, r0, ror r7
    46b4:	00004770 	andeq	r4, r0, r0, ror r7
    46b8:	00004770 	andeq	r4, r0, r0, ror r7
    46bc:	00004770 	andeq	r4, r0, r0, ror r7
    46c0:	00004770 	andeq	r4, r0, r0, ror r7
    46c4:	000047f0 	streqd	r4, [r0], -r0
    46c8:	00004770 	andeq	r4, r0, r0, ror r7
    46cc:	00004770 	andeq	r4, r0, r0, ror r7
    46d0:	00004770 	andeq	r4, r0, r0, ror r7
    46d4:	00004770 	andeq	r4, r0, r0, ror r7
    46d8:	00004770 	andeq	r4, r0, r0, ror r7
    46dc:	00004770 	andeq	r4, r0, r0, ror r7
    46e0:	00004770 	andeq	r4, r0, r0, ror r7
    46e4:	000047dc 	ldreqd	r4, [r0], -ip
    46e8:	00004770 	andeq	r4, r0, r0, ror r7
    46ec:	00004770 	andeq	r4, r0, r0, ror r7
    46f0:	00004770 	andeq	r4, r0, r0, ror r7
    46f4:	00004770 	andeq	r4, r0, r0, ror r7
    46f8:	00004770 	andeq	r4, r0, r0, ror r7
    46fc:	00004770 	andeq	r4, r0, r0, ror r7
    4700:	00004770 	andeq	r4, r0, r0, ror r7
    4704:	000047bc 	streqh	r4, [r0], -ip
    4708:	00004770 	andeq	r4, r0, r0, ror r7
    470c:	00004770 	andeq	r4, r0, r0, ror r7
    4710:	00004770 	andeq	r4, r0, r0, ror r7
    4714:	00004770 	andeq	r4, r0, r0, ror r7
    4718:	00004770 	andeq	r4, r0, r0, ror r7
    471c:	00004770 	andeq	r4, r0, r0, ror r7
    4720:	00004770 	andeq	r4, r0, r0, ror r7
    4724:	00004748 	andeq	r4, r0, r8, asr #14
    4728:	00004770 	andeq	r4, r0, r0, ror r7
    472c:	00004770 	andeq	r4, r0, r0, ror r7
    4730:	00004770 	andeq	r4, r0, r0, ror r7
    4734:	00004770 	andeq	r4, r0, r0, ror r7
    4738:	00004770 	andeq	r4, r0, r0, ror r7
    473c:	00004770 	andeq	r4, r0, r0, ror r7
    4740:	00004770 	andeq	r4, r0, r0, ror r7
    4744:	00004748 	andeq	r4, r0, r8, asr #14
	
		// Start and Send byte conditions
		case 0x00:						// Bus errror
			I20CONSET = 0x10;			// STOP 
			bI2c_lock = FALSE;
			break;
		
		case 0x08:						// Start bit sent
			I20DAT = I2CAddress; 		// Send address and write bit
			I20CONCLR = 0x20;			// Clear start flag
			I20CONSET = 0x04;			// Set ACK bit
			break;

		case 0x10:
			I20DAT = I2CAddress; 		// Send address and write bit
			I20CONSET = 0x04;			// Set ACK bit
			break;

		case 0x18:						// Start Data
			I20DAT = *pI2CData++;		// Write data to tx register
			break;
			
		case 0x20:						// Slave address+W, Not ACK
			I20CONSET = 0x14;			// Set STOP and ACK bits
			bI2c_lock = FALSE;
			break;
		
		case 0x28:						// Data sent, ACK
			I2Counter--;
			if ( 0 == I2Counter ) {	
				I20CONSET = 0x14;		// Set STOP
				bI2c_lock = FALSE;
			}
			else {
				I20DAT = *pI2CData++;	// Write data to tx register
				I20CONSET = 0x04;		// Set AA bit
			}
			break;

		case 0x30:						// Data sent, NOT Ack
			I20CONSET = 0x14;			// Set STOP and ACK bits
			bI2c_lock = FALSE;
			break;

		case 0x38:						// Arbitration lost
			I20CONSET = 0x24;			// Set STAT and ACK bits
			break;
			
		// * * * Receive byte conditions
		case 0x40:						// Slave Address + R, ACK
			I20CONSET = 0x04;			// Enable ACK for data byte
			break;

		case 0x48:						// Slave Address +R, Not Ack
			I20CONSET = 0x10;			// Set STOP and ACK bits
			bI2c_lock = FALSE;
			break;

		case 0x50:						// Data Received, ACK 
			I2CData[ 0 ] = I20DAT;
			I20CONSET = 0x10;			// Set STOP bit
			bI2c_lock = FALSE;
			break;

		case 0x58:						// Data Received, Not Ack
			I2CData[ 0 ] = I20DAT;
    4748:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    474c:	e2811907 	add	r1, r1, #114688	; 0x1c000
    4750:	e5d10008 	ldrb	r0, [r1, #8]
    4754:	e59f3170 	ldr	r3, [pc, #368]	; 48cc <.text+0x48cc>
    4758:	e5c30000 	strb	r0, [r3]
			I20CONSET = 0x10;			// Set STOP bit
			bI2c_lock = FALSE;
    475c:	e59f316c 	ldr	r3, [pc, #364]	; 48d0 <.text+0x48d0>
    4760:	e3a02010 	mov	r2, #16	; 0x10
    4764:	e3a00000 	mov	r0, #0	; 0x0
    4768:	e5c12000 	strb	r2, [r1]
    476c:	e5830000 	str	r0, [r3]
			break;

		default:
			break;

	}

	I20CONCLR = 0x08;					// Clear I2C interrupt flag
    4770:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4774:	e2833907 	add	r3, r3, #114688	; 0x1c000
    4778:	e3a02008 	mov	r2, #8	; 0x8
    477c:	e5c32018 	strb	r2, [r3, #24]
	VICVectAddr = 0x00000000;			// Clear interrupt in 
    4780:	e3a01000 	mov	r1, #0	; 0x0
    4784:	e3e03000 	mvn	r3, #0	; 0x0
    4788:	e5031fcf 	str	r1, [r3, #-4047]

	ISR_EXIT();                         // recover registers and return
    478c:	e8bd0002 	ldmia	sp!, {r1}
    4790:	e161f001 	msr	SPSR_c, r1
    4794:	e8fd9fff 	ldmia	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
}
    4798:	e12fff1e 	bx	lr
    479c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    47a0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    47a4:	e3a02014 	mov	r2, #20	; 0x14
    47a8:	e5c32000 	strb	r2, [r3]
    47ac:	e59f311c 	ldr	r3, [pc, #284]	; 48d0 <.text+0x48d0>
    47b0:	e3a01000 	mov	r1, #0	; 0x0
    47b4:	e5831000 	str	r1, [r3]
    47b8:	eaffffec 	b	4770 <.text+0x4770>
    47bc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    47c0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    47c4:	e3a02010 	mov	r2, #16	; 0x10
    47c8:	e5c32000 	strb	r2, [r3]
    47cc:	e59f30fc 	ldr	r3, [pc, #252]	; 48d0 <.text+0x48d0>
    47d0:	e3a01000 	mov	r1, #0	; 0x0
    47d4:	e5831000 	str	r1, [r3]
    47d8:	eaffffe4 	b	4770 <.text+0x4770>
    47dc:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    47e0:	e2833907 	add	r3, r3, #114688	; 0x1c000
    47e4:	e3a02004 	mov	r2, #4	; 0x4
    47e8:	e5c32000 	strb	r2, [r3]
    47ec:	eaffffdf 	b	4770 <.text+0x4770>
    47f0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    47f4:	e2833907 	add	r3, r3, #114688	; 0x1c000
    47f8:	e3a02024 	mov	r2, #36	; 0x24
    47fc:	e5c32000 	strb	r2, [r3]
    4800:	eaffffda 	b	4770 <.text+0x4770>
    4804:	e59f20c8 	ldr	r2, [pc, #200]	; 48d4 <.text+0x48d4>
    4808:	e5d23000 	ldrb	r3, [r2]
    480c:	e2433001 	sub	r3, r3, #1	; 0x1
    4810:	e20300ff 	and	r0, r3, #255	; 0xff
    4814:	e3500000 	cmp	r0, #0	; 0x0
    4818:	e5c20000 	strb	r0, [r2]
    481c:	0a000023 	beq	48b0 <.text+0x48b0>
    4820:	e59f00b0 	ldr	r0, [pc, #176]	; 48d8 <.text+0x48d8>
    4824:	e5901000 	ldr	r1, [r0]
    4828:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    482c:	e4d13001 	ldrb	r3, [r1], #1
    4830:	e2822907 	add	r2, r2, #114688	; 0x1c000
    4834:	e5c23008 	strb	r3, [r2, #8]
    4838:	e3a03004 	mov	r3, #4	; 0x4
    483c:	e5801000 	str	r1, [r0]
    4840:	e5c23000 	strb	r3, [r2]
    4844:	eaffffc9 	b	4770 <.text+0x4770>
    4848:	e59f208c 	ldr	r2, [pc, #140]	; 48dc <.text+0x48dc>
    484c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4850:	e5d21000 	ldrb	r1, [r2]
    4854:	e2833907 	add	r3, r3, #114688	; 0x1c000
    4858:	e3a02004 	mov	r2, #4	; 0x4
    485c:	e5c31008 	strb	r1, [r3, #8]
    4860:	e5c32000 	strb	r2, [r3]
    4864:	eaffffc1 	b	4770 <.text+0x4770>
    4868:	e59f0068 	ldr	r0, [pc, #104]	; 48d8 <.text+0x48d8>
    486c:	e5902000 	ldr	r2, [r0]
    4870:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    4874:	e4d21001 	ldrb	r1, [r2], #1
    4878:	e2833907 	add	r3, r3, #114688	; 0x1c000
    487c:	e5c31008 	strb	r1, [r3, #8]
    4880:	e5802000 	str	r2, [r0]
    4884:	eaffffb9 	b	4770 <.text+0x4770>
    4888:	e59f304c 	ldr	r3, [pc, #76]	; 48dc <.text+0x48dc>
    488c:	e3a0220e 	mov	r2, #-536870912	; 0xe0000000
    4890:	e5d31000 	ldrb	r1, [r3]
    4894:	e2822907 	add	r2, r2, #114688	; 0x1c000
    4898:	e5c21008 	strb	r1, [r2, #8]
    489c:	e3a03020 	mov	r3, #32	; 0x20
    48a0:	e3a01004 	mov	r1, #4	; 0x4
    48a4:	e5c23018 	strb	r3, [r2, #24]
    48a8:	e5c21000 	strb	r1, [r2]
    48ac:	eaffffaf 	b	4770 <.text+0x4770>
    48b0:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    48b4:	e59f1014 	ldr	r1, [pc, #20]	; 48d0 <.text+0x48d0>
    48b8:	e2833907 	add	r3, r3, #114688	; 0x1c000
    48bc:	e3a02014 	mov	r2, #20	; 0x14
    48c0:	e5c32000 	strb	r2, [r3]
    48c4:	e5810000 	str	r0, [r1]
    48c8:	eaffffa8 	b	4770 <.text+0x4770>
    48cc:	4000071c 	andmi	r0, r0, ip, lsl r7
    48d0:	40000714 	andmi	r0, r0, r4, lsl r7
    48d4:	40000710 	andmi	r0, r0, r0, lsl r7
    48d8:	40000718 	andmi	r0, r0, r8, lsl r7
    48dc:	40000711 	andmi	r0, r0, r1, lsl r7

000048e0 <I2CTransferByte>:
    48e0:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48e4:	e1a01801 	mov	r1, r1, lsl #16
    48e8:	e24dd004 	sub	sp, sp, #4	; 0x4
    48ec:	e1a01821 	mov	r1, r1, lsr #16
    48f0:	e210b001 	ands	fp, r0, #1	; 0x1
    48f4:	e1a0a003 	mov	sl, r3
    48f8:	e58d1000 	str	r1, [sp]
    48fc:	e20280ff 	and	r8, r2, #255	; 0xff
    4900:	e20090ff 	and	r9, r0, #255	; 0xff
    4904:	0a00001b 	beq	4978 <I2CTransferByte+0x98>
    4908:	e3580008 	cmp	r8, #8	; 0x8
    490c:	8a000016 	bhi	496c <I2CTransferByte+0x8c>
    4910:	ebfffb48 	bl	3638 <getSysTICs>
    4914:	e59f7110 	ldr	r7, [pc, #272]	; 4a2c <.text+0x4a2c>
    4918:	e5973000 	ldr	r3, [r7]
    491c:	e3530000 	cmp	r3, #0	; 0x0
    4920:	e1a06000 	mov	r6, r0
    4924:	0a000016 	beq	4984 <I2CTransferByte+0xa4>
    4928:	e3a0493d 	mov	r4, #999424	; 0xf4000
    492c:	e2844d09 	add	r4, r4, #576	; 0x240
    4930:	e3a0520e 	mov	r5, #-536870912	; 0xe0000000
    4934:	ea000008 	b	495c <I2CTransferByte+0x7c>
    4938:	ebfffdad 	bl	3ff4 <disableIRQ>
    493c:	e3e03055 	mvn	r3, #85	; 0x55
    4940:	e3a02055 	mov	r2, #85	; 0x55
    4944:	e5c53008 	strb	r3, [r5, #8]
    4948:	e5c52008 	strb	r2, [r5, #8]
    494c:	ebfffd92 	bl	3f9c <restoreIRQ>
    4950:	e5973000 	ldr	r3, [r7]
    4954:	e3530000 	cmp	r3, #0	; 0x0
    4958:	0a000009 	beq	4984 <I2CTransferByte+0xa4>
    495c:	e1a00006 	mov	r0, r6
    4960:	ebfffb42 	bl	3670 <getElapsedSysTICs>
    4964:	e1500004 	cmp	r0, r4
    4968:	9afffff2 	bls	4938 <I2CTransferByte+0x58>
    496c:	e3a00000 	mov	r0, #0	; 0x0
    4970:	e28dd004 	add	sp, sp, #4	; 0x4
    4974:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4978:	e3580006 	cmp	r8, #6	; 0x6
    497c:	9affffe3 	bls	4910 <I2CTransferByte+0x30>
    4980:	eafffff9 	b	496c <I2CTransferByte+0x8c>
    4984:	e59f20a4 	ldr	r2, [pc, #164]	; 4a30 <.text+0x4a30>
    4988:	e3a03001 	mov	r3, #1	; 0x1
    498c:	e35b0000 	cmp	fp, #0	; 0x0
    4990:	e5873000 	str	r3, [r7]
    4994:	e5c29000 	strb	r9, [r2]
    4998:	1a000015 	bne	49f4 <I2CTransferByte+0x114>
    499c:	e59d2000 	ldr	r2, [sp]
    49a0:	e1a01422 	mov	r1, r2, lsr #8
    49a4:	e59f2088 	ldr	r2, [pc, #136]	; 4a34 <.text+0x4a34>
    49a8:	e2883002 	add	r3, r8, #2	; 0x2
    49ac:	e59fc084 	ldr	ip, [pc, #132]	; 4a38 <.text+0x4a38>
    49b0:	e5c23000 	strb	r3, [r2]
    49b4:	e59d3000 	ldr	r3, [sp]
    49b8:	e3580000 	cmp	r8, #0	; 0x0
    49bc:	e5cc1000 	strb	r1, [ip]
    49c0:	e5cc3001 	strb	r3, [ip, #1]
    49c4:	0a000007 	beq	49e8 <I2CTransferByte+0x108>
    49c8:	e1a0000b 	mov	r0, fp
    49cc:	e2803001 	add	r3, r0, #1	; 0x1
    49d0:	e7d0100a 	ldrb	r1, [r0, sl]
    49d4:	e080200c 	add	r2, r0, ip
    49d8:	e20300ff 	and	r0, r3, #255	; 0xff
    49dc:	e1580000 	cmp	r8, r0
    49e0:	e5c21002 	strb	r1, [r2, #2]
    49e4:	1afffff8 	bne	49cc <I2CTransferByte+0xec>
    49e8:	e59f304c 	ldr	r3, [pc, #76]	; 4a3c <.text+0x4a3c>
    49ec:	e583c000 	str	ip, [r3]
    49f0:	ea000003 	b	4a04 <I2CTransferByte+0x124>
    49f4:	e59f3038 	ldr	r3, [pc, #56]	; 4a34 <.text+0x4a34>
    49f8:	e59f203c 	ldr	r2, [pc, #60]	; 4a3c <.text+0x4a3c>
    49fc:	e5c38000 	strb	r8, [r3]
    4a00:	e582a000 	str	sl, [r2]
    4a04:	e3a0120e 	mov	r1, #-536870912	; 0xe0000000
    4a08:	e2811907 	add	r1, r1, #114688	; 0x1c000
    4a0c:	e3e03000 	mvn	r3, #0	; 0x0
    4a10:	e5c13018 	strb	r3, [r1, #24]
    4a14:	e3a02040 	mov	r2, #64	; 0x40
    4a18:	e2833021 	add	r3, r3, #33	; 0x21
    4a1c:	e3a00001 	mov	r0, #1	; 0x1
    4a20:	e5c12000 	strb	r2, [r1]
    4a24:	e5c13000 	strb	r3, [r1]
    4a28:	eaffffd0 	b	4970 <I2CTransferByte+0x90>
    4a2c:	40000714 	andmi	r0, r0, r4, lsl r7
    4a30:	40000711 	andmi	r0, r0, r1, lsl r7
    4a34:	40000710 	andmi	r0, r0, r0, lsl r7
    4a38:	4000071c 	andmi	r0, r0, ip, lsl r7
    4a3c:	40000718 	andmi	r0, r0, r8, lsl r7

00004a40 <readEEPROM>:
    4a40:	e1a00800 	mov	r0, r0, lsl #16
    4a44:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    4a48:	e3a02000 	mov	r2, #0	; 0x0
    4a4c:	e1a04820 	mov	r4, r0, lsr #16
    4a50:	e1a01004 	mov	r1, r4
    4a54:	e3a000a8 	mov	r0, #168	; 0xa8
    4a58:	e1a03002 	mov	r3, r2
    4a5c:	ebffff9f 	bl	48e0 <I2CTransferByte>
    4a60:	e3500000 	cmp	r0, #0	; 0x0
    4a64:	1a000001 	bne	4a70 <readEEPROM+0x30>
    4a68:	e3e00000 	mvn	r0, #0	; 0x0
    4a6c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    4a70:	e1a01004 	mov	r1, r4
    4a74:	e3a000a9 	mov	r0, #169	; 0xa9
    4a78:	e3a02001 	mov	r2, #1	; 0x1
    4a7c:	e3a03000 	mov	r3, #0	; 0x0
    4a80:	ebffff96 	bl	48e0 <I2CTransferByte>
    4a84:	e3500000 	cmp	r0, #0	; 0x0
    4a88:	0afffff6 	beq	4a68 <readEEPROM+0x28>
    4a8c:	ebfffae9 	bl	3638 <getSysTICs>
    4a90:	e59f7058 	ldr	r7, [pc, #88]	; 4af0 <.text+0x4af0>
    4a94:	e5973000 	ldr	r3, [r7]
    4a98:	e3530000 	cmp	r3, #0	; 0x0
    4a9c:	e1a06000 	mov	r6, r0
    4aa0:	0a00000f 	beq	4ae4 <readEEPROM+0xa4>
    4aa4:	e3a0493d 	mov	r4, #999424	; 0xf4000
    4aa8:	e2844d09 	add	r4, r4, #576	; 0x240
    4aac:	e3a0520e 	mov	r5, #-536870912	; 0xe0000000
    4ab0:	e1a00006 	mov	r0, r6
    4ab4:	ebfffaed 	bl	3670 <getElapsedSysTICs>
    4ab8:	e1500004 	cmp	r0, r4
    4abc:	8affffe9 	bhi	4a68 <readEEPROM+0x28>
    4ac0:	ebfffd4b 	bl	3ff4 <disableIRQ>
    4ac4:	e3e03055 	mvn	r3, #85	; 0x55
    4ac8:	e3a02055 	mov	r2, #85	; 0x55
    4acc:	e5c53008 	strb	r3, [r5, #8]
    4ad0:	e5c52008 	strb	r2, [r5, #8]
    4ad4:	ebfffd30 	bl	3f9c <restoreIRQ>
    4ad8:	e5973000 	ldr	r3, [r7]
    4adc:	e3530000 	cmp	r3, #0	; 0x0
    4ae0:	1afffff2 	bne	4ab0 <readEEPROM+0x70>
    4ae4:	e59f3008 	ldr	r3, [pc, #8]	; 4af4 <.text+0x4af4>
    4ae8:	e5d30000 	ldrb	r0, [r3]
    4aec:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    4af0:	40000714 	andmi	r0, r0, r4, lsl r7
    4af4:	4000071c 	andmi	r0, r0, ip, lsl r7

00004af8 <writeEEPROM>:
    4af8:	e92d4010 	stmdb	sp!, {r4, lr}
    4afc:	e1a00800 	mov	r0, r0, lsl #16
    4b00:	e24dd004 	sub	sp, sp, #4	; 0x4
    4b04:	e5cd1000 	strb	r1, [sp]
    4b08:	e3a02001 	mov	r2, #1	; 0x1
    4b0c:	e1a01820 	mov	r1, r0, lsr #16
    4b10:	e1a0300d 	mov	r3, sp
    4b14:	e3a000a8 	mov	r0, #168	; 0xa8
    4b18:	ebffff70 	bl	48e0 <I2CTransferByte>
    4b1c:	e1a04000 	mov	r4, r0
    4b20:	e3a00b61 	mov	r0, #99328	; 0x18400
    4b24:	e2800e2a 	add	r0, r0, #672	; 0x2a0
    4b28:	ebfffad5 	bl	3684 <pause>
    4b2c:	e1a00004 	mov	r0, r4
    4b30:	e28dd004 	add	sp, sp, #4	; 0x4
    4b34:	e8bd8010 	ldmia	sp!, {r4, pc}

00004b38 <padBuf>:
// padBuf
//

char * padBuf( char *p )
{
    4b38:	e92d4010 	stmdb	sp!, {r4, lr}
    4b3c:	e1a04000 	mov	r4, r0
    4b40:	ea000004 	b	4b58 <padBuf+0x20>
	while ( strlen( p ) < 16 )  {
		strcat( p, " " );
    4b44:	eb00043c 	bl	5c3c <strlen>
    4b48:	e59f1020 	ldr	r1, [pc, #32]	; 4b70 <.text+0x4b70>
    4b4c:	e0800004 	add	r0, r0, r4
    4b50:	e3a02002 	mov	r2, #2	; 0x2
    4b54:	eb000418 	bl	5bbc <memcpy>
    4b58:	e1a00004 	mov	r0, r4
    4b5c:	eb000436 	bl	5c3c <strlen>
    4b60:	e350000f 	cmp	r0, #15	; 0xf
    4b64:	e1a00004 	mov	r0, r4
    4b68:	9afffff5 	bls	4b44 <padBuf+0xc>
	}
	
	return p;
}
    4b6c:	e8bd8010 	ldmia	sp!, {r4, pc}
    4b70:	00008de4 	andeq	r8, r0, r4, ror #27

00004b74 <clrDisplayBuf>:
    4b74:	e92d4010 	stmdb	sp!, {r4, lr}
    4b78:	e3a04011 	mov	r4, #17	; 0x11
    4b7c:	e1a02004 	mov	r2, r4
    4b80:	e3a01000 	mov	r1, #0	; 0x0
    4b84:	e59f0014 	ldr	r0, [pc, #20]	; 4ba0 <.text+0x4ba0>
    4b88:	eb000413 	bl	5bdc <memset>
    4b8c:	e59f0010 	ldr	r0, [pc, #16]	; 4ba4 <.text+0x4ba4>
    4b90:	e1a02004 	mov	r2, r4
    4b94:	e3a01000 	mov	r1, #0	; 0x0
    4b98:	e8bd4010 	ldmia	sp!, {r4, lr}
    4b9c:	ea00040e 	b	5bdc <memset>
    4ba0:	400004dc 	ldrmid	r0, [r0], -ip
    4ba4:	400004c0 	andmi	r0, r0, r0, asr #9

00004ba8 <SendCANFrame>:
// SendFrame
//

boolean SendCANFrame( uint32_t id, uint8_t size, uint8_t *pData )
{
    4ba8:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4bac:	e20170ff 	and	r7, r1, #255	; 0xff
	unsigned _cpsr;
	int i;
	char wrkbuf[ 10 ];
	char canmsg[ 50 ];
	const char *p;
	
	if ( size > 8 ) return false;
    4bb0:	e3570008 	cmp	r7, #8	; 0x8
    4bb4:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    4bb8:	e1a08002 	mov	r8, r2
    4bbc:	83a00000 	movhi	r0, #0	; 0x0
    4bc0:	9a000001 	bls	4bcc <SendCANFrame+0x24>
	
	_itoa( id, wrkbuf, 16 );
	strcpy( canmsg, "T" );
	
	// Add zeros in front of id so length always is 8
	for ( i=0; i < ( 8 - strlen( wrkbuf ) ); i++ ) {
		strcat( canmsg, "0" );
	}
	
		
	// Copy in id
	strcat( canmsg, wrkbuf );
	
	// data size
	_itoa( size, wrkbuf, 16 );
	strcat( canmsg, wrkbuf );
	
	for ( i=0; i<size; i++ ) {
		
		_itoa( pData[ i ], wrkbuf, 16 );
		
		if ( 1 == strlen( wrkbuf ) ) {
			strcat( canmsg, "0" );
		}
		
		strcat( canmsg, wrkbuf );
	}
	
	// add CR at end
	strcat( canmsg, "\r" );
	
	// Send the frame
	//uart1Puts( canmsg );
	
	p = canmsg;
	
	while ( 0 != *p ) {
		
		p = uart1Puts( p );
		
		_cpsr = disableIRQ();
		WDFEED = 0xAA; WDFEED = 0x55;
		restoreIRQ( _cpsr );
		
	}
	
	//uart0Puts( canmsg );
	//uart0Puts( "\r\n" );
	
	return true;
}
    4bc4:	e28dd03c 	add	sp, sp, #60	; 0x3c
    4bc8:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
    4bcc:	e28d5032 	add	r5, sp, #50	; 0x32
    4bd0:	e3a03020 	mov	r3, #32	; 0x20
    4bd4:	e1a01005 	mov	r1, r5
    4bd8:	e3a02010 	mov	r2, #16	; 0x10
    4bdc:	ebfffdf4 	bl	43b4 <__itoa>
    4be0:	e3a04000 	mov	r4, #0	; 0x0
    4be4:	e3a03054 	mov	r3, #84	; 0x54
    4be8:	e1a0600d 	mov	r6, sp
    4bec:	e1cd30b0 	strh	r3, [sp]
    4bf0:	ea000004 	b	4c08 <SendCANFrame+0x60>
    4bf4:	eb000410 	bl	5c3c <strlen>
    4bf8:	e59f1128 	ldr	r1, [pc, #296]	; 4d28 <.text+0x4d28>
    4bfc:	e0860000 	add	r0, r6, r0
    4c00:	e3a02002 	mov	r2, #2	; 0x2
    4c04:	eb0003ec 	bl	5bbc <memcpy>
    4c08:	e1a00005 	mov	r0, r5
    4c0c:	eb00040a 	bl	5c3c <strlen>
    4c10:	e2603008 	rsb	r3, r0, #8	; 0x8
    4c14:	e1530004 	cmp	r3, r4
    4c18:	e1a0000d 	mov	r0, sp
    4c1c:	e2844001 	add	r4, r4, #1	; 0x1
    4c20:	8afffff3 	bhi	4bf4 <SendCANFrame+0x4c>
    4c24:	e1a01005 	mov	r1, r5
    4c28:	eb0003f2 	bl	5bf8 <strcat>
    4c2c:	e1a01005 	mov	r1, r5
    4c30:	e3a02010 	mov	r2, #16	; 0x10
    4c34:	e3a03020 	mov	r3, #32	; 0x20
    4c38:	e1a00007 	mov	r0, r7
    4c3c:	ebfffddc 	bl	43b4 <__itoa>
    4c40:	e1a0000d 	mov	r0, sp
    4c44:	e1a01005 	mov	r1, r5
    4c48:	eb0003ea 	bl	5bf8 <strcat>
    4c4c:	e3570000 	cmp	r7, #0	; 0x0
    4c50:	da00001b 	ble	4cc4 <SendCANFrame+0x11c>
    4c54:	e3a04000 	mov	r4, #0	; 0x0
    4c58:	ea000004 	b	4c70 <SendCANFrame+0xc8>
    4c5c:	e1a0000d 	mov	r0, sp
    4c60:	e1a01005 	mov	r1, r5
    4c64:	eb0003e3 	bl	5bf8 <strcat>
    4c68:	e1570004 	cmp	r7, r4
    4c6c:	0a000014 	beq	4cc4 <SendCANFrame+0x11c>
    4c70:	e1a01005 	mov	r1, r5
    4c74:	e3a02010 	mov	r2, #16	; 0x10
    4c78:	e3a03020 	mov	r3, #32	; 0x20
    4c7c:	e7d40008 	ldrb	r0, [r4, r8]
    4c80:	ebfffdcb 	bl	43b4 <__itoa>
    4c84:	e1a00005 	mov	r0, r5
    4c88:	eb0003eb 	bl	5c3c <strlen>
    4c8c:	e3500001 	cmp	r0, #1	; 0x1
    4c90:	e2844001 	add	r4, r4, #1	; 0x1
    4c94:	e1a0000d 	mov	r0, sp
    4c98:	1affffef 	bne	4c5c <SendCANFrame+0xb4>
    4c9c:	eb0003e6 	bl	5c3c <strlen>
    4ca0:	e59f1080 	ldr	r1, [pc, #128]	; 4d28 <.text+0x4d28>
    4ca4:	e3a02002 	mov	r2, #2	; 0x2
    4ca8:	e0860000 	add	r0, r6, r0
    4cac:	eb0003c2 	bl	5bbc <memcpy>
    4cb0:	e1a0000d 	mov	r0, sp
    4cb4:	e1a01005 	mov	r1, r5
    4cb8:	eb0003ce 	bl	5bf8 <strcat>
    4cbc:	e1570004 	cmp	r7, r4
    4cc0:	1affffea 	bne	4c70 <SendCANFrame+0xc8>
    4cc4:	e1a0000d 	mov	r0, sp
    4cc8:	eb0003db 	bl	5c3c <strlen>
    4ccc:	e59f1058 	ldr	r1, [pc, #88]	; 4d2c <.text+0x4d2c>
    4cd0:	e0860000 	add	r0, r6, r0
    4cd4:	e3a02002 	mov	r2, #2	; 0x2
    4cd8:	eb0003b7 	bl	5bbc <memcpy>
    4cdc:	e5dd3000 	ldrb	r3, [sp]
    4ce0:	e3530000 	cmp	r3, #0	; 0x0
    4ce4:	0a00000d 	beq	4d20 <SendCANFrame+0x178>
    4ce8:	e1a04006 	mov	r4, r6
    4cec:	e3a0520e 	mov	r5, #-536870912	; 0xe0000000
    4cf0:	e3e07055 	mvn	r7, #85	; 0x55
    4cf4:	e3a06055 	mov	r6, #85	; 0x55
    4cf8:	e1a00004 	mov	r0, r4
    4cfc:	ebfffb76 	bl	3adc <uart1Puts>
    4d00:	e1a04000 	mov	r4, r0
    4d04:	ebfffcba 	bl	3ff4 <disableIRQ>
    4d08:	e5c57008 	strb	r7, [r5, #8]
    4d0c:	e5c56008 	strb	r6, [r5, #8]
    4d10:	ebfffca1 	bl	3f9c <restoreIRQ>
    4d14:	e5d43000 	ldrb	r3, [r4]
    4d18:	e3530000 	cmp	r3, #0	; 0x0
    4d1c:	1afffff5 	bne	4cf8 <SendCANFrame+0x150>
    4d20:	e3a00001 	mov	r0, #1	; 0x1
    4d24:	eaffffa6 	b	4bc4 <SendCANFrame+0x1c>
    4d28:	00008f44 	andeq	r8, r0, r4, asr #30
    4d2c:	00008f48 	andeq	r8, r0, r8, asr #30

00004d30 <getCANFrame>:


///////////////////////////////////////////////////////////////////////////////
// getFrame
//

boolean getCANFrame( uint32_t *pid, uint8_t *psize, uint8_t *pData )
{
    4d30:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	int c;
	
	char * pEnd;
	static char canmsg[ 50 ];
	static int cnt;
	static boolean bMsg = false;
	
	// Must be valid pointers
	if ( NULL == pid ) return false;
    4d34:	e3500000 	cmp	r0, #0	; 0x0
    4d38:	e24dd008 	sub	sp, sp, #8	; 0x8
    4d3c:	e58d0000 	str	r0, [sp]
    4d40:	e1a09001 	mov	r9, r1
    4d44:	e1a0b002 	mov	fp, r2
    4d48:	0a00001f 	beq	4dcc <getCANFrame+0x9c>
	if ( NULL == psize ) return false;
    4d4c:	e3510000 	cmp	r1, #0	; 0x0
    4d50:	0a00001d 	beq	4dcc <getCANFrame+0x9c>
	if ( NULL == pData ) return false;
    4d54:	e3520000 	cmp	r2, #0	; 0x0
    4d58:	0a00001b 	beq	4dcc <getCANFrame+0x9c>
	
	// If no character in the queue => No message
	while ( -1 != ( c = uart1Getch() ) ) {
    4d5c:	ebfffaf8 	bl	3944 <uart1Getch>
    4d60:	e3700001 	cmn	r0, #1	; 0x1
	
		if ( bMsg ) {
		
			if ( 0x0d == c ) {
			
				// A full frame received
				//		Format iiiiiiiidxxxxxxxxxxxxxxxx
				//			iiiiiiii - id
				//			d - Number of databytes
				//			xxx....databytes
				
				
				// Get datacount first
				*psize = ( canmsg[ 8 ] - 0x30 );
				canmsg[ 8 ] = 0;
				
				*pid = strtoul( canmsg, &pEnd, 16 );
				
				strcpy( canmsg, canmsg + 9 );
				for ( i=*psize-1; i>=0; i-- ) {
					pData[ i ] = (unsigned char)strtoul( canmsg + 2 * i, &pEnd, 16 );
					canmsg[ 2 * i ] = 0;
				}
				
				SendCANFrame( *pid, *psize, pData );
				cnt = 0;
				bMsg = false;
				return true;
				
			}
			else {
				canmsg[ cnt ] = (char)c;
    4d64:	e59f4138 	ldr	r4, [pc, #312]	; 4ea4 <.text+0x4ea4>
    4d68:	e59fc138 	ldr	ip, [pc, #312]	; 4ea8 <.text+0x4ea8>
    4d6c:	e59f5138 	ldr	r5, [pc, #312]	; 4eac <.text+0x4eac>
				cnt++;
				canmsg[ cnt ] = 0;
    4d70:	e3a0e000 	mov	lr, #0	; 0x0
    4d74:	0a000014 	beq	4dcc <getCANFrame+0x9c>
    4d78:	e59c1000 	ldr	r1, [ip]
    4d7c:	e3510000 	cmp	r1, #0	; 0x0
    4d80:	e1a0800c 	mov	r8, ip
    4d84:	0a000013 	beq	4dd8 <getCANFrame+0xa8>
    4d88:	e350000d 	cmp	r0, #13	; 0xd
    4d8c:	0a000017 	beq	4df0 <getCANFrame+0xc0>
    4d90:	e5942000 	ldr	r2, [r4]
    4d94:	e2823001 	add	r3, r2, #1	; 0x1
				if ( cnt > sizeof( canmsg ) ) {
    4d98:	e3530032 	cmp	r3, #50	; 0x32
    4d9c:	e7c50002 	strb	r0, [r5, r2]
    4da0:	e5843000 	str	r3, [r4]
    4da4:	e7c5e003 	strb	lr, [r5, r3]
					// Something is wrong - start again (no frame is this long)
					cnt = 0;
    4da8:	8584e000 	strhi	lr, [r4]
					bMsg = false;
    4dac:	858ce000 	strhi	lr, [ip]
    4db0:	ebfffae3 	bl	3944 <uart1Getch>
    4db4:	e3700001 	cmn	r0, #1	; 0x1
    4db8:	e59f40e4 	ldr	r4, [pc, #228]	; 4ea4 <.text+0x4ea4>
    4dbc:	e59fc0e4 	ldr	ip, [pc, #228]	; 4ea8 <.text+0x4ea8>
    4dc0:	e59f50e4 	ldr	r5, [pc, #228]	; 4eac <.text+0x4eac>
    4dc4:	e3a0e000 	mov	lr, #0	; 0x0
    4dc8:	1affffea 	bne	4d78 <getCANFrame+0x48>
    4dcc:	e3a00000 	mov	r0, #0	; 0x0
				}
			}
		}
		else {
			if ( 'T' == c ) {
				bMsg = true;	// We have a message
				cnt = 0;
			}
		}
		
	}
	
	return false;
	
}
    4dd0:	e28dd008 	add	sp, sp, #8	; 0x8
    4dd4:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4dd8:	e3500054 	cmp	r0, #84	; 0x54
    4ddc:	059f20c0 	ldreq	r2, [pc, #192]	; 4ea4 <.text+0x4ea4>
    4de0:	03a03001 	moveq	r3, #1	; 0x1
    4de4:	058c3000 	streq	r3, [ip]
    4de8:	05821000 	streq	r1, [r2]
    4dec:	eaffffda 	b	4d5c <getCANFrame+0x2c>
    4df0:	e59f40b4 	ldr	r4, [pc, #180]	; 4eac <.text+0x4eac>
    4df4:	e5d43008 	ldrb	r3, [r4, #8]
    4df8:	e2433030 	sub	r3, r3, #48	; 0x30
    4dfc:	e5c93000 	strb	r3, [r9]
    4e00:	e3a03000 	mov	r3, #0	; 0x0
    4e04:	e28d1004 	add	r1, sp, #4	; 0x4
    4e08:	e3a02010 	mov	r2, #16	; 0x10
    4e0c:	e5c43008 	strb	r3, [r4, #8]
    4e10:	e1a00004 	mov	r0, r4
    4e14:	eb0003ed 	bl	5dd0 <strtoul>
    4e18:	e59d2000 	ldr	r2, [sp]
    4e1c:	e2841009 	add	r1, r4, #9	; 0x9
    4e20:	e5820000 	str	r0, [r2]
    4e24:	e1a00004 	mov	r0, r4
    4e28:	eb00037d 	bl	5c24 <strcpy>
    4e2c:	e5d91000 	ldrb	r1, [r9]
    4e30:	e2516001 	subs	r6, r1, #1	; 0x1
    4e34:	4a000010 	bmi	4e7c <getCANFrame+0x14c>
    4e38:	e1a03081 	mov	r3, r1, lsl #1
    4e3c:	e2442002 	sub	r2, r4, #2	; 0x2
    4e40:	e0835004 	add	r5, r3, r4
    4e44:	e08b7001 	add	r7, fp, r1
    4e48:	e0834002 	add	r4, r3, r2
    4e4c:	e3a0a000 	mov	sl, #0	; 0x0
    4e50:	e1a00004 	mov	r0, r4
    4e54:	e28d1004 	add	r1, sp, #4	; 0x4
    4e58:	e3a02010 	mov	r2, #16	; 0x10
    4e5c:	eb0003db 	bl	5dd0 <strtoul>
    4e60:	e2466001 	sub	r6, r6, #1	; 0x1
    4e64:	e3760001 	cmn	r6, #1	; 0x1
    4e68:	e5670001 	strb	r0, [r7, #-1]!
    4e6c:	e2444002 	sub	r4, r4, #2	; 0x2
    4e70:	e565a002 	strb	sl, [r5, #-2]!
    4e74:	1afffff5 	bne	4e50 <getCANFrame+0x120>
    4e78:	e5d91000 	ldrb	r1, [r9]
    4e7c:	e59d3000 	ldr	r3, [sp]
    4e80:	e1a0200b 	mov	r2, fp
    4e84:	e5930000 	ldr	r0, [r3]
    4e88:	ebffff46 	bl	4ba8 <SendCANFrame>
    4e8c:	e59f3010 	ldr	r3, [pc, #16]	; 4ea4 <.text+0x4ea4>
    4e90:	e3a02000 	mov	r2, #0	; 0x0
    4e94:	e3a00001 	mov	r0, #1	; 0x1
    4e98:	e5882000 	str	r2, [r8]
    4e9c:	e5832000 	str	r2, [r3]
    4ea0:	eaffffca 	b	4dd0 <getCANFrame+0xa0>
    4ea4:	40000488 	andmi	r0, r0, r8, lsl #9
    4ea8:	40000484 	andmi	r0, r0, r4, lsl #9
    4eac:	4000048c 	andmi	r0, r0, ip, lsl #9

00004eb0 <vscp_error>:
//

void vscp_error( void )
{
	vscp_initledfunc = VSCP_LED_OFF;
    4eb0:	e59f3008 	ldr	r3, [pc, #8]	; 4ec0 <.text+0x4ec0>
    4eb4:	e3a02000 	mov	r2, #0	; 0x0
    4eb8:	e5c32000 	strb	r2, [r3]
}
    4ebc:	e12fff1e 	bx	lr
    4ec0:	40000738 	andmi	r0, r0, r8, lsr r7

00004ec4 <vscp_rcv_set_nickname>:

///////////////////////////////////////////////////////////////////////////////
// vscp_probe
//

void vscp_probe( void )
{
	switch ( vscp_node_substate ) {
	
		case VSCP_SUBSTATE_NONE:

			if ( VSCP_ADDRESS_FREE != vscp_probe_address ) {
				
				vscp_omsg.flag = VSCP_VALID_MSG + 1 ;	// one databyte 
				vscp_omsg.priority = VSCP_PRIORITY_HIGH;	
				vscp_omsg.class = VSCP_CLASS1_PROTOCOL;
				vscp_omsg.type = VSCP_TYPE_PROTOCOL_NEW_NODE_ONLINE;
				vscp_omsg.data[ 0 ] = vscp_probe_address;			
				
				// send the message
				vscp_sendMsg();

				vscp_node_substate = VSCP_SUBSTATE_INIT_PROBE_SENT;
				vscp_timer = 0;	
				
			}
			else {

				// No free address -> error
				vscp_node_state = VSCP_STATE_ERROR;
				
				// Tell system we are giving up
				vscp_omsg.flag = VSCP_VALID_MSG + 1 ;	// one databyte 
				vscp_omsg.priority = VSCP_PRIORITY_HIGH;	
				vscp_omsg.class = VSCP_CLASS1_PROTOCOL;
				vscp_omsg.type = VSCP_TYPE_PROTOCOL_NO_NICKNAME;			
				
				// send the message
				vscp_sendMsg();

			}
			break;	

		case VSCP_SUBSTATE_INIT_PROBE_SENT:
			
			if ( vscp_imsg.flag & VSCP_VALID_MSG ) {	// incoming message?

				// Yes, incoming message
				if ( ( VSCP_CLASS1_PROTOCOL == vscp_imsg.class ) && 
					( VSCP_TYPE_PROTOCOL_PROBE_ACK == vscp_imsg.type ) ) {

					// Yes it was an ack from the segment master or a node
					if ( !vscp_probe_address ) {

						// Master controller answered
						// wait for address
						vscp_node_state = VSCP_STATE_PREACTIVE;
						vscp_timer = 0; // reset timer
						
					}
					else {

						// node answered, try next address
						vscp_probe_address++;
						vscp_node_substate = VSCP_SUBSTATE_NONE;
						vscp_probe_cnt = 0;
						
					}	
				}
			}
			else {

				if ( vscp_timer > VSCP_PROBE_TIMEOUT ) {	// Check for timeout

					vscp_probe_cnt++;	// Another timeout
					
					if ( vscp_probe_cnt > 3 ) { 
					
						// Yes we have a timeout
						if ( !vscp_probe_address ) {			// master controller probe?
	
							// No master controler on segment, try next node
							vscp_probe_address++;
							vscp_node_substate = VSCP_SUBSTATE_NONE;

						}
						else {
						
							// We have found a free address - use it
							vscp_nickname = vscp_probe_address;
							vscp_node_state = VSCP_STATE_ACTIVE;
							vscp_node_substate = VSCP_SUBSTATE_NONE;
							writeEEPROM( VSCP_EEPROM_NICKNAME, vscp_nickname );
							writeEEPROM( VSCP_EEPROM_SEGMENT_CRC, 0x40 );	// segment code (non server segment )

							// Report success
							vscp_probe_cnt = 0;
							vscp_active();
						
						}
					}
					else {
						vscp_node_substate = VSCP_SUBSTATE_NONE;
					}
				} // Timeout

			}			
			break;

		case VSCP_SUBSTATE_INIT_PROBE_ACK:
			break;

		default:
			vscp_node_substate = VSCP_SUBSTATE_NONE;
			break;
	}

	vscp_imsg.flag = 0;	
	
}

///////////////////////////////////////////////////////////////////////////////
// vscp_preactive
//

void vscp_rcv_preactive( void )
{
	if ( vscp_imsg.flag & VSCP_VALID_MSG ) {	// incoming message?

		if ( ( VSCP_CLASS1_PROTOCOL == vscp_imsg.class )  && 
						(  VSCP_TYPE_PROTOCOL_SET_NICKNAME == vscp_imsg.type ) &&
						(  VSCP_ADDRESS_FREE == vscp_imsg.data[ 0 ] ) ) {
						
			// Assign nickname
			vscp_nickname = vscp_imsg.data[ 2 ];
			writeEEPROM( VSCP_EEPROM_NICKNAME, vscp_nickname );		
			writeEEPROM( VSCP_EEPROM_SEGMENT_CRC, 0x40 );
	
			// Go active state
			vscp_node_state = VSCP_STATE_ACTIVE;						
		}		
	}
	else {
		// Check for time out
		if ( vscp_timer > VSCP_PROBE_TIMEOUT ) {
			// Yes, we have a timeout
			vscp_nickname = VSCP_ADDRESS_FREE;
			writeEEPROM( VSCP_EEPROM_NICKNAME, VSCP_ADDRESS_FREE );
			vscp_init();	
		}				
	}
}

///////////////////////////////////////////////////////////////////////////////
// vscp_active
//

void vscp_active( void )
{
	vscp_omsg.flag = VSCP_VALID_MSG + 1 ;	// one databyte 
	vscp_omsg.priority = VSCP_PRIORITY_HIGH;	
	vscp_omsg.class = VSCP_CLASS1_PROTOCOL;
	vscp_omsg.type = VSCP_TYPE_PROTOCOL_NEW_NODE_ONLINE;
	vscp_omsg.data[ 0 ] = vscp_nickname;			
				
	// send the message
	vscp_sendMsg();

	vscp_initledfunc = VSCP_LED_ON;
}

///////////////////////////////////////////////////////////////////////////////
// vscp_sendMsg
//

int vscp_sendMsg( void )
{
    unsigned long id = ( (unsigned long)vscp_omsg.priority << 25 ) |
						( (unsigned long  )vscp_omsg.class  << 16 ) |
						( (unsigned long)vscp_omsg.type  << 8) |
							 vscp_nickname;		// nodeaddress (our address)

	if ( !SendCANFrame( id, vscp_omsg.flag & 0x0f, vscp_omsg.data ) ) {
		// Failed to send message
		return FALSE;
	}

	vscp_omsg.flag = 0;
	return TRUE;
}

///////////////////////////////////////////////////////////////////////////////
// vscp_receiveMsg
//

int vscp_receiveMsg( void )
{
	unsigned long id;
	BYTE dlc;

	// Dont read in new message if there already is a message
	// in the input buffer
	if ( vscp_imsg.flag & VSCP_VALID_MSG ) return FALSE;

	if ( getCANFrame( &id, &dlc, vscp_imsg.data ) ) {

		vscp_imsg.flag = dlc;
        vscp_imsg.priority = (unsigned short)( 0x07 & ( id >> 25 ) );
		vscp_imsg.class = (unsigned short)( 0x1ff & ( id >> 16 ) );
		vscp_imsg.type = (unsigned char)( 0xff & ( id >> 8 ) ); 
		vscp_imsg.oaddr = (unsigned char)( 0xff & id );

		vscp_imsg.flag |= VSCP_VALID_MSG;

		return TRUE;
	}	
	
	return FALSE;
}

///////////////////////////////////////////////////////////////////////////////
// vscp_rcv_heartbeat
//

void vscp_rcv_heartbeat( void )
{
	if ( ( 5 == ( vscp_imsg.flag & 0x0f ) ) && 
			( readEEPROM( VSCP_EEPROM_SEGMENT_CRC ) != vscp_imsg.data[ 0 ] ) ) {

		// Stored CRC are different than received
		// We must be on a different segment
		writeEEPROM( VSCP_EEPROM_SEGMENT_CRC, vscp_imsg.data[ 0 ] );
		
		// Introduce ourself in the proper way and start from the beginning
		vscp_nickname = VSCP_ADDRESS_FREE;
		writeEEPROM( VSCP_EEPROM_NICKNAME, VSCP_ADDRESS_FREE );
		vscp_node_state = VSCP_STATE_INIT;

	}		
}

///////////////////////////////////////////////////////////////////////////////
// vscp_rcv_set_nickname
//

void vscp_rcv_set_nickname( void )
{
    4ec4:	e92d4010 	stmdb	sp!, {r4, lr}
	if ( ( 2 == ( vscp_imsg.flag & 0x0f ) ) && 
    4ec8:	e59f1044 	ldr	r1, [pc, #68]	; 4f14 <.text+0x4f14>
    4ecc:	e5d13000 	ldrb	r3, [r1]
    4ed0:	e203400f 	and	r4, r3, #15	; 0xf
    4ed4:	e3540002 	cmp	r4, #2	; 0x2
    4ed8:	e59fc038 	ldr	ip, [pc, #56]	; 4f18 <.text+0x4f18>
    4edc:	18bd8010 	ldmneia	sp!, {r4, pc}
    4ee0:	e5dc2000 	ldrb	r2, [ip]
    4ee4:	e5d13006 	ldrb	r3, [r1, #6]
    4ee8:	e1530002 	cmp	r3, r2
					( vscp_nickname == vscp_imsg.data[ 0 ] ) ) {

		// Yes, we are addressed
		vscp_nickname = vscp_imsg.data[ 1 ];
		writeEEPROM( VSCP_EEPROM_NICKNAME, vscp_nickname );		
    4eec:	e3a00001 	mov	r0, #1	; 0x1
    4ef0:	18bd8010 	ldmneia	sp!, {r4, pc}
    4ef4:	e5d13007 	ldrb	r3, [r1, #7]
    4ef8:	e1a01003 	mov	r1, r3
    4efc:	e5cc3000 	strb	r3, [ip]
    4f00:	ebfffefc 	bl	4af8 <writeEEPROM>
		writeEEPROM( VSCP_EEPROM_SEGMENT_CRC, 0x40 );
    4f04:	e1a00004 	mov	r0, r4
    4f08:	e3a01040 	mov	r1, #64	; 0x40
	}	
}
    4f0c:	e8bd4010 	ldmia	sp!, {r4, lr}
    4f10:	eafffef8 	b	4af8 <writeEEPROM>
    4f14:	4000073c 	andmi	r0, r0, ip, lsr r7
    4f18:	4000074e 	andmi	r0, r0, lr, asr #14

00004f1c <vscp_rcv_heartbeat>:
    4f1c:	e92d4010 	stmdb	sp!, {r4, lr}
    4f20:	e59f4058 	ldr	r4, [pc, #88]	; 4f80 <.text+0x4f80>
    4f24:	e5d43000 	ldrb	r3, [r4]
    4f28:	e203300f 	and	r3, r3, #15	; 0xf
    4f2c:	e3530005 	cmp	r3, #5	; 0x5
    4f30:	e3a00002 	mov	r0, #2	; 0x2
    4f34:	18bd8010 	ldmneia	sp!, {r4, pc}
    4f38:	ebfffec0 	bl	4a40 <readEEPROM>
    4f3c:	e5d42006 	ldrb	r2, [r4, #6]
    4f40:	e1a03800 	mov	r3, r0, lsl #16
    4f44:	e1520843 	cmp	r2, r3, asr #16
    4f48:	e1a01002 	mov	r1, r2
    4f4c:	e3a00002 	mov	r0, #2	; 0x2
    4f50:	08bd8010 	ldmeqia	sp!, {r4, pc}
    4f54:	ebfffee7 	bl	4af8 <writeEEPROM>
    4f58:	e59f3024 	ldr	r3, [pc, #36]	; 4f84 <.text+0x4f84>
    4f5c:	e3e02000 	mvn	r2, #0	; 0x0
    4f60:	e5c32000 	strb	r2, [r3]
    4f64:	e3a00001 	mov	r0, #1	; 0x1
    4f68:	e3a010ff 	mov	r1, #255	; 0xff
    4f6c:	ebfffee1 	bl	4af8 <writeEEPROM>
    4f70:	e59f3010 	ldr	r3, [pc, #16]	; 4f88 <.text+0x4f88>
    4f74:	e3a02001 	mov	r2, #1	; 0x1
    4f78:	e5c32000 	strb	r2, [r3]
    4f7c:	e8bd8010 	ldmia	sp!, {r4, pc}
    4f80:	4000073c 	andmi	r0, r0, ip, lsr r7
    4f84:	4000074e 	andmi	r0, r0, lr, asr #14
    4f88:	4000074c 	andmi	r0, r0, ip, asr #14

00004f8c <vscp_check_pstorage>:
    4f8c:	e52de004 	str	lr, [sp, #-4]!
    4f90:	e3a00002 	mov	r0, #2	; 0x2
    4f94:	ebfffea9 	bl	4a40 <readEEPROM>
    4f98:	e20030c0 	and	r3, r0, #192	; 0xc0
    4f9c:	e3530040 	cmp	r3, #64	; 0x40
    4fa0:	e3a00001 	mov	r0, #1	; 0x1
    4fa4:	e3a010ff 	mov	r1, #255	; 0xff
    4fa8:	e1a03000 	mov	r3, r0
    4fac:	0a000007 	beq	4fd0 <vscp_check_pstorage+0x44>
    4fb0:	ebfffed0 	bl	4af8 <writeEEPROM>
    4fb4:	e3a01000 	mov	r1, #0	; 0x0
    4fb8:	e3a00002 	mov	r0, #2	; 0x2
    4fbc:	ebfffecd 	bl	4af8 <writeEEPROM>
    4fc0:	e3a00003 	mov	r0, #3	; 0x3
    4fc4:	e3a01090 	mov	r1, #144	; 0x90
    4fc8:	ebfffeca 	bl	4af8 <writeEEPROM>
    4fcc:	e3a03000 	mov	r3, #0	; 0x0
    4fd0:	e1a00003 	mov	r0, r3
    4fd4:	e49df004 	ldr	pc, [sp], #4

00004fd8 <vscp_init>:
    4fd8:	e59f20a0 	ldr	r2, [pc, #160]	; 5080 <.text+0x5080>
    4fdc:	e3a03002 	mov	r3, #2	; 0x2
    4fe0:	e92d4010 	stmdb	sp!, {r4, lr}
    4fe4:	e3a00001 	mov	r0, #1	; 0x1
    4fe8:	e5c23000 	strb	r3, [r2]
    4fec:	ebfffe93 	bl	4a40 <readEEPROM>
    4ff0:	e1a00800 	mov	r0, r0, lsl #16
    4ff4:	e1a00820 	mov	r0, r0, lsr #16
    4ff8:	e3a0c000 	mov	ip, #0	; 0x0
    4ffc:	e20000ff 	and	r0, r0, #255	; 0xff
    5000:	e59f207c 	ldr	r2, [pc, #124]	; 5084 <.text+0x5084>
    5004:	e150000c 	cmp	r0, ip
    5008:	03e03000 	mvneq	r3, #0	; 0x0
    500c:	e5c20000 	strb	r0, [r2]
    5010:	05c23000 	streqb	r3, [r2]
    5014:	e59f306c 	ldr	r3, [pc, #108]	; 5088 <.text+0x5088>
    5018:	e59f206c 	ldr	r2, [pc, #108]	; 508c <.text+0x508c>
    501c:	e5c3c000 	strb	ip, [r3]
    5020:	e1c2c0b0 	strh	ip, [r2]
    5024:	e59f3064 	ldr	r3, [pc, #100]	; 5090 <.text+0x5090>
    5028:	e59f2064 	ldr	r2, [pc, #100]	; 5094 <.text+0x5094>
    502c:	e5c3c000 	strb	ip, [r3]
    5030:	e5c2c000 	strb	ip, [r2]
    5034:	e59f305c 	ldr	r3, [pc, #92]	; 5098 <.text+0x5098>
    5038:	e59f205c 	ldr	r2, [pc, #92]	; 509c <.text+0x509c>
    503c:	e59fe05c 	ldr	lr, [pc, #92]	; 50a0 <.text+0x50a0>
    5040:	e59f405c 	ldr	r4, [pc, #92]	; 50a4 <.text+0x50a4>
    5044:	e5c3c000 	strb	ip, [r3]
    5048:	e5c2c000 	strb	ip, [r2]
    504c:	e59f3054 	ldr	r3, [pc, #84]	; 50a8 <.text+0x50a8>
    5050:	e59f2054 	ldr	r2, [pc, #84]	; 50ac <.text+0x50ac>
    5054:	e5cec004 	strb	ip, [lr, #4]
    5058:	e5c4c004 	strb	ip, [r4, #4]
    505c:	e5c3c000 	strb	ip, [r3]
    5060:	e1c2c0b0 	strh	ip, [r2]
    5064:	e5cec000 	strb	ip, [lr]
    5068:	e5cec001 	strb	ip, [lr, #1]
    506c:	e1cec0b2 	strh	ip, [lr, #2]
    5070:	e5c4c000 	strb	ip, [r4]
    5074:	e5c4c001 	strb	ip, [r4, #1]
    5078:	e1c4c0b2 	strh	ip, [r4, #2]
    507c:	e8bd8010 	ldmia	sp!, {r4, pc}
    5080:	40000738 	andmi	r0, r0, r8, lsr r7
    5084:	4000074e 	andmi	r0, r0, lr, asr #14
    5088:	40000754 	andmi	r0, r0, r4, asr r7
    508c:	40000750 	andmi	r0, r0, r0, asr r7
    5090:	40000739 	andmi	r0, r0, r9, lsr r7
    5094:	4000074d 	andmi	r0, r0, sp, asr #14
    5098:	40000735 	andmi	r0, r0, r5, lsr r7
    509c:	4000074c 	andmi	r0, r0, ip, asr #14
    50a0:	4000073c 	andmi	r0, r0, ip, lsr r7
    50a4:	40000724 	andmi	r0, r0, r4, lsr #14
    50a8:	40000734 	andmi	r0, r0, r4, lsr r7
    50ac:	40000752 	andmi	r0, r0, r2, asr r7

000050b0 <vscp_rcv_drop_nickname>:

///////////////////////////////////////////////////////////////////////////////
// vscp_rcv_drop_nickname
//

void vscp_rcv_drop_nickname( void )
{
    50b0:	e52de004 	str	lr, [sp, #-4]!
	if ( ( 1 == ( vscp_imsg.flag & 0x0f ) ) && 
    50b4:	e59f2038 	ldr	r2, [pc, #56]	; 50f4 <.text+0x50f4>
    50b8:	e5d23000 	ldrb	r3, [r2]
    50bc:	e203000f 	and	r0, r3, #15	; 0xf
    50c0:	e3500001 	cmp	r0, #1	; 0x1
    50c4:	e59fc02c 	ldr	ip, [pc, #44]	; 50f8 <.text+0x50f8>
    50c8:	149df004 	ldrne	pc, [sp], #4
    50cc:	e5d22006 	ldrb	r2, [r2, #6]
    50d0:	e5dc3000 	ldrb	r3, [ip]
    50d4:	e1520003 	cmp	r2, r3
					( vscp_nickname == vscp_imsg.data[ 0 ] ) ) {
		
		// Yes, we are addressed
		vscp_nickname = VSCP_ADDRESS_FREE;
		writeEEPROM( VSCP_EEPROM_NICKNAME, VSCP_ADDRESS_FREE );
    50d8:	e3a010ff 	mov	r1, #255	; 0xff
    50dc:	149df004 	ldrne	pc, [sp], #4
    50e0:	e3e03000 	mvn	r3, #0	; 0x0
    50e4:	e5cc3000 	strb	r3, [ip]
    50e8:	ebfffe82 	bl	4af8 <writeEEPROM>
		vscp_init();

	}
}
    50ec:	e49de004 	ldr	lr, [sp], #4
    50f0:	eaffffb8 	b	4fd8 <vscp_init>
    50f4:	4000073c 	andmi	r0, r0, ip, lsr r7
    50f8:	4000074e 	andmi	r0, r0, lr, asr #14

000050fc <vscp_rcv_preactive>:
    50fc:	e52de004 	str	lr, [sp, #-4]!
    5100:	e59f2098 	ldr	r2, [pc, #152]	; 51a0 <.text+0x51a0>
    5104:	e1d230d0 	ldrsb	r3, [r2]
    5108:	e3530000 	cmp	r3, #0	; 0x0
    510c:	ba00000c 	blt	5144 <vscp_rcv_preactive+0x48>
    5110:	e59f208c 	ldr	r2, [pc, #140]	; 51a4 <.text+0x51a4>
    5114:	e1d230b0 	ldrh	r3, [r2]
    5118:	e1a03803 	mov	r3, r3, lsl #16
    511c:	e353077d 	cmp	r3, #32768000	; 0x1f40000
    5120:	e3a010ff 	mov	r1, #255	; 0xff
    5124:	e3a00001 	mov	r0, #1	; 0x1
    5128:	949df004 	ldrls	pc, [sp], #4
    512c:	e59f3074 	ldr	r3, [pc, #116]	; 51a8 <.text+0x51a8>
    5130:	e3e02000 	mvn	r2, #0	; 0x0
    5134:	e5c32000 	strb	r2, [r3]
    5138:	ebfffe6e 	bl	4af8 <writeEEPROM>
    513c:	e49de004 	ldr	lr, [sp], #4
    5140:	eaffffa4 	b	4fd8 <vscp_init>
    5144:	e1d230b2 	ldrh	r3, [r2, #2]
    5148:	e3a018ff 	mov	r1, #16711680	; 0xff0000
    514c:	e3530000 	cmp	r3, #0	; 0x0
    5150:	e2811006 	add	r1, r1, #6	; 0x6
    5154:	149df004 	ldrne	pc, [sp], #4
    5158:	e5923004 	ldr	r3, [r2, #4]
    515c:	e3c334ff 	bic	r3, r3, #-16777216	; 0xff000000
    5160:	e3c33cff 	bic	r3, r3, #65280	; 0xff00
    5164:	e1530001 	cmp	r3, r1
    5168:	e3a00001 	mov	r0, #1	; 0x1
    516c:	149df004 	ldrne	pc, [sp], #4
    5170:	e5d22008 	ldrb	r2, [r2, #8]
    5174:	e59f302c 	ldr	r3, [pc, #44]	; 51a8 <.text+0x51a8>
    5178:	e1a01002 	mov	r1, r2
    517c:	e5c32000 	strb	r2, [r3]
    5180:	ebfffe5c 	bl	4af8 <writeEEPROM>
    5184:	e3a00002 	mov	r0, #2	; 0x2
    5188:	e3a01040 	mov	r1, #64	; 0x40
    518c:	ebfffe59 	bl	4af8 <writeEEPROM>
    5190:	e59f3014 	ldr	r3, [pc, #20]	; 51ac <.text+0x51ac>
    5194:	e3a02003 	mov	r2, #3	; 0x3
    5198:	e5c32000 	strb	r2, [r3]
    519c:	e49df004 	ldr	pc, [sp], #4
    51a0:	4000073c 	andmi	r0, r0, ip, lsr r7
    51a4:	40000752 	andmi	r0, r0, r2, asr r7
    51a8:	4000074e 	andmi	r0, r0, lr, asr #14
    51ac:	4000074c 	andmi	r0, r0, ip, asr #14

000051b0 <vscp_receiveMsg>:
    51b0:	e92d4010 	stmdb	sp!, {r4, lr}
    51b4:	e59f407c 	ldr	r4, [pc, #124]	; 5238 <.text+0x5238>
    51b8:	e1d430d0 	ldrsb	r3, [r4]
    51bc:	e24dd008 	sub	sp, sp, #8	; 0x8
    51c0:	e3530000 	cmp	r3, #0	; 0x0
    51c4:	e1a0000d 	mov	r0, sp
    51c8:	e28d1007 	add	r1, sp, #7	; 0x7
    51cc:	e2842006 	add	r2, r4, #6	; 0x6
    51d0:	ba000016 	blt	5230 <vscp_receiveMsg+0x80>
    51d4:	ebfffed5 	bl	4d30 <getCANFrame>
    51d8:	e3500000 	cmp	r0, #0	; 0x0
    51dc:	e3a0e001 	mov	lr, #1	; 0x1
    51e0:	0a000012 	beq	5230 <vscp_receiveMsg+0x80>
    51e4:	e5dd3007 	ldrb	r3, [sp, #7]
    51e8:	e5c43000 	strb	r3, [r4]
    51ec:	e59d0000 	ldr	r0, [sp]
    51f0:	e5d43000 	ldrb	r3, [r4]
    51f4:	e1a02ca0 	mov	r2, r0, lsr #25
    51f8:	e1e03c83 	mvn	r3, r3, lsl #25
    51fc:	e1a01820 	mov	r1, r0, lsr #16
    5200:	e2022007 	and	r2, r2, #7	; 0x7
    5204:	e3c11cfe 	bic	r1, r1, #65024	; 0xfe00
    5208:	e1e03ca3 	mvn	r3, r3, lsr #25
    520c:	e1a0c420 	mov	ip, r0, lsr #8
    5210:	e5c43000 	strb	r3, [r4]
    5214:	e5c42001 	strb	r2, [r4, #1]
    5218:	e1c410b2 	strh	r1, [r4, #2]
    521c:	e5c4c004 	strb	ip, [r4, #4]
    5220:	e5c40005 	strb	r0, [r4, #5]
    5224:	e1a0000e 	mov	r0, lr
    5228:	e28dd008 	add	sp, sp, #8	; 0x8
    522c:	e8bd8010 	ldmia	sp!, {r4, pc}
    5230:	e3a0e000 	mov	lr, #0	; 0x0
    5234:	eafffffa 	b	5224 <vscp_receiveMsg+0x74>
    5238:	4000073c 	andmi	r0, r0, ip, lsr r7

0000523c <getVSCPFrame>:
    523c:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    5240:	e24dd004 	sub	sp, sp, #4	; 0x4
    5244:	e1a06000 	mov	r6, r0
    5248:	e1a05001 	mov	r5, r1
    524c:	e1a04002 	mov	r4, r2
    5250:	e1a01003 	mov	r1, r3
    5254:	e1a0000d 	mov	r0, sp
    5258:	e59d2014 	ldr	r2, [sp, #20]
    525c:	ebfffeb3 	bl	4d30 <getCANFrame>
    5260:	e3500000 	cmp	r0, #0	; 0x0
    5264:	0a000008 	beq	528c <getVSCPFrame+0x50>
    5268:	e59d3000 	ldr	r3, [sp]
    526c:	e1a01823 	mov	r1, r3, lsr #16
    5270:	e1a02423 	mov	r2, r3, lsr #8
    5274:	e20220ff 	and	r2, r2, #255	; 0xff
    5278:	e3c11cfe 	bic	r1, r1, #65024	; 0xfe00
    527c:	e5c43000 	strb	r3, [r4]
    5280:	e1c520b0 	strh	r2, [r5]
    5284:	e1c610b0 	strh	r1, [r6]
    5288:	e3a00001 	mov	r0, #1	; 0x1
    528c:	e28dd004 	add	sp, sp, #4	; 0x4
    5290:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

00005294 <vscp_sendMsg>:
    5294:	e92d4010 	stmdb	sp!, {r4, lr}
    5298:	e59f4044 	ldr	r4, [pc, #68]	; 52e4 <.text+0x52e4>
    529c:	e59f3044 	ldr	r3, [pc, #68]	; 52e8 <.text+0x52e8>
    52a0:	e1d400b2 	ldrh	r0, [r4, #2]
    52a4:	e5d42001 	ldrb	r2, [r4, #1]
    52a8:	e5d3c000 	ldrb	ip, [r3]
    52ac:	e1a00800 	mov	r0, r0, lsl #16
    52b0:	e5d43004 	ldrb	r3, [r4, #4]
    52b4:	e5d41000 	ldrb	r1, [r4]
    52b8:	e1800c82 	orr	r0, r0, r2, lsl #25
    52bc:	e180000c 	orr	r0, r0, ip
    52c0:	e1800403 	orr	r0, r0, r3, lsl #8
    52c4:	e201100f 	and	r1, r1, #15	; 0xf
    52c8:	e2842005 	add	r2, r4, #5	; 0x5
    52cc:	ebfffe35 	bl	4ba8 <SendCANFrame>
    52d0:	e3500000 	cmp	r0, #0	; 0x0
    52d4:	13a03000 	movne	r3, #0	; 0x0
    52d8:	13a00001 	movne	r0, #1	; 0x1
    52dc:	15c43000 	strneb	r3, [r4]
    52e0:	e8bd8010 	ldmia	sp!, {r4, pc}
    52e4:	40000724 	andmi	r0, r0, r4, lsr #14
    52e8:	4000074e 	andmi	r0, r0, lr, asr #14

000052ec <vscp_rcv_writereg>:

///////////////////////////////////////////////////////////////////////////////
// vscp_rcv_new_node_online
//

void vscp_rcv_new_node_online( void )
{
	if ( ( 1 == ( vscp_imsg.flag & 0x0f ) ) && 
					( vscp_nickname == vscp_imsg.data[ 0 ] ) ) {

		// This is a probe which use our nickname
		// we have to respond to tell the new node that
		// ths nickname is in use

		vscp_omsg.flag = VSCP_VALID_MSG;
		vscp_omsg.priority = VSCP_PRIORITY_HIGH;	
		vscp_omsg.class = VSCP_CLASS1_PROTOCOL;
		vscp_omsg.type = VSCP_TYPE_PROTOCOL_PROBE_ACK;		
		vscp_sendMsg();				

	}
}

///////////////////////////////////////////////////////////////////////////////
// vscp_rcv_readreg
//

void vscp_rcv_readreg( void )
{
	vscp_omsg.priority = VSCP_PRIORITY_HIGH;
	vscp_omsg.flag = VSCP_VALID_MSG + 2;
	vscp_omsg.class = VSCP_CLASS1_PROTOCOL;
	vscp_omsg.type = VSCP_TYPE_PROTOCOL_RW_RESPONSE;
	
	vscp_omsg.data[ 0 ] =  vscp_imsg.data[ 1 ];
	vscp_omsg.data[ 1 ] =  0;  // Default

	if ( VSCP_REG_ALARMSTATUS == vscp_imsg.data[ 1 ] ) {

		// * * * Read alarm status register * * * 
		vscp_omsg.data[ 1 ] = vscp_alarmstatus;
		vscp_alarmstatus = 0x00;		// Reset alarm status

	}

	else if ( VSCP_REG_VSCP_MAJOR_VERSION == vscp_imsg.data[ 1 ] ) {

		// * * * VSCP Protocol Major Version * * * 
		vscp_omsg.data[ 1 ] = 1;	

	}

	else if ( VSCP_REG_VSCP_MINOR_VERSION == vscp_imsg.data[ 1 ] ) {
		
 		// * * * VSCP Protocol Minor Version * * * 
		vscp_omsg.data[ 1 ] = 0;	

	}

	else if ( VSCP_REG_NODE_CONTROL == vscp_imsg.data[ 1 ] ) {
		
 		// * * * Reserved * * * 
		vscp_omsg.data[ 1 ] = 0;	

	}

	else if ( VSCP_FIRMWARE_MAJOR_VERSION == vscp_imsg.data[ 1 ] ) {
		
 		// * * * Get firmware Major version * * * 
		vscp_omsg.data[ 1 ] = getMajorVersion();	

	}

	else if ( VSCP_FIRMWARE_MINOR_VERSION == vscp_imsg.data[ 1 ] ) {
		
 		// * * * Get firmware Minor version * * * 
		vscp_omsg.data[ 1 ] = getMinorVersion();	

	}

	else if ( VSCP_FIRMWARE_SUB_MINOR_VERSION == vscp_imsg.data[ 1 ] ) {
		
 		// * * * Get firmware Sub Minor version * * * 
		vscp_omsg.data[ 1 ] = getSubMinorVersion();	

	}

	else if ( vscp_imsg.data[ 1 ] < VSCP_REG_MANUFACTUR_ID0 ) {

		// * * * Read from persitant locations * * * 
		vscp_omsg.data[ 1 ] = 
			readEEPROM( ( vscp_imsg.data[ 1 ] - VSCP_REG_USERID0 ) + VSCP_EEPROM_REG_USERID ); 		

	}

	else if ( ( vscp_imsg.data[ 1 ] > VSCP_REG_USERID4 )  &&  ( vscp_imsg.data[ 1 ] < VSCP_REG_NICKNAME_ID ) ) {
		
 		// * * * Manufacturer ID information * * * 
#ifdef MANUFACTURER_INFO_IN_EEPROM
		vscp_omsg.data[ 1 ] = getManufacturerIdFromEEprom( vscp_imsg.data[ 1 ] - VSCP_REG_MANUFACTUR_ID0 ); 
#else 		
		vscp_omsg.data[ 1 ] = 
			vscp_manufacturer_id[ vscp_imsg.data[ 1 ] - VSCP_REG_MANUFACTUR_ID0 ];	
#endif			

	}

	else if ( VSCP_REG_NICKNAME_ID == vscp_imsg.data[ 1 ] ) {

		// * * * nickname id * * * 
		vscp_omsg.data[ 1 ] = vscp_nickname;

	}

	else if ( VSCP_REG_PAGE_SELECT_LSB == vscp_imsg.data[ 1 ] ) {
		
 		// * * * Page select LSB * * * 
		vscp_omsg.data[ 1 ] = ( vscp_page_select & 0xff );	

	}	

	else if ( VSCP_REG_PAGE_SELECT_MSB == vscp_imsg.data[ 1 ] ) {
		
 		// * * * Page select MSB * * * 
		vscp_omsg.data[ 1 ] = ( vscp_page_select >> 16 );	

	}
	
	else if ( VSCP_BOOT_LOADER_ALGORITHM == vscp_imsg.data[ 1 ] ) {
		// * * * Boot loader algorithm * * *
		vscp_omsg.data[ 1 ] = VSCP_BOOTLOADER_PIC1;
	}
	
	else if ( VSCP_BUFFER_SIZE == vscp_imsg.data[ 1 ] ) {
		// * * * Buffer size * * *
		vscp_omsg.data[ 1 ] = getBufferSize();	
	}
			
	else if ( ( vscp_imsg.data[ 1 ] > ( VSCP_REG_GUIID0 - 1 ) ) && ( vscp_imsg.data[ 1 ] < VSCP_REG_DEVICE_URL )  ) {

		// * * * GUID * * * 
#ifdef	GUID_IN_EEPROM
		vscp_omsg.data[ 1 ] = getGuidFromEEprom( vscp_imsg.data[ 1 ] - VSCP_REG_GUIID0 );		
#else
		vscp_omsg.data[ 1 ] = vscp_guid[ vscp_imsg.data[ 1 ] - VSCP_REG_GUIID0 ];		
#endif

	}

	else {

		// * * * The device URL * * * 
		vscp_omsg.data[ 1 ] = vscp_deviceURL[ vscp_imsg.data[ 1 ] - VSCP_REG_DEVICE_URL ];	

	}

	vscp_sendMsg();
}

///////////////////////////////////////////////////////////////////////////////
// vscp_rcv_writereg
//

void vscp_rcv_writereg( void )
{
    52ec:	e92d4030 	stmdb	sp!, {r4, r5, lr}
	vscp_omsg.priority = VSCP_PRIORITY_MEDIUM;
	vscp_omsg.flag = VSCP_VALID_MSG + 2;
	vscp_omsg.class = VSCP_CLASS1_PROTOCOL;
	vscp_omsg.type = VSCP_TYPE_PROTOCOL_RW_RESPONSE;
	vscp_omsg.data[ 0 ] = vscp_nickname; 

	if ( ( vscp_imsg.data[ 1 ] > ( VSCP_REG_VSCP_MINOR_VERSION + 1 ) ) && 
    52f0:	e59f5174 	ldr	r5, [pc, #372]	; 546c <.text+0x546c>
    52f4:	e59f3174 	ldr	r3, [pc, #372]	; 5470 <.text+0x5470>
    52f8:	e5d50007 	ldrb	r0, [r5, #7]
    52fc:	e59f4170 	ldr	r4, [pc, #368]	; 5474 <.text+0x5474>
    5300:	e5d31000 	ldrb	r1, [r3]
    5304:	e280207c 	add	r2, r0, #124	; 0x7c
    5308:	e3a03004 	mov	r3, #4	; 0x4
    530c:	e20220ff 	and	r2, r2, #255	; 0xff
    5310:	e5c43001 	strb	r3, [r4, #1]
    5314:	e2833006 	add	r3, r3, #6	; 0x6
    5318:	e3520004 	cmp	r2, #4	; 0x4
    531c:	e5c43004 	strb	r3, [r4, #4]
    5320:	e3e0207d 	mvn	r2, #125	; 0x7d
    5324:	e3a03000 	mov	r3, #0	; 0x0
    5328:	e5c42000 	strb	r2, [r4]
    532c:	e5c41005 	strb	r1, [r4, #5]
    5330:	e1c430b2 	strh	r3, [r4, #2]
    5334:	9a000022 	bls	53c4 <vscp_rcv_writereg+0xd8>
		( vscp_imsg.data[ 1 ] < VSCP_REG_MANUFACTUR_ID0 ) ) {
	 
		// * * * User Client ID * * *
		writeEEPROM( ( vscp_imsg.data[ 1 ] - VSCP_REG_USERID0 ) + VSCP_EEPROM_REG_USERID, vscp_imsg.data[ 2 ] );
		vscp_omsg.data[ 1 ] = readEEPROM( ( vscp_imsg.data[ 1 ] - VSCP_REG_USERID0 ) + VSCP_EEPROM_REG_USERID ); 

	}

	else if ( VSCP_REG_PAGE_SELECT_MSB == vscp_imsg.data[ 1 ] ) {
    5338:	e3500092 	cmp	r0, #146	; 0x92
    533c:	0a00000d 	beq	5378 <vscp_rcv_writereg+0x8c>

		// * * * Page select register MSB * * *
		vscp_page_select = ( vscp_page_select & 0xff00 ) | ( vscp_imsg.data[ 2 ] << 16 );
		vscp_omsg.data[ 1 ] = ( vscp_page_select >> 16 );
	}
	
	else if ( VSCP_REG_PAGE_SELECT_LSB == vscp_imsg.data[ 1 ] ) {
    5340:	e3500093 	cmp	r0, #147	; 0x93
    5344:	0a000041 	beq	5450 <vscp_rcv_writereg+0x164>

		// * * * Page select register LSB * * *
		vscp_page_select = ( vscp_page_select & 0xff ) | vscp_imsg.data[ 2 ];
		vscp_omsg.data[ 1 ] = ( vscp_page_select & 0xff );
	}	

#ifdef ENABLE_WRITE_2PROTECTED_LOCATIONS
	// Write manufacturer id configuration information
	else if ( ( vscp_imsg.data[ 1 ] > VSCP_REG_USERID4 )  &&  ( vscp_imsg.data[ 1 ] < VSCP_REG_NICKNAME_ID ) ) {
    5348:	e2803077 	add	r3, r0, #119	; 0x77
    534c:	e20330ff 	and	r3, r3, #255	; 0xff
    5350:	e3530007 	cmp	r3, #7	; 0x7
    5354:	9a00000f 	bls	5398 <vscp_rcv_writereg+0xac>
		// page must be 0xffff for writes to be possible
		if ( ( 0xff != readEEPROM( VSCP_REG_PAGE_SELECT_LSB ) ) || 
				( 0xff != readEEPROM( VSCP_REG_PAGE_SELECT_MSB ) ) ) {
			// return complement to indicate error
			vscp_omsg.data[ 1 ] = ~vscp_imsg.data[ 2 ];	
		}
		else {
			writeEEPROM( VSCP_EEPROM_REG_MANUFACTUR_ID0 + vscp_imsg.data[ 1 ] - VSCP_REG_MANUFACTUR_ID0, vscp_imsg.data[ 2 ]  );
			vscp_omsg.data[ 1 ] = readEEPROM( VSCP_EEPROM_REG_MANUFACTUR_ID0 + vscp_imsg.data[ 1 ] - VSCP_REG_MANUFACTUR_ID0 );
		}
	}
	// Write GUID configuration information
	else if ( ( vscp_imsg.data[ 1 ] > ( VSCP_REG_GUIID0 - 1 ) ) && ( vscp_imsg.data[ 1 ] < VSCP_REG_DEVICE_URL )  ) {
    5358:	e2803030 	add	r3, r0, #48	; 0x30
    535c:	e20330ff 	and	r3, r3, #255	; 0xff
    5360:	e353000f 	cmp	r3, #15	; 0xf
    5364:	9a000022 	bls	53f4 <vscp_rcv_writereg+0x108>
		// page must be 0xffff for writes to be possible
		if ( ( 0xff != readEEPROM( VSCP_REG_PAGE_SELECT_LSB ) ) || 
				( 0xff != readEEPROM( VSCP_REG_PAGE_SELECT_MSB ) ) ) {
			// return complement to indicate error
			vscp_omsg.data[ 1 ] = ~vscp_imsg.data[ 2 ];	
		}
		else {
			writeEEPROM( VSCP_EEPROM_REG_GUIID0 + vscp_imsg.data[ 1 ] - VSCP_REG_GUIID0, vscp_imsg.data[ 2 ] );
			vscp_omsg.data[ 1 ] = readEEPROM( VSCP_EEPROM_REG_GUIID0 + vscp_imsg.data[ 1 ] - VSCP_REG_GUIID0 );
		}
	}
#endif

	else {
		// return complement to indicate error
		vscp_omsg.data[ 1 ] = ~vscp_imsg.data[ 2 ];		
    5368:	e5d53008 	ldrb	r3, [r5, #8]
    536c:	e1e03003 	mvn	r3, r3
    5370:	e5c43006 	strb	r3, [r4, #6]
    5374:	ea000005 	b	5390 <vscp_rcv_writereg+0xa4>
    5378:	e59f30f8 	ldr	r3, [pc, #248]	; 5478 <.text+0x5478>
    537c:	e1d320b0 	ldrh	r2, [r3]
    5380:	e2022cff 	and	r2, r2, #65280	; 0xff00
    5384:	e1a01842 	mov	r1, r2, asr #16
    5388:	e5c41006 	strb	r1, [r4, #6]
    538c:	e1c320b0 	strh	r2, [r3]
	}

	vscp_sendMsg();	
}
    5390:	e8bd4030 	ldmia	sp!, {r4, r5, lr}
    5394:	eaffffbe 	b	5294 <vscp_sendMsg>
    5398:	e3a00093 	mov	r0, #147	; 0x93
    539c:	ebfffda7 	bl	4a40 <readEEPROM>
    53a0:	e1a00800 	mov	r0, r0, lsl #16
    53a4:	e35008ff 	cmp	r0, #16711680	; 0xff0000
    53a8:	1affffee 	bne	5368 <vscp_rcv_writereg+0x7c>
    53ac:	e3a00092 	mov	r0, #146	; 0x92
    53b0:	ebfffda2 	bl	4a40 <readEEPROM>
    53b4:	e1a00800 	mov	r0, r0, lsl #16
    53b8:	e35008ff 	cmp	r0, #16711680	; 0xff0000
    53bc:	1affffe9 	bne	5368 <vscp_rcv_writereg+0x7c>
    53c0:	e5d50007 	ldrb	r0, [r5, #7]
    53c4:	e2400080 	sub	r0, r0, #128	; 0x80
    53c8:	e1a00800 	mov	r0, r0, lsl #16
    53cc:	e5d51008 	ldrb	r1, [r5, #8]
    53d0:	e1a00820 	mov	r0, r0, lsr #16
    53d4:	ebfffdc7 	bl	4af8 <writeEEPROM>
    53d8:	e5d50007 	ldrb	r0, [r5, #7]
    53dc:	e2400080 	sub	r0, r0, #128	; 0x80
    53e0:	e1a00800 	mov	r0, r0, lsl #16
    53e4:	e1a00820 	mov	r0, r0, lsr #16
    53e8:	ebfffd94 	bl	4a40 <readEEPROM>
    53ec:	e5c40006 	strb	r0, [r4, #6]
    53f0:	eaffffe6 	b	5390 <vscp_rcv_writereg+0xa4>
    53f4:	e3a00093 	mov	r0, #147	; 0x93
    53f8:	ebfffd90 	bl	4a40 <readEEPROM>
    53fc:	e1a00800 	mov	r0, r0, lsl #16
    5400:	e35008ff 	cmp	r0, #16711680	; 0xff0000
    5404:	1affffd7 	bne	5368 <vscp_rcv_writereg+0x7c>
    5408:	e3a00092 	mov	r0, #146	; 0x92
    540c:	ebfffd8b 	bl	4a40 <readEEPROM>
    5410:	e1a00800 	mov	r0, r0, lsl #16
    5414:	e35008ff 	cmp	r0, #16711680	; 0xff0000
    5418:	1affffd2 	bne	5368 <vscp_rcv_writereg+0x7c>
    541c:	e5d50007 	ldrb	r0, [r5, #7]
    5420:	e24000bf 	sub	r0, r0, #191	; 0xbf
    5424:	e1a00800 	mov	r0, r0, lsl #16
    5428:	e5d51008 	ldrb	r1, [r5, #8]
    542c:	e1a00820 	mov	r0, r0, lsr #16
    5430:	ebfffdb0 	bl	4af8 <writeEEPROM>
    5434:	e5d50007 	ldrb	r0, [r5, #7]
    5438:	e24000bf 	sub	r0, r0, #191	; 0xbf
    543c:	e1a00800 	mov	r0, r0, lsl #16
    5440:	e1a00820 	mov	r0, r0, lsr #16
    5444:	ebfffd7d 	bl	4a40 <readEEPROM>
    5448:	e5c40006 	strb	r0, [r4, #6]
    544c:	eaffffcf 	b	5390 <vscp_rcv_writereg+0xa4>
    5450:	e59f3020 	ldr	r3, [pc, #32]	; 5478 <.text+0x5478>
    5454:	e5d52008 	ldrb	r2, [r5, #8]
    5458:	e5d31000 	ldrb	r1, [r3]
    545c:	e1822001 	orr	r2, r2, r1
    5460:	e5c42006 	strb	r2, [r4, #6]
    5464:	e1c320b0 	strh	r2, [r3]
    5468:	eaffffc8 	b	5390 <vscp_rcv_writereg+0xa4>
    546c:	4000073c 	andmi	r0, r0, ip, lsr r7
    5470:	4000074e 	andmi	r0, r0, lr, asr #14
    5474:	40000724 	andmi	r0, r0, r4, lsr #14
    5478:	40000750 	andmi	r0, r0, r0, asr r7

0000547c <vscp_rcv_readreg>:
    547c:	e92d4010 	stmdb	sp!, {r4, lr}
    5480:	e59f3184 	ldr	r3, [pc, #388]	; 560c <.text+0x560c>
    5484:	e59f4184 	ldr	r4, [pc, #388]	; 5610 <.text+0x5610>
    5488:	e5d30007 	ldrb	r0, [r3, #7]
    548c:	e3a03007 	mov	r3, #7	; 0x7
    5490:	e3a0c000 	mov	ip, #0	; 0x0
    5494:	e5c43001 	strb	r3, [r4, #1]
    5498:	e3e0207d 	mvn	r2, #125	; 0x7d
    549c:	e2833003 	add	r3, r3, #3	; 0x3
    54a0:	e3500080 	cmp	r0, #128	; 0x80
    54a4:	e5c42000 	strb	r2, [r4]
    54a8:	e5c43004 	strb	r3, [r4, #4]
    54ac:	e5c4c006 	strb	ip, [r4, #6]
    54b0:	e1c4c0b2 	strh	ip, [r4, #2]
    54b4:	e5c40005 	strb	r0, [r4, #5]
    54b8:	0a000029 	beq	5564 <vscp_rcv_readreg+0xe8>
    54bc:	e3500081 	cmp	r0, #129	; 0x81
    54c0:	0a00002c 	beq	5578 <vscp_rcv_readreg+0xfc>
    54c4:	e3500082 	cmp	r0, #130	; 0x82
    54c8:	0a000022 	beq	5558 <vscp_rcv_readreg+0xdc>
    54cc:	e3500083 	cmp	r0, #131	; 0x83
    54d0:	0a000020 	beq	5558 <vscp_rcv_readreg+0xdc>
    54d4:	e3500094 	cmp	r0, #148	; 0x94
    54d8:	0a000036 	beq	55b8 <vscp_rcv_readreg+0x13c>
    54dc:	e3500095 	cmp	r0, #149	; 0x95
    54e0:	0a000027 	beq	5584 <vscp_rcv_readreg+0x108>
    54e4:	e3500096 	cmp	r0, #150	; 0x96
    54e8:	0a000039 	beq	55d4 <vscp_rcv_readreg+0x158>
    54ec:	e3500088 	cmp	r0, #136	; 0x88
    54f0:	9a00002a 	bls	55a0 <vscp_rcv_readreg+0x124>
    54f4:	e2803077 	add	r3, r0, #119	; 0x77
    54f8:	e20330ff 	and	r3, r3, #255	; 0xff
    54fc:	e3530007 	cmp	r3, #7	; 0x7
    5500:	9a00002f 	bls	55c4 <vscp_rcv_readreg+0x148>
    5504:	e3500091 	cmp	r0, #145	; 0x91
    5508:	0a000034 	beq	55e0 <vscp_rcv_readreg+0x164>
    550c:	e3500093 	cmp	r0, #147	; 0x93
    5510:	0a00001e 	beq	5590 <vscp_rcv_readreg+0x114>
    5514:	e3500092 	cmp	r0, #146	; 0x92
    5518:	03a03000 	moveq	r3, #0	; 0x0
    551c:	05c43006 	streqb	r3, [r4, #6]
    5520:	0a00000d 	beq	555c <vscp_rcv_readreg+0xe0>
    5524:	e3500097 	cmp	r0, #151	; 0x97
    5528:	0a000012 	beq	5578 <vscp_rcv_readreg+0xfc>
    552c:	e3500098 	cmp	r0, #152	; 0x98
    5530:	0a000032 	beq	5600 <vscp_rcv_readreg+0x184>
    5534:	e2803030 	add	r3, r0, #48	; 0x30
    5538:	e20330ff 	and	r3, r3, #255	; 0xff
    553c:	e353000f 	cmp	r3, #15	; 0xf
    5540:	9a00002a 	bls	55f0 <vscp_rcv_readreg+0x174>
    5544:	e59f30c8 	ldr	r3, [pc, #200]	; 5614 <.text+0x5614>
    5548:	e0803003 	add	r3, r0, r3
    554c:	e55320e0 	ldrb	r2, [r3, #-224]
    5550:	e5c42006 	strb	r2, [r4, #6]
    5554:	ea000000 	b	555c <vscp_rcv_readreg+0xe0>
    5558:	e5c4c006 	strb	ip, [r4, #6]
    555c:	e8bd4010 	ldmia	sp!, {r4, lr}
    5560:	eaffff4b 	b	5294 <vscp_sendMsg>
    5564:	e59f30ac 	ldr	r3, [pc, #172]	; 5618 <.text+0x5618>
    5568:	e5d32000 	ldrb	r2, [r3]
    556c:	e5c3c000 	strb	ip, [r3]
    5570:	e5c42006 	strb	r2, [r4, #6]
    5574:	eafffff8 	b	555c <vscp_rcv_readreg+0xe0>
    5578:	e3a03001 	mov	r3, #1	; 0x1
    557c:	e5c43006 	strb	r3, [r4, #6]
    5580:	eafffff5 	b	555c <vscp_rcv_readreg+0xe0>
    5584:	ebffeaf3 	bl	158 <getMinorVersion>
    5588:	e5c40006 	strb	r0, [r4, #6]
    558c:	eafffff2 	b	555c <vscp_rcv_readreg+0xe0>
    5590:	e59f3084 	ldr	r3, [pc, #132]	; 561c <.text+0x561c>
    5594:	e1d320b0 	ldrh	r2, [r3]
    5598:	e5c42006 	strb	r2, [r4, #6]
    559c:	eaffffee 	b	555c <vscp_rcv_readreg+0xe0>
    55a0:	e2400080 	sub	r0, r0, #128	; 0x80
    55a4:	e1a00800 	mov	r0, r0, lsl #16
    55a8:	e1a00820 	mov	r0, r0, lsr #16
    55ac:	ebfffd23 	bl	4a40 <readEEPROM>
    55b0:	e5c40006 	strb	r0, [r4, #6]
    55b4:	eaffffe8 	b	555c <vscp_rcv_readreg+0xe0>
    55b8:	ebffeae4 	bl	150 <getMajorVersion>
    55bc:	e5c40006 	strb	r0, [r4, #6]
    55c0:	eaffffe5 	b	555c <vscp_rcv_readreg+0xe0>
    55c4:	e1a00003 	mov	r0, r3
    55c8:	ebffeaea 	bl	178 <getManufacturerIdFromEEprom>
    55cc:	e5c40006 	strb	r0, [r4, #6]
    55d0:	eaffffe1 	b	555c <vscp_rcv_readreg+0xe0>
    55d4:	ebffeae1 	bl	160 <getSubMinorVersion>
    55d8:	e5c40006 	strb	r0, [r4, #6]
    55dc:	eaffffde 	b	555c <vscp_rcv_readreg+0xe0>
    55e0:	e59f3038 	ldr	r3, [pc, #56]	; 5620 <.text+0x5620>
    55e4:	e5d32000 	ldrb	r2, [r3]
    55e8:	e5c42006 	strb	r2, [r4, #6]
    55ec:	eaffffda 	b	555c <vscp_rcv_readreg+0xe0>
    55f0:	e1a00003 	mov	r0, r3
    55f4:	ebffeae7 	bl	198 <getGuidFromEEprom>
    55f8:	e5c40006 	strb	r0, [r4, #6]
    55fc:	eaffffd6 	b	555c <vscp_rcv_readreg+0xe0>
    5600:	ebffeada 	bl	170 <getBufferSize>
    5604:	e5c40006 	strb	r0, [r4, #6]
    5608:	eaffffd3 	b	555c <vscp_rcv_readreg+0xe0>
    560c:	4000073c 	andmi	r0, r0, ip, lsr r7
    5610:	40000724 	andmi	r0, r0, r4, lsr #14
    5614:	000085dc 	ldreqd	r8, [r0], -ip
    5618:	4000074d 	andmi	r0, r0, sp, asr #14
    561c:	40000750 	andmi	r0, r0, r0, asr r7
    5620:	4000074e 	andmi	r0, r0, lr, asr #14

00005624 <vscp_rcv_new_node_online>:
    5624:	e59f2048 	ldr	r2, [pc, #72]	; 5674 <.text+0x5674>
    5628:	e5d23000 	ldrb	r3, [r2]
    562c:	e203300f 	and	r3, r3, #15	; 0xf
    5630:	e3530001 	cmp	r3, #1	; 0x1
    5634:	112fff1e 	bxne	lr
    5638:	e5d23006 	ldrb	r3, [r2, #6]
    563c:	e59f2034 	ldr	r2, [pc, #52]	; 5678 <.text+0x5678>
    5640:	e5d21000 	ldrb	r1, [r2]
    5644:	e1530001 	cmp	r3, r1
    5648:	e59f002c 	ldr	r0, [pc, #44]	; 567c <.text+0x567c>
    564c:	112fff1e 	bxne	lr
    5650:	e3a03003 	mov	r3, #3	; 0x3
    5654:	e5c03004 	strb	r3, [r0, #4]
    5658:	e2833004 	add	r3, r3, #4	; 0x4
    565c:	e3e0207f 	mvn	r2, #127	; 0x7f
    5660:	e5c03001 	strb	r3, [r0, #1]
    5664:	e3a03000 	mov	r3, #0	; 0x0
    5668:	e5c02000 	strb	r2, [r0]
    566c:	e1c030b2 	strh	r3, [r0, #2]
    5670:	eaffff07 	b	5294 <vscp_sendMsg>
    5674:	4000073c 	andmi	r0, r0, ip, lsr r7
    5678:	4000074e 	andmi	r0, r0, lr, asr #14
    567c:	40000724 	andmi	r0, r0, r4, lsr #14

00005680 <vscp_active>:
    5680:	e52de004 	str	lr, [sp, #-4]!
    5684:	e59f303c 	ldr	r3, [pc, #60]	; 56c8 <.text+0x56c8>
    5688:	e59f103c 	ldr	r1, [pc, #60]	; 56cc <.text+0x56cc>
    568c:	e5d32000 	ldrb	r2, [r3]
    5690:	e3e0307e 	mvn	r3, #126	; 0x7e
    5694:	e5c13000 	strb	r3, [r1]
    5698:	e2833081 	add	r3, r3, #129	; 0x81
    569c:	e5c12005 	strb	r2, [r1, #5]
    56a0:	e5c13004 	strb	r3, [r1, #4]
    56a4:	e3a02007 	mov	r2, #7	; 0x7
    56a8:	e3a03000 	mov	r3, #0	; 0x0
    56ac:	e5c12001 	strb	r2, [r1, #1]
    56b0:	e1c130b2 	strh	r3, [r1, #2]
    56b4:	ebfffef6 	bl	5294 <vscp_sendMsg>
    56b8:	e59f3010 	ldr	r3, [pc, #16]	; 56d0 <.text+0x56d0>
    56bc:	e3a02001 	mov	r2, #1	; 0x1
    56c0:	e5c32000 	strb	r2, [r3]
    56c4:	e49df004 	ldr	pc, [sp], #4
    56c8:	4000074e 	andmi	r0, r0, lr, asr #14
    56cc:	40000724 	andmi	r0, r0, r4, lsr #14
    56d0:	40000738 	andmi	r0, r0, r8, lsr r7

000056d4 <vscp_probe>:
    56d4:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    56d8:	e59f51c0 	ldr	r5, [pc, #448]	; 58a0 <.text+0x58a0>
    56dc:	e5d50000 	ldrb	r0, [r5]
    56e0:	e3500001 	cmp	r0, #1	; 0x1
    56e4:	0a000020 	beq	576c <vscp_probe+0x98>
    56e8:	3a000007 	bcc	570c <vscp_probe+0x38>
    56ec:	e3500002 	cmp	r0, #2	; 0x2
    56f0:	159f71ac 	ldrne	r7, [pc, #428]	; 58a4 <.text+0x58a4>
    56f4:	0a000051 	beq	5840 <vscp_probe+0x16c>
    56f8:	e3a03000 	mov	r3, #0	; 0x0
    56fc:	e5c53000 	strb	r3, [r5]
    5700:	e3a03000 	mov	r3, #0	; 0x0
    5704:	e5c73000 	strb	r3, [r7]
    5708:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    570c:	e59f3194 	ldr	r3, [pc, #404]	; 58a8 <.text+0x58a8>
    5710:	e5d33000 	ldrb	r3, [r3]
    5714:	e35300ff 	cmp	r3, #255	; 0xff
    5718:	0a000038 	beq	5800 <vscp_probe+0x12c>
    571c:	e59f1188 	ldr	r1, [pc, #392]	; 58ac <.text+0x58ac>
    5720:	e5c13005 	strb	r3, [r1, #5]
    5724:	e3e0307e 	mvn	r3, #126	; 0x7e
    5728:	e5c13000 	strb	r3, [r1]
    572c:	e2833081 	add	r3, r3, #129	; 0x81
    5730:	e3a02007 	mov	r2, #7	; 0x7
    5734:	e5c13004 	strb	r3, [r1, #4]
    5738:	e3a03000 	mov	r3, #0	; 0x0
    573c:	e5c12001 	strb	r2, [r1, #1]
    5740:	e1c130b2 	strh	r3, [r1, #2]
    5744:	ebfffed2 	bl	5294 <vscp_sendMsg>
    5748:	e3a03001 	mov	r3, #1	; 0x1
    574c:	e59f215c 	ldr	r2, [pc, #348]	; 58b0 <.text+0x58b0>
    5750:	e59f714c 	ldr	r7, [pc, #332]	; 58a4 <.text+0x58a4>
    5754:	e5c53000 	strb	r3, [r5]
    5758:	e3a03000 	mov	r3, #0	; 0x0
    575c:	e1c230b0 	strh	r3, [r2]
    5760:	e3a03000 	mov	r3, #0	; 0x0
    5764:	e5c73000 	strb	r3, [r7]
    5768:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    576c:	e59f7130 	ldr	r7, [pc, #304]	; 58a4 <.text+0x58a4>
    5770:	e1d730d0 	ldrsb	r3, [r7]
    5774:	e3530000 	cmp	r3, #0	; 0x0
    5778:	ba000034 	blt	5850 <vscp_probe+0x17c>
    577c:	e59f212c 	ldr	r2, [pc, #300]	; 58b0 <.text+0x58b0>
    5780:	e1d230b0 	ldrh	r3, [r2]
    5784:	e1a03803 	mov	r3, r3, lsl #16
    5788:	e353077d 	cmp	r3, #32768000	; 0x1f40000
    578c:	9affffdb 	bls	5700 <vscp_probe+0x2c>
    5790:	e59f611c 	ldr	r6, [pc, #284]	; 58b4 <.text+0x58b4>
    5794:	e5d63000 	ldrb	r3, [r6]
    5798:	e2833001 	add	r3, r3, #1	; 0x1
    579c:	e20330ff 	and	r3, r3, #255	; 0xff
    57a0:	e3530003 	cmp	r3, #3	; 0x3
    57a4:	e5c63000 	strb	r3, [r6]
    57a8:	9affffd2 	bls	56f8 <vscp_probe+0x24>
    57ac:	e59f30f4 	ldr	r3, [pc, #244]	; 58a8 <.text+0x58a8>
    57b0:	e5d3e000 	ldrb	lr, [r3]
    57b4:	e35e0000 	cmp	lr, #0	; 0x0
    57b8:	05c30000 	streqb	r0, [r3]
    57bc:	05c5e000 	streqb	lr, [r5]
    57c0:	0affffce 	beq	5700 <vscp_probe+0x2c>
    57c4:	e59f30ec 	ldr	r3, [pc, #236]	; 58b8 <.text+0x58b8>
    57c8:	e59f20ec 	ldr	r2, [pc, #236]	; 58bc <.text+0x58bc>
    57cc:	e3a0c003 	mov	ip, #3	; 0x3
    57d0:	e1a0100e 	mov	r1, lr
    57d4:	e3a04000 	mov	r4, #0	; 0x0
    57d8:	e5c3c000 	strb	ip, [r3]
    57dc:	e5c2e000 	strb	lr, [r2]
    57e0:	e5c54000 	strb	r4, [r5]
    57e4:	ebfffcc3 	bl	4af8 <writeEEPROM>
    57e8:	e3a01040 	mov	r1, #64	; 0x40
    57ec:	e3a00002 	mov	r0, #2	; 0x2
    57f0:	ebfffcc0 	bl	4af8 <writeEEPROM>
    57f4:	e5c64000 	strb	r4, [r6]
    57f8:	ebffffa0 	bl	5680 <vscp_active>
    57fc:	eaffffbf 	b	5700 <vscp_probe+0x2c>
    5800:	e59f30b0 	ldr	r3, [pc, #176]	; 58b8 <.text+0x58b8>
    5804:	e59f10a0 	ldr	r1, [pc, #160]	; 58ac <.text+0x58ac>
    5808:	e3a00004 	mov	r0, #4	; 0x4
    580c:	e5c30000 	strb	r0, [r3]
    5810:	e3a03007 	mov	r3, #7	; 0x7
    5814:	e3e0207e 	mvn	r2, #126	; 0x7e
    5818:	e5c13001 	strb	r3, [r1, #1]
    581c:	e3a03000 	mov	r3, #0	; 0x0
    5820:	e1c130b2 	strh	r3, [r1, #2]
    5824:	e5c10004 	strb	r0, [r1, #4]
    5828:	e5c12000 	strb	r2, [r1]
    582c:	ebfffe98 	bl	5294 <vscp_sendMsg>
    5830:	e59f706c 	ldr	r7, [pc, #108]	; 58a4 <.text+0x58a4>
    5834:	e3a03000 	mov	r3, #0	; 0x0
    5838:	e5c73000 	strb	r3, [r7]
    583c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    5840:	e59f705c 	ldr	r7, [pc, #92]	; 58a4 <.text+0x58a4>
    5844:	e3a03000 	mov	r3, #0	; 0x0
    5848:	e5c73000 	strb	r3, [r7]
    584c:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    5850:	e1d700b2 	ldrh	r0, [r7, #2]
    5854:	e3500000 	cmp	r0, #0	; 0x0
    5858:	1affffa8 	bne	5700 <vscp_probe+0x2c>
    585c:	e5d73004 	ldrb	r3, [r7, #4]
    5860:	e3530003 	cmp	r3, #3	; 0x3
    5864:	1affffa5 	bne	5700 <vscp_probe+0x2c>
    5868:	e59f2038 	ldr	r2, [pc, #56]	; 58a8 <.text+0x58a8>
    586c:	e5d23000 	ldrb	r3, [r2]
    5870:	e3530000 	cmp	r3, #0	; 0x0
    5874:	12833001 	addne	r3, r3, #1	; 0x1
    5878:	059f2038 	ldreq	r2, [pc, #56]	; 58b8 <.text+0x58b8>
    587c:	059f102c 	ldreq	r1, [pc, #44]	; 58b0 <.text+0x58b0>
    5880:	15c23000 	strneb	r3, [r2]
    5884:	159f2028 	ldrne	r2, [pc, #40]	; 58b4 <.text+0x58b4>
    5888:	02833002 	addeq	r3, r3, #2	; 0x2
    588c:	05c23000 	streqb	r3, [r2]
    5890:	01c100b0 	streqh	r0, [r1]
    5894:	15c20000 	strneb	r0, [r2]
    5898:	15c50000 	strneb	r0, [r5]
    589c:	eaffff97 	b	5700 <vscp_probe+0x2c>
    58a0:	40000734 	andmi	r0, r0, r4, lsr r7
    58a4:	4000073c 	andmi	r0, r0, ip, lsr r7
    58a8:	40000735 	andmi	r0, r0, r5, lsr r7
    58ac:	40000724 	andmi	r0, r0, r4, lsr #14
    58b0:	40000752 	andmi	r0, r0, r2, asr r7
    58b4:	40000754 	andmi	r0, r0, r4, asr r7
    58b8:	4000074c 	andmi	r0, r0, ip, asr #14
    58bc:	4000074e 	andmi	r0, r0, lr, asr #14

000058c0 <sendVSCPFrame>:
    58c0:	e59fc02c 	ldr	ip, [pc, #44]	; 58f4 <.text+0x58f4>
    58c4:	e52de004 	str	lr, [sp, #-4]!
    58c8:	e5dce000 	ldrb	lr, [ip]
    58cc:	e1a01801 	mov	r1, r1, lsl #16
    58d0:	e08ee800 	add	lr, lr, r0, lsl #16
    58d4:	e20220ff 	and	r2, r2, #255	; 0xff
    58d8:	e08e0421 	add	r0, lr, r1, lsr #8
    58dc:	e1a01002 	mov	r1, r2
    58e0:	e1a02003 	mov	r2, r3
    58e4:	ebfffcaf 	bl	4ba8 <SendCANFrame>
    58e8:	e2500000 	subs	r0, r0, #0	; 0x0
    58ec:	13a00001 	movne	r0, #1	; 0x1
    58f0:	e49df004 	ldr	pc, [sp], #4
    58f4:	4000074e 	andmi	r0, r0, lr, asr #14

000058f8 <sendActiveState>:
// sendActiveState
//

int sendActiveState( uint8_t subzone, BOOL bState )
{
    58f8:	e92d4030 	stmdb	sp!, {r4, r5, lr}
	vscp_omsg.priority = VSCP_PRIORITY_MEDIUM;
    58fc:	e59f4054 	ldr	r4, [pc, #84]	; 5958 <.text+0x5958>
    5900:	e3a03004 	mov	r3, #4	; 0x4
	vscp_omsg.flag = VSCP_VALID_MSG + 3;
	vscp_omsg.class = VSCP_CLASS1_INFORMATION;
	if ( bState ) {
    5904:	e3510000 	cmp	r1, #0	; 0x0
    5908:	e5c43001 	strb	r3, [r4, #1]
    590c:	e3a03014 	mov	r3, #20	; 0x14
    5910:	e1c430b2 	strh	r3, [r4, #2]
		vscp_omsg.type = VSCP_TYPE_INFORMATION_ACTIVE;
    5914:	13a03020 	movne	r3, #32	; 0x20
	}
	else {
		vscp_omsg.type = VSCP_TYPE_INFORMATION_INACTIVE;
    5918:	03a03021 	moveq	r3, #33	; 0x21
    591c:	15c43004 	strneb	r3, [r4, #4]
    5920:	05c43004 	streqb	r3, [r4, #4]
    5924:	e3e0207c 	mvn	r2, #124	; 0x7c
	}
	
	vscp_omsg.data[ 0 ] = 0;	// Not used
    5928:	e3a03000 	mov	r3, #0	; 0x0
    592c:	e20050ff 	and	r5, r0, #255	; 0xff
	vscp_omsg.data[ 1 ] = readEEPROM( REGISTER_ZONE + VSCP_EEPROM_VSCP_END );
    5930:	e3a00021 	mov	r0, #33	; 0x21
    5934:	e5c42000 	strb	r2, [r4]
    5938:	e5c43005 	strb	r3, [r4, #5]
    593c:	ebfffc3f 	bl	4a40 <readEEPROM>
	vscp_omsg.data[ 2 ] = subzone;
    5940:	e5c45007 	strb	r5, [r4, #7]
    5944:	e5c40006 	strb	r0, [r4, #6]
	
	// Send data
	if ( !vscp_sendMsg() ) {
    5948:	ebfffe51 	bl	5294 <vscp_sendMsg>
		return FALSE;
	}

	return TRUE;
}
    594c:	e2500000 	subs	r0, r0, #0	; 0x0
    5950:	13a00001 	movne	r0, #1	; 0x1
    5954:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    5958:	40000724 	andmi	r0, r0, r4, lsr #14

0000595c <sendRelayState>:
    595c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    5960:	e59f4050 	ldr	r4, [pc, #80]	; 59b8 <.text+0x59b8>
    5964:	e3e0307c 	mvn	r3, #124	; 0x7c
    5968:	e3510000 	cmp	r1, #0	; 0x0
    596c:	e5c43000 	strb	r3, [r4]
    5970:	e3a03014 	mov	r3, #20	; 0x14
    5974:	e1c430b2 	strh	r3, [r4, #2]
    5978:	13a03003 	movne	r3, #3	; 0x3
    597c:	e3a02004 	mov	r2, #4	; 0x4
    5980:	15c43004 	strneb	r3, [r4, #4]
    5984:	e20050ff 	and	r5, r0, #255	; 0xff
    5988:	e3a03000 	mov	r3, #0	; 0x0
    598c:	e3a00021 	mov	r0, #33	; 0x21
    5990:	05c42004 	streqb	r2, [r4, #4]
    5994:	e5c42001 	strb	r2, [r4, #1]
    5998:	e5c43005 	strb	r3, [r4, #5]
    599c:	ebfffc27 	bl	4a40 <readEEPROM>
    59a0:	e5c45007 	strb	r5, [r4, #7]
    59a4:	e5c40006 	strb	r0, [r4, #6]
    59a8:	ebfffe39 	bl	5294 <vscp_sendMsg>
    59ac:	e2500000 	subs	r0, r0, #0	; 0x0
    59b0:	13a00001 	movne	r0, #1	; 0x1
    59b4:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    59b8:	40000724 	andmi	r0, r0, r4, lsr #14

000059bc <sendHeartBeat>:
    59bc:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    59c0:	e59f4044 	ldr	r4, [pc, #68]	; 5a0c <.text+0x5a0c>
    59c4:	e3a03004 	mov	r3, #4	; 0x4
    59c8:	e5c43001 	strb	r3, [r4, #1]
    59cc:	e2833005 	add	r3, r3, #5	; 0x5
    59d0:	e3a05000 	mov	r5, #0	; 0x0
    59d4:	e3e0207c 	mvn	r2, #124	; 0x7c
    59d8:	e5c43004 	strb	r3, [r4, #4]
    59dc:	e3a00021 	mov	r0, #33	; 0x21
    59e0:	e3a03014 	mov	r3, #20	; 0x14
    59e4:	e5c42000 	strb	r2, [r4]
    59e8:	e1c430b2 	strh	r3, [r4, #2]
    59ec:	e5c45005 	strb	r5, [r4, #5]
    59f0:	ebfffc12 	bl	4a40 <readEEPROM>
    59f4:	e5c45007 	strb	r5, [r4, #7]
    59f8:	e5c40006 	strb	r0, [r4, #6]
    59fc:	ebfffe24 	bl	5294 <vscp_sendMsg>
    5a00:	e0500005 	subs	r0, r0, r5
    5a04:	13a00001 	movne	r0, #1	; 0x1
    5a08:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    5a0c:	40000724 	andmi	r0, r0, r4, lsr #14

00005a10 <sendStateEvent>:
    5a10:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
    5a14:	e59f4060 	ldr	r4, [pc, #96]	; 5a7c <.text+0x5a7c>
    5a18:	e3a03004 	mov	r3, #4	; 0x4
    5a1c:	e5c43001 	strb	r3, [r4, #1]
    5a20:	e1a05002 	mov	r5, r2
    5a24:	e2833026 	add	r3, r3, #38	; 0x26
    5a28:	e3e0207a 	mvn	r2, #122	; 0x7a
    5a2c:	e5c42000 	strb	r2, [r4]
    5a30:	e5c43004 	strb	r3, [r4, #4]
    5a34:	e282207b 	add	r2, r2, #123	; 0x7b
    5a38:	e3a03014 	mov	r3, #20	; 0x14
    5a3c:	e1a06000 	mov	r6, r0
    5a40:	e3a00021 	mov	r0, #33	; 0x21
    5a44:	e20170ff 	and	r7, r1, #255	; 0xff
    5a48:	e5c42005 	strb	r2, [r4, #5]
    5a4c:	e1c430b2 	strh	r3, [r4, #2]
    5a50:	ebfffbfa 	bl	4a40 <readEEPROM>
    5a54:	e20660ff 	and	r6, r6, #255	; 0xff
    5a58:	e20550ff 	and	r5, r5, #255	; 0xff
    5a5c:	e5c45009 	strb	r5, [r4, #9]
    5a60:	e5c40006 	strb	r0, [r4, #6]
    5a64:	e5c46007 	strb	r6, [r4, #7]
    5a68:	e5c47008 	strb	r7, [r4, #8]
    5a6c:	ebfffe08 	bl	5294 <vscp_sendMsg>
    5a70:	e2500000 	subs	r0, r0, #0	; 0x0
    5a74:	13a00001 	movne	r0, #1	; 0x1
    5a78:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}
    5a7c:	40000724 	andmi	r0, r0, r4, lsr #14

00005a80 <sendTempEvent>:
    5a80:	e59fc03c 	ldr	ip, [pc, #60]	; 5ac4 <.text+0x5ac4>
    5a84:	e3a03004 	mov	r3, #4	; 0x4
    5a88:	e5cc3001 	strb	r3, [ip, #1]
    5a8c:	e2833002 	add	r3, r3, #2	; 0x2
    5a90:	e3e0207d 	mvn	r2, #125	; 0x7d
    5a94:	e5cc3004 	strb	r3, [ip, #4]
    5a98:	e52de004 	str	lr, [sp, #-4]!
    5a9c:	e3a0300a 	mov	r3, #10	; 0xa
    5aa0:	e2800060 	add	r0, r0, #96	; 0x60
    5aa4:	e5cc1006 	strb	r1, [ip, #6]
    5aa8:	e5cc2000 	strb	r2, [ip]
    5aac:	e5cc0005 	strb	r0, [ip, #5]
    5ab0:	e1cc30b2 	strh	r3, [ip, #2]
    5ab4:	ebfffdf6 	bl	5294 <vscp_sendMsg>
    5ab8:	e2500000 	subs	r0, r0, #0	; 0x0
    5abc:	13a00001 	movne	r0, #1	; 0x1
    5ac0:	e49df004 	ldr	pc, [sp], #4
    5ac4:	40000724 	andmi	r0, r0, r4, lsr #14

00005ac8 <sendErrorEvent>:
    5ac8:	e59f1034 	ldr	r1, [pc, #52]	; 5b04 <.text+0x5b04>
    5acc:	e3a03007 	mov	r3, #7	; 0x7
    5ad0:	e52de004 	str	lr, [sp, #-4]!
    5ad4:	e5c13001 	strb	r3, [r1, #1]
    5ad8:	e2833006 	add	r3, r3, #6	; 0x6
    5adc:	e3e0207e 	mvn	r2, #126	; 0x7e
    5ae0:	e5c13004 	strb	r3, [r1, #4]
    5ae4:	e3a03f85 	mov	r3, #532	; 0x214
    5ae8:	e5c10005 	strb	r0, [r1, #5]
    5aec:	e5c12000 	strb	r2, [r1]
    5af0:	e1c130b2 	strh	r3, [r1, #2]
    5af4:	ebfffde6 	bl	5294 <vscp_sendMsg>
    5af8:	e2500000 	subs	r0, r0, #0	; 0x0
    5afc:	13a00001 	movne	r0, #1	; 0x1
    5b00:	e49df004 	ldr	pc, [sp], #4
    5b04:	40000724 	andmi	r0, r0, r4, lsr #14

00005b08 <sendAlarmEvent>:
    5b08:	e52de004 	str	lr, [sp, #-4]!
    5b0c:	e59f303c 	ldr	r3, [pc, #60]	; 5b50 <.text+0x5b50>
    5b10:	e59f103c 	ldr	r1, [pc, #60]	; 5b54 <.text+0x5b54>
    5b14:	e5d32000 	ldrb	r2, [r3]
    5b18:	e3a03007 	mov	r3, #7	; 0x7
    5b1c:	e5c13001 	strb	r3, [r1, #1]
    5b20:	e2433005 	sub	r3, r3, #5	; 0x5
    5b24:	e5c12006 	strb	r2, [r1, #6]
    5b28:	e5c13004 	strb	r3, [r1, #4]
    5b2c:	e3e0207d 	mvn	r2, #125	; 0x7d
    5b30:	e3a03001 	mov	r3, #1	; 0x1
    5b34:	e5c12000 	strb	r2, [r1]
    5b38:	e5c10005 	strb	r0, [r1, #5]
    5b3c:	e1c130b2 	strh	r3, [r1, #2]
    5b40:	ebfffdd3 	bl	5294 <vscp_sendMsg>
    5b44:	e2500000 	subs	r0, r0, #0	; 0x0
    5b48:	13a00001 	movne	r0, #1	; 0x1
    5b4c:	e49df004 	ldr	pc, [sp], #4
    5b50:	4000074d 	andmi	r0, r0, sp, asr #14
    5b54:	40000724 	andmi	r0, r0, r4, lsr #14

00005b58 <debugWrite>:
// debugWrite
//

void debugWrite( char *p )
{
    5b58:	e92d40f0 	stmdb	sp!, {r4, r5, r6, r7, lr}
	unsigned mycpsr;
	const char *pp = p;
	
	while ( 0 != *pp ) {
    5b5c:	e5d03000 	ldrb	r3, [r0]
    5b60:	e3530000 	cmp	r3, #0	; 0x0
    5b64:	e1a04000 	mov	r4, r0
    5b68:	08bd80f0 	ldmeqia	sp!, {r4, r5, r6, r7, pc}
    5b6c:	e3a0520e 	mov	r5, #-536870912	; 0xe0000000
    5b70:	e3e07055 	mvn	r7, #85	; 0x55
    5b74:	e3a06055 	mov	r6, #85	; 0x55
	
		pp = uart0Puts( pp );
    5b78:	e1a00004 	mov	r0, r4
    5b7c:	ebfff83a 	bl	3c6c <uart0Puts>
    5b80:	e1a04000 	mov	r4, r0
		
		mycpsr = disableIRQ();
    5b84:	ebfff91a 	bl	3ff4 <disableIRQ>
		WDFEED = 0xAA; WDFEED = 0x55;
    5b88:	e5c57008 	strb	r7, [r5, #8]
    5b8c:	e5c56008 	strb	r6, [r5, #8]
		restoreIRQ( mycpsr );
    5b90:	ebfff901 	bl	3f9c <restoreIRQ>
    5b94:	e5d43000 	ldrb	r3, [r4]
    5b98:	e3530000 	cmp	r3, #0	; 0x0
    5b9c:	1afffff5 	bne	5b78 <debugWrite+0x20>
    5ba0:	e8bd80f0 	ldmia	sp!, {r4, r5, r6, r7, pc}

00005ba4 <debugWritecrlf>:
		
	}
}

///////////////////////////////////////////////////////////////////////////////
// debugWritecrlf
//

void debugWritecrlf( char *p )
{
    5ba4:	e52de004 	str	lr, [sp, #-4]!
	debugWrite( p );
    5ba8:	ebffffea 	bl	5b58 <debugWrite>
	uart0Puts( "\r\n" );
    5bac:	e59f0004 	ldr	r0, [pc, #4]	; 5bb8 <.text+0x5bb8>
}
    5bb0:	e49de004 	ldr	lr, [sp], #4
    5bb4:	eafff82c 	b	3c6c <uart0Puts>
    5bb8:	000088c4 	andeq	r8, r0, r4, asr #17

00005bbc <memcpy>:
    5bbc:	e3a0c000 	mov	ip, #0	; 0x0
    5bc0:	ea000002 	b	5bd0 <memcpy+0x14>
    5bc4:	e7dc3001 	ldrb	r3, [ip, r1]
    5bc8:	e7cc3000 	strb	r3, [ip, r0]
    5bcc:	e28cc001 	add	ip, ip, #1	; 0x1
    5bd0:	e2522001 	subs	r2, r2, #1	; 0x1
    5bd4:	2afffffa 	bcs	5bc4 <memcpy+0x8>
    5bd8:	e12fff1e 	bx	lr

00005bdc <memset>:
    5bdc:	e3a03000 	mov	r3, #0	; 0x0
    5be0:	ea000001 	b	5bec <memset+0x10>
    5be4:	e7c31000 	strb	r1, [r3, r0]
    5be8:	e2833001 	add	r3, r3, #1	; 0x1
    5bec:	e2522001 	subs	r2, r2, #1	; 0x1
    5bf0:	2afffffb 	bcs	5be4 <memset+0x8>
    5bf4:	e12fff1e 	bx	lr

00005bf8 <strcat>:
    5bf8:	e1a02000 	mov	r2, r0
    5bfc:	ea000000 	b	5c04 <strcat+0xc>
    5c00:	e2822001 	add	r2, r2, #1	; 0x1
    5c04:	e5d23000 	ldrb	r3, [r2]
    5c08:	e3530000 	cmp	r3, #0	; 0x0
    5c0c:	1afffffb 	bne	5c00 <strcat+0x8>
    5c10:	e4d13001 	ldrb	r3, [r1], #1
    5c14:	e3530000 	cmp	r3, #0	; 0x0
    5c18:	e4c23001 	strb	r3, [r2], #1
    5c1c:	1afffffb 	bne	5c10 <strcat+0x18>
    5c20:	e12fff1e 	bx	lr

00005c24 <strcpy>:
    5c24:	e1a02000 	mov	r2, r0
    5c28:	e4d13001 	ldrb	r3, [r1], #1
    5c2c:	e3530000 	cmp	r3, #0	; 0x0
    5c30:	e4c23001 	strb	r3, [r2], #1
    5c34:	1afffffb 	bne	5c28 <strcpy+0x4>
    5c38:	e12fff1e 	bx	lr

00005c3c <strlen>:
    5c3c:	e1a02000 	mov	r2, r0
    5c40:	ea000000 	b	5c48 <strlen+0xc>
    5c44:	e2800001 	add	r0, r0, #1	; 0x1
    5c48:	e5d03000 	ldrb	r3, [r0]
    5c4c:	e3530000 	cmp	r3, #0	; 0x0
    5c50:	1afffffb 	bne	5c44 <strlen+0x8>
    5c54:	e0620000 	rsb	r0, r2, r0
    5c58:	e12fff1e 	bx	lr

00005c5c <_strtoul_r>:
    5c5c:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c60:	e1a08001 	mov	r8, r1
    5c64:	e59f1160 	ldr	r1, [pc, #352]	; 5dcc <.text+0x5dcc>
    5c68:	e24dd004 	sub	sp, sp, #4	; 0x4
    5c6c:	e5919000 	ldr	r9, [r1]
    5c70:	e58d0000 	str	r0, [sp]
    5c74:	e1a0b002 	mov	fp, r2
    5c78:	e1a06003 	mov	r6, r3
    5c7c:	e1a05008 	mov	r5, r8
    5c80:	e4d54001 	ldrb	r4, [r5], #1
    5c84:	e7d93004 	ldrb	r3, [r9, r4]
    5c88:	e2133008 	ands	r3, r3, #8	; 0x8
    5c8c:	1afffffb 	bne	5c80 <_strtoul_r+0x24>
    5c90:	e354002d 	cmp	r4, #45	; 0x2d
    5c94:	04d54001 	ldreqb	r4, [r5], #1
    5c98:	03a0a001 	moveq	sl, #1	; 0x1
    5c9c:	0a000002 	beq	5cac <_strtoul_r+0x50>
    5ca0:	e354002b 	cmp	r4, #43	; 0x2b
    5ca4:	04d54001 	ldreqb	r4, [r5], #1
    5ca8:	e1a0a003 	mov	sl, r3
    5cac:	e2762001 	rsbs	r2, r6, #1	; 0x1
    5cb0:	33a02000 	movcc	r2, #0	; 0x0
    5cb4:	e3560000 	cmp	r6, #0	; 0x0
    5cb8:	13560010 	cmpne	r6, #16	; 0x10
    5cbc:	1a000008 	bne	5ce4 <_strtoul_r+0x88>
    5cc0:	e3540030 	cmp	r4, #48	; 0x30
    5cc4:	1a000006 	bne	5ce4 <_strtoul_r+0x88>
    5cc8:	e5d53000 	ldrb	r3, [r5]
    5ccc:	e3530058 	cmp	r3, #88	; 0x58
    5cd0:	13530078 	cmpne	r3, #120	; 0x78
    5cd4:	05d54001 	ldreqb	r4, [r5, #1]
    5cd8:	03a06010 	moveq	r6, #16	; 0x10
    5cdc:	02855002 	addeq	r5, r5, #2	; 0x2
    5ce0:	0a000004 	beq	5cf8 <_strtoul_r+0x9c>
    5ce4:	e3520000 	cmp	r2, #0	; 0x0
    5ce8:	0a000002 	beq	5cf8 <_strtoul_r+0x9c>
    5cec:	e3540030 	cmp	r4, #48	; 0x30
    5cf0:	13a0600a 	movne	r6, #10	; 0xa
    5cf4:	03a06008 	moveq	r6, #8	; 0x8
    5cf8:	e1a01006 	mov	r1, r6
    5cfc:	e3e00000 	mvn	r0, #0	; 0x0
    5d00:	eb0006db 	bl	7874 <__aeabi_uidiv>
    5d04:	e1a01006 	mov	r1, r6
    5d08:	e1a07000 	mov	r7, r0
    5d0c:	e3e00000 	mvn	r0, #0	; 0x0
    5d10:	eb00076b 	bl	7ac4 <__umodsi3>
    5d14:	e1a0c000 	mov	ip, r0
    5d18:	e3a00000 	mov	r0, #0	; 0x0
    5d1c:	e1a01000 	mov	r1, r0
    5d20:	e7d93004 	ldrb	r3, [r9, r4]
    5d24:	e3130004 	tst	r3, #4	; 0x4
    5d28:	e2442030 	sub	r2, r4, #48	; 0x30
    5d2c:	1a000005 	bne	5d48 <_strtoul_r+0xec>
    5d30:	e3130003 	tst	r3, #3	; 0x3
    5d34:	0a000015 	beq	5d90 <_strtoul_r+0x134>
    5d38:	e3130001 	tst	r3, #1	; 0x1
    5d3c:	03a03057 	moveq	r3, #87	; 0x57
    5d40:	13a03037 	movne	r3, #55	; 0x37
    5d44:	e0632004 	rsb	r2, r3, r4
    5d48:	e1520006 	cmp	r2, r6
    5d4c:	aa00000f 	bge	5d90 <_strtoul_r+0x134>
    5d50:	e1500007 	cmp	r0, r7
    5d54:	93a03000 	movls	r3, #0	; 0x0
    5d58:	83a03001 	movhi	r3, #1	; 0x1
    5d5c:	e1931fa1 	orrs	r1, r3, r1, lsr #31
    5d60:	e3e01000 	mvn	r1, #0	; 0x0
    5d64:	1a000007 	bne	5d88 <_strtoul_r+0x12c>
    5d68:	e1500007 	cmp	r0, r7
    5d6c:	13a03000 	movne	r3, #0	; 0x0
    5d70:	03a03001 	moveq	r3, #1	; 0x1
    5d74:	e152000c 	cmp	r2, ip
    5d78:	d3a03000 	movle	r3, #0	; 0x0
    5d7c:	e3530000 	cmp	r3, #0	; 0x0
    5d80:	00202096 	mlaeq	r0, r6, r0, r2
    5d84:	02811002 	addeq	r1, r1, #2	; 0x2
    5d88:	e4d54001 	ldrb	r4, [r5], #1
    5d8c:	eaffffe3 	b	5d20 <_strtoul_r+0xc4>
    5d90:	e3510000 	cmp	r1, #0	; 0x0
    5d94:	b59d2000 	ldrlt	r2, [sp]
    5d98:	b3a03022 	movlt	r3, #34	; 0x22
    5d9c:	b3e00000 	mvnlt	r0, #0	; 0x0
    5da0:	b5823000 	strlt	r3, [r2]
    5da4:	ba000001 	blt	5db0 <_strtoul_r+0x154>
    5da8:	e35a0000 	cmp	sl, #0	; 0x0
    5dac:	12600000 	rsbne	r0, r0, #0	; 0x0
    5db0:	e35b0000 	cmp	fp, #0	; 0x0
    5db4:	0a000002 	beq	5dc4 <_strtoul_r+0x168>
    5db8:	e3510000 	cmp	r1, #0	; 0x0
    5dbc:	12458001 	subne	r8, r5, #1	; 0x1
    5dc0:	e58b8000 	str	r8, [fp]
    5dc4:	e28dd004 	add	sp, sp, #4	; 0x4
    5dc8:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5dcc:	40000008 	andmi	r0, r0, r8

00005dd0 <strtoul>:
    5dd0:	e52de004 	str	lr, [sp, #-4]!
    5dd4:	e1a03002 	mov	r3, r2
    5dd8:	e59f2018 	ldr	r2, [pc, #24]	; 5df8 <.text+0x5df8>
    5ddc:	e1a0c000 	mov	ip, r0
    5de0:	e1a0e001 	mov	lr, r1
    5de4:	e5920000 	ldr	r0, [r2]
    5de8:	e1a0100c 	mov	r1, ip
    5dec:	e1a0200e 	mov	r2, lr
    5df0:	e49de004 	ldr	lr, [sp], #4
    5df4:	eaffff98 	b	5c5c <_strtoul_r>
    5df8:	4000000c 	andmi	r0, r0, ip

00005dfc <pow>:
    5dfc:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e00:	e24dd028 	sub	sp, sp, #40	; 0x28
    5e04:	e1a05003 	mov	r5, r3
    5e08:	e1a08000 	mov	r8, r0
    5e0c:	e1a09001 	mov	r9, r1
    5e10:	e1a04002 	mov	r4, r2
    5e14:	eb00011a 	bl	6284 <__ieee754_pow>
    5e18:	e59f3444 	ldr	r3, [pc, #1092]	; 6264 <.text+0x6264>
    5e1c:	e593a000 	ldr	sl, [r3]
    5e20:	e37a0001 	cmn	sl, #1	; 0x1
    5e24:	e1a06000 	mov	r6, r0
    5e28:	e1a07001 	mov	r7, r1
    5e2c:	0a000108 	beq	6254 <pow+0x458>
    5e30:	e1a00004 	mov	r0, r4
    5e34:	e1a01005 	mov	r1, r5
    5e38:	eb0005aa 	bl	74e8 <isnan>
    5e3c:	e250b000 	subs	fp, r0, #0	; 0x0
    5e40:	1a000103 	bne	6254 <pow+0x458>
    5e44:	e1a00008 	mov	r0, r8
    5e48:	e1a01009 	mov	r1, r9
    5e4c:	eb0005a5 	bl	74e8 <isnan>
    5e50:	e3500000 	cmp	r0, #0	; 0x0
    5e54:	e58d0000 	str	r0, [sp]
    5e58:	0a000011 	beq	5ea4 <pow+0xa8>
    5e5c:	e1a00004 	mov	r0, r4
    5e60:	e1a01005 	mov	r1, r5
    5e64:	e3a02000 	mov	r2, #0	; 0x0
    5e68:	e3a03000 	mov	r3, #0	; 0x0
    5e6c:	eb000968 	bl	8414 <__cmpdf2>
    5e70:	e3500000 	cmp	r0, #0	; 0x0
    5e74:	1a0000f6 	bne	6254 <pow+0x458>
    5e78:	e35a0002 	cmp	sl, #2	; 0x2
    5e7c:	e58d801c 	str	r8, [sp, #28]
    5e80:	e58d9020 	str	r9, [sp, #32]
    5e84:	0a00001a 	beq	5ef4 <pow+0xf8>
    5e88:	e28d0004 	add	r0, sp, #4	; 0x4
    5e8c:	e58d4014 	str	r4, [sp, #20]
    5e90:	e58d5018 	str	r5, [sp, #24]
    5e94:	e58d800c 	str	r8, [sp, #12]
    5e98:	e58d9010 	str	r9, [sp, #16]
    5e9c:	e58db024 	str	fp, [sp, #36]
    5ea0:	ea00001e 	b	5f20 <pow+0x124>
    5ea4:	e1a00008 	mov	r0, r8
    5ea8:	e1a01009 	mov	r1, r9
    5eac:	e3a02000 	mov	r2, #0	; 0x0
    5eb0:	e3a03000 	mov	r3, #0	; 0x0
    5eb4:	eb000956 	bl	8414 <__cmpdf2>
    5eb8:	e3500000 	cmp	r0, #0	; 0x0
    5ebc:	1a00003e 	bne	5fbc <pow+0x1c0>
    5ec0:	e1a00004 	mov	r0, r4
    5ec4:	e1a01005 	mov	r1, r5
    5ec8:	e3a02000 	mov	r2, #0	; 0x0
    5ecc:	e3a03000 	mov	r3, #0	; 0x0
    5ed0:	eb00094f 	bl	8414 <__cmpdf2>
    5ed4:	e3500000 	cmp	r0, #0	; 0x0
    5ed8:	1a000015 	bne	5f34 <pow+0x138>
    5edc:	e3a06000 	mov	r6, #0	; 0x0
    5ee0:	e3a07000 	mov	r7, #0	; 0x0
    5ee4:	e35a0000 	cmp	sl, #0	; 0x0
    5ee8:	e58d601c 	str	r6, [sp, #28]
    5eec:	e58d7020 	str	r7, [sp, #32]
    5ef0:	0a000004 	beq	5f08 <pow+0x10c>
    5ef4:	e59f236c 	ldr	r2, [pc, #876]	; 6268 <.text+0x6268>
    5ef8:	e3a03000 	mov	r3, #0	; 0x0
    5efc:	e58d201c 	str	r2, [sp, #28]
    5f00:	e58d3020 	str	r3, [sp, #32]
    5f04:	ea0000d0 	b	624c <pow+0x450>
    5f08:	e58d4014 	str	r4, [sp, #20]
    5f0c:	e58d5018 	str	r5, [sp, #24]
    5f10:	e58d800c 	str	r8, [sp, #12]
    5f14:	e58d9010 	str	r9, [sp, #16]
    5f18:	e58da024 	str	sl, [sp, #36]
    5f1c:	e28d0004 	add	r0, sp, #4	; 0x4
    5f20:	e59f3344 	ldr	r3, [pc, #836]	; 626c <.text+0x626c>
    5f24:	e58d3008 	str	r3, [sp, #8]
    5f28:	e3a03001 	mov	r3, #1	; 0x1
    5f2c:	e58d3004 	str	r3, [sp, #4]
    5f30:	ea00004e 	b	6070 <pow+0x274>
    5f34:	e1a00004 	mov	r0, r4
    5f38:	e1a01005 	mov	r1, r5
    5f3c:	eb000564 	bl	74d4 <finite>
    5f40:	e3500000 	cmp	r0, #0	; 0x0
    5f44:	0a0000c2 	beq	6254 <pow+0x458>
    5f48:	e1a00004 	mov	r0, r4
    5f4c:	e1a01005 	mov	r1, r5
    5f50:	e3a02000 	mov	r2, #0	; 0x0
    5f54:	e3a03000 	mov	r3, #0	; 0x0
    5f58:	eb00092b 	bl	840c <__ledf2>
    5f5c:	e3500000 	cmp	r0, #0	; 0x0
    5f60:	aa0000bb 	bge	6254 <pow+0x458>
    5f64:	e3a03001 	mov	r3, #1	; 0x1
    5f68:	e58d3004 	str	r3, [sp, #4]
    5f6c:	e59f32f8 	ldr	r3, [pc, #760]	; 626c <.text+0x626c>
    5f70:	e58d3008 	str	r3, [sp, #8]
    5f74:	e59d3000 	ldr	r3, [sp]
    5f78:	e35a0000 	cmp	sl, #0	; 0x0
    5f7c:	e58d3024 	str	r3, [sp, #36]
    5f80:	e58d800c 	str	r8, [sp, #12]
    5f84:	e58d9010 	str	r9, [sp, #16]
    5f88:	e58d4014 	str	r4, [sp, #20]
    5f8c:	e58d5018 	str	r5, [sp, #24]
    5f90:	03a06000 	moveq	r6, #0	; 0x0
    5f94:	03a07000 	moveq	r7, #0	; 0x0
    5f98:	058d601c 	streq	r6, [sp, #28]
    5f9c:	058d7020 	streq	r7, [sp, #32]
    5fa0:	0a000031 	beq	606c <pow+0x270>
    5fa4:	e59f22c4 	ldr	r2, [pc, #708]	; 6270 <.text+0x6270>
    5fa8:	e3a03000 	mov	r3, #0	; 0x0
    5fac:	e35a0002 	cmp	sl, #2	; 0x2
    5fb0:	e58d201c 	str	r2, [sp, #28]
    5fb4:	e58d3020 	str	r3, [sp, #32]
    5fb8:	ea00002a 	b	6068 <pow+0x26c>
    5fbc:	e1a00006 	mov	r0, r6
    5fc0:	e1a01007 	mov	r1, r7
    5fc4:	eb000542 	bl	74d4 <finite>
    5fc8:	e250b000 	subs	fp, r0, #0	; 0x0
    5fcc:	1a000070 	bne	6194 <pow+0x398>
    5fd0:	e1a00008 	mov	r0, r8
    5fd4:	e1a01009 	mov	r1, r9
    5fd8:	eb00053d 	bl	74d4 <finite>
    5fdc:	e3500000 	cmp	r0, #0	; 0x0
    5fe0:	0a00006b 	beq	6194 <pow+0x398>
    5fe4:	e1a00004 	mov	r0, r4
    5fe8:	e1a01005 	mov	r1, r5
    5fec:	eb000538 	bl	74d4 <finite>
    5ff0:	e3500000 	cmp	r0, #0	; 0x0
    5ff4:	0a000066 	beq	6194 <pow+0x398>
    5ff8:	e1a00006 	mov	r0, r6
    5ffc:	e1a01007 	mov	r1, r7
    6000:	eb000538 	bl	74e8 <isnan>
    6004:	e3500000 	cmp	r0, #0	; 0x0
    6008:	e59f225c 	ldr	r2, [pc, #604]	; 626c <.text+0x626c>
    600c:	0a00001d 	beq	6088 <pow+0x28c>
    6010:	e3a03001 	mov	r3, #1	; 0x1
    6014:	e35a0000 	cmp	sl, #0	; 0x0
    6018:	e58d3004 	str	r3, [sp, #4]
    601c:	e58d2008 	str	r2, [sp, #8]
    6020:	e58db024 	str	fp, [sp, #36]
    6024:	e58d800c 	str	r8, [sp, #12]
    6028:	e58d9010 	str	r9, [sp, #16]
    602c:	e58d4014 	str	r4, [sp, #20]
    6030:	e58d5018 	str	r5, [sp, #24]
    6034:	03a03000 	moveq	r3, #0	; 0x0
    6038:	03a04000 	moveq	r4, #0	; 0x0
    603c:	058d301c 	streq	r3, [sp, #28]
    6040:	058d4020 	streq	r4, [sp, #32]
    6044:	0a000008 	beq	606c <pow+0x270>
    6048:	e3a00000 	mov	r0, #0	; 0x0
    604c:	e3a01000 	mov	r1, #0	; 0x0
    6050:	e1a02000 	mov	r2, r0
    6054:	e1a03001 	mov	r3, r1
    6058:	eb000868 	bl	8200 <__aeabi_ddiv>
    605c:	e58d001c 	str	r0, [sp, #28]
    6060:	e58d1020 	str	r1, [sp, #32]
    6064:	e35a0002 	cmp	sl, #2	; 0x2
    6068:	0a000003 	beq	607c <pow+0x280>
    606c:	e28d0004 	add	r0, sp, #4	; 0x4
    6070:	eb000524 	bl	7508 <matherr>
    6074:	e3500000 	cmp	r0, #0	; 0x0
    6078:	1a00006d 	bne	6234 <pow+0x438>
    607c:	eb0005f8 	bl	7864 <__errno>
    6080:	e3a03021 	mov	r3, #33	; 0x21
    6084:	ea000069 	b	6230 <pow+0x434>
    6088:	e3a03003 	mov	r3, #3	; 0x3
    608c:	e35a0000 	cmp	sl, #0	; 0x0
    6090:	e58d3004 	str	r3, [sp, #4]
    6094:	e58d2008 	str	r2, [sp, #8]
    6098:	e58d0024 	str	r0, [sp, #36]
    609c:	e58d800c 	str	r8, [sp, #12]
    60a0:	e58d9010 	str	r9, [sp, #16]
    60a4:	e58d4014 	str	r4, [sp, #20]
    60a8:	e58d5018 	str	r5, [sp, #24]
    60ac:	1a00001b 	bne	6120 <pow+0x324>
    60b0:	e59f61bc 	ldr	r6, [pc, #444]	; 6274 <.text+0x6274>
    60b4:	e1a00008 	mov	r0, r8
    60b8:	e1a01009 	mov	r1, r9
    60bc:	e3a02000 	mov	r2, #0	; 0x0
    60c0:	e3a03000 	mov	r3, #0	; 0x0
    60c4:	e3a0720e 	mov	r7, #-536870912	; 0xe0000000
    60c8:	e58d601c 	str	r6, [sp, #28]
    60cc:	e58d7020 	str	r7, [sp, #32]
    60d0:	eb0008cd 	bl	840c <__ledf2>
    60d4:	e3500000 	cmp	r0, #0	; 0x0
    60d8:	aa00004e 	bge	6218 <pow+0x41c>
    60dc:	e59f2194 	ldr	r2, [pc, #404]	; 6278 <.text+0x6278>
    60e0:	e3a03000 	mov	r3, #0	; 0x0
    60e4:	e1a00004 	mov	r0, r4
    60e8:	e1a01005 	mov	r1, r5
    60ec:	eb0007a8 	bl	7f94 <__aeabi_dmul>
    60f0:	e1a04000 	mov	r4, r0
    60f4:	e1a05001 	mov	r5, r1
    60f8:	eb000504 	bl	7510 <rint>
    60fc:	e1a02004 	mov	r2, r4
    6100:	e1a03005 	mov	r3, r5
    6104:	eb0008c2 	bl	8414 <__cmpdf2>
    6108:	e3500000 	cmp	r0, #0	; 0x0
    610c:	159f2168 	ldrne	r2, [pc, #360]	; 627c <.text+0x627c>
    6110:	13a0320e 	movne	r3, #-536870912	; 0xe0000000
    6114:	158d201c 	strne	r2, [sp, #28]
    6118:	158d3020 	strne	r3, [sp, #32]
    611c:	ea00003d 	b	6218 <pow+0x41c>
    6120:	e59f6158 	ldr	r6, [pc, #344]	; 6280 <.text+0x6280>
    6124:	e1a00008 	mov	r0, r8
    6128:	e1a01009 	mov	r1, r9
    612c:	e3a02000 	mov	r2, #0	; 0x0
    6130:	e3a03000 	mov	r3, #0	; 0x0
    6134:	e3a07000 	mov	r7, #0	; 0x0
    6138:	e58d601c 	str	r6, [sp, #28]
    613c:	e58d7020 	str	r7, [sp, #32]
    6140:	eb0008b1 	bl	840c <__ledf2>
    6144:	e3500000 	cmp	r0, #0	; 0x0
    6148:	aa00000f 	bge	618c <pow+0x390>
    614c:	e59f2124 	ldr	r2, [pc, #292]	; 6278 <.text+0x6278>
    6150:	e3a03000 	mov	r3, #0	; 0x0
    6154:	e1a00004 	mov	r0, r4
    6158:	e1a01005 	mov	r1, r5
    615c:	eb00078c 	bl	7f94 <__aeabi_dmul>
    6160:	e1a04000 	mov	r4, r0
    6164:	e1a05001 	mov	r5, r1
    6168:	eb0004e8 	bl	7510 <rint>
    616c:	e1a02004 	mov	r2, r4
    6170:	e1a03005 	mov	r3, r5
    6174:	eb0008a6 	bl	8414 <__cmpdf2>
    6178:	e3500000 	cmp	r0, #0	; 0x0
    617c:	159f20ec 	ldrne	r2, [pc, #236]	; 6270 <.text+0x6270>
    6180:	13a03000 	movne	r3, #0	; 0x0
    6184:	158d201c 	strne	r2, [sp, #28]
    6188:	158d3020 	strne	r3, [sp, #32]
    618c:	e35a0002 	cmp	sl, #2	; 0x2
    6190:	ea00001f 	b	6214 <pow+0x418>
    6194:	e1a00006 	mov	r0, r6
    6198:	e1a01007 	mov	r1, r7
    619c:	e3a02000 	mov	r2, #0	; 0x0
    61a0:	e3a03000 	mov	r3, #0	; 0x0
    61a4:	eb00089a 	bl	8414 <__cmpdf2>
    61a8:	e3500000 	cmp	r0, #0	; 0x0
    61ac:	1a000028 	bne	6254 <pow+0x458>
    61b0:	e1a00008 	mov	r0, r8
    61b4:	e1a01009 	mov	r1, r9
    61b8:	eb0004c5 	bl	74d4 <finite>
    61bc:	e3500000 	cmp	r0, #0	; 0x0
    61c0:	0a000023 	beq	6254 <pow+0x458>
    61c4:	e1a00004 	mov	r0, r4
    61c8:	e1a01005 	mov	r1, r5
    61cc:	eb0004c0 	bl	74d4 <finite>
    61d0:	e3500000 	cmp	r0, #0	; 0x0
    61d4:	0a00001e 	beq	6254 <pow+0x458>
    61d8:	e3a03004 	mov	r3, #4	; 0x4
    61dc:	e58d3004 	str	r3, [sp, #4]
    61e0:	e59f3084 	ldr	r3, [pc, #132]	; 626c <.text+0x626c>
    61e4:	e58d3008 	str	r3, [sp, #8]
    61e8:	e3a03000 	mov	r3, #0	; 0x0
    61ec:	e58d3024 	str	r3, [sp, #36]
    61f0:	e58d4014 	str	r4, [sp, #20]
    61f4:	e58d5018 	str	r5, [sp, #24]
    61f8:	e3a03000 	mov	r3, #0	; 0x0
    61fc:	e3a04000 	mov	r4, #0	; 0x0
    6200:	e58d800c 	str	r8, [sp, #12]
    6204:	e58d9010 	str	r9, [sp, #16]
    6208:	e58d301c 	str	r3, [sp, #28]
    620c:	e58d4020 	str	r4, [sp, #32]
    6210:	e35a0002 	cmp	sl, #2	; 0x2
    6214:	0a000003 	beq	6228 <pow+0x42c>
    6218:	e28d0004 	add	r0, sp, #4	; 0x4
    621c:	eb0004b9 	bl	7508 <matherr>
    6220:	e3500000 	cmp	r0, #0	; 0x0
    6224:	1a000002 	bne	6234 <pow+0x438>
    6228:	eb00058d 	bl	7864 <__errno>
    622c:	e3a03022 	mov	r3, #34	; 0x22
    6230:	e5803000 	str	r3, [r0]
    6234:	e59d3024 	ldr	r3, [sp, #36]
    6238:	e3530000 	cmp	r3, #0	; 0x0
    623c:	0a000002 	beq	624c <pow+0x450>
    6240:	eb000587 	bl	7864 <__errno>
    6244:	e59d3024 	ldr	r3, [sp, #36]
    6248:	e5803000 	str	r3, [r0]
    624c:	e28d601c 	add	r6, sp, #28	; 0x1c
    6250:	e89600c0 	ldmia	r6, {r6, r7}
    6254:	e1a00006 	mov	r0, r6
    6258:	e1a01007 	mov	r1, r7
    625c:	e28dd028 	add	sp, sp, #40	; 0x28
    6260:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6264:	00008744 	andeq	r8, r0, r4, asr #14
    6268:	3ff00000 	svccc	0x00f00000	; IMB
    626c:	00008f4c 	andeq	r8, r0, ip, asr #30
    6270:	fff00000 	undefined instruction 0xfff00000	; IMB
    6274:	47efffff 	undefined
    6278:	3fe00000 	svccc	0x00e00000
    627c:	c7efffff 	undefined
    6280:	7ff00000 	svcvc	0x00f00000	; IMB

00006284 <__ieee754_pow>:
    6284:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6288:	e3c2a102 	bic	sl, r2, #-2147483648	; 0x80000000
    628c:	e1a06001 	mov	r6, r1
    6290:	e24dd07c 	sub	sp, sp, #124	; 0x7c
    6294:	e1a05000 	mov	r5, r0
    6298:	e19a0003 	orrs	r0, sl, r3
    629c:	e1a01003 	mov	r1, r3
    62a0:	e58d203c 	str	r2, [sp, #60]
    62a4:	e58d3040 	str	r3, [sp, #64]
    62a8:	e1a07002 	mov	r7, r2
    62ac:	e1a08003 	mov	r8, r3
    62b0:	e1a09002 	mov	r9, r2
    62b4:	e1a04006 	mov	r4, r6
    62b8:	e58d6070 	str	r6, [sp, #112]
    62bc:	e1a0c002 	mov	ip, r2
    62c0:	059f1ecc 	ldreq	r1, [pc, #3788]	; 7194 <.text+0x7194>
    62c4:	0a0000c2 	beq	65d4 <__ieee754_pow+0x350>
    62c8:	e59f2ec8 	ldr	r2, [pc, #3784]	; 7198 <.text+0x7198>
    62cc:	e3c54102 	bic	r4, r5, #-2147483648	; 0x80000000
    62d0:	e1540002 	cmp	r4, r2
    62d4:	e1a0b005 	mov	fp, r5
    62d8:	ca000011 	bgt	6324 <__ieee754_pow+0xa0>
    62dc:	e59d0070 	ldr	r0, [sp, #112]
    62e0:	13a03000 	movne	r3, #0	; 0x0
    62e4:	03a03001 	moveq	r3, #1	; 0x1
    62e8:	e58d304c 	str	r3, [sp, #76]
    62ec:	e3500000 	cmp	r0, #0	; 0x0
    62f0:	03a03000 	moveq	r3, #0	; 0x0
    62f4:	12033001 	andne	r3, r3, #1	; 0x1
    62f8:	e3530000 	cmp	r3, #0	; 0x0
    62fc:	1a000008 	bne	6324 <__ieee754_pow+0xa0>
    6300:	e15a0002 	cmp	sl, r2
    6304:	ca000006 	bgt	6324 <__ieee754_pow+0xa0>
    6308:	13a00000 	movne	r0, #0	; 0x0
    630c:	03a00001 	moveq	r0, #1	; 0x1
    6310:	e3510000 	cmp	r1, #0	; 0x0
    6314:	03a02000 	moveq	r2, #0	; 0x0
    6318:	12002001 	andne	r2, r0, #1	; 0x1
    631c:	e3520000 	cmp	r2, #0	; 0x0
    6320:	0a000005 	beq	633c <__ieee754_pow+0xb8>
    6324:	e28d003c 	add	r0, sp, #60	; 0x3c
    6328:	e8900003 	ldmia	r0, {r0, r1}
    632c:	e1a02005 	mov	r2, r5
    6330:	e1a03006 	mov	r3, r6
    6334:	eb000619 	bl	7ba0 <__adddf3>
    6338:	ea00038c 	b	7170 <__ieee754_pow+0xeec>
    633c:	e3550000 	cmp	r5, #0	; 0x0
    6340:	aa00001e 	bge	63c0 <__ieee754_pow+0x13c>
    6344:	e59f3e50 	ldr	r3, [pc, #3664]	; 719c <.text+0x719c>
    6348:	e15a0003 	cmp	sl, r3
    634c:	c3a02002 	movgt	r2, #2	; 0x2
    6350:	c58d206c 	strgt	r2, [sp, #108]
    6354:	ca00001b 	bgt	63c8 <__ieee754_pow+0x144>
    6358:	e59f3e40 	ldr	r3, [pc, #3648]	; 71a0 <.text+0x71a0>
    635c:	e15a0003 	cmp	sl, r3
    6360:	da000016 	ble	63c0 <__ieee754_pow+0x13c>
    6364:	e1a03a4a 	mov	r3, sl, asr #20
    6368:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    636c:	e2433003 	sub	r3, r3, #3	; 0x3
    6370:	e3530014 	cmp	r3, #20	; 0x14
    6374:	da000006 	ble	6394 <__ieee754_pow+0x110>
    6378:	e2633034 	rsb	r3, r3, #52	; 0x34
    637c:	e1a02331 	mov	r2, r1, lsr r3
    6380:	e1510312 	cmp	r1, r2, lsl r3
    6384:	02023001 	andeq	r3, r2, #1	; 0x1
    6388:	02633002 	rsbeq	r3, r3, #2	; 0x2
    638c:	0a00000c 	beq	63c4 <__ieee754_pow+0x140>
    6390:	ea00000a 	b	63c0 <__ieee754_pow+0x13c>
    6394:	e3510000 	cmp	r1, #0	; 0x0
    6398:	158d206c 	strne	r2, [sp, #108]
    639c:	1a00003e 	bne	649c <__ieee754_pow+0x218>
    63a0:	e2633014 	rsb	r3, r3, #20	; 0x14
    63a4:	e1a0235a 	mov	r2, sl, asr r3
    63a8:	e15a0312 	cmp	sl, r2, lsl r3
    63ac:	02023001 	andeq	r3, r2, #1	; 0x1
    63b0:	02633002 	rsbeq	r3, r3, #2	; 0x2
    63b4:	058d306c 	streq	r3, [sp, #108]
    63b8:	0a000004 	beq	63d0 <__ieee754_pow+0x14c>
    63bc:	ea00036e 	b	717c <__ieee754_pow+0xef8>
    63c0:	e3a03000 	mov	r3, #0	; 0x0
    63c4:	e58d306c 	str	r3, [sp, #108]
    63c8:	e3510000 	cmp	r1, #0	; 0x0
    63cc:	1a000032 	bne	649c <__ieee754_pow+0x218>
    63d0:	e3500000 	cmp	r0, #0	; 0x0
    63d4:	0a000016 	beq	6434 <__ieee754_pow+0x1b0>
    63d8:	e2843103 	add	r3, r4, #-1073741824	; 0xc0000000
    63dc:	e59dc070 	ldr	ip, [sp, #112]
    63e0:	e2833601 	add	r3, r3, #1048576	; 0x100000
    63e4:	e193c00c 	orrs	ip, r3, ip
    63e8:	1a000005 	bne	6404 <__ieee754_pow+0x180>
    63ec:	e28d003c 	add	r0, sp, #60	; 0x3c
    63f0:	e8900003 	ldmia	r0, {r0, r1}
    63f4:	e1a02000 	mov	r2, r0
    63f8:	e1a03001 	mov	r3, r1
    63fc:	eb0005e6 	bl	7b9c <__aeabi_dsub>
    6400:	ea00035a 	b	7170 <__ieee754_pow+0xeec>
    6404:	e59f3d94 	ldr	r3, [pc, #3476]	; 71a0 <.text+0x71a0>
    6408:	e1540003 	cmp	r4, r3
    640c:	da000002 	ble	641c <__ieee754_pow+0x198>
    6410:	e3590000 	cmp	r9, #0	; 0x0
    6414:	aa00035a 	bge	7184 <__ieee754_pow+0xf00>
    6418:	ea000352 	b	7168 <__ieee754_pow+0xee4>
    641c:	e3590000 	cmp	r9, #0	; 0x0
    6420:	b59d003c 	ldrlt	r0, [sp, #60]
    6424:	b59d1040 	ldrlt	r1, [sp, #64]
    6428:	b2803102 	addlt	r3, r0, #-2147483648	; 0x80000000
    642c:	ba000039 	blt	6518 <__ieee754_pow+0x294>
    6430:	ea00034c 	b	7168 <__ieee754_pow+0xee4>
    6434:	e59f3d58 	ldr	r3, [pc, #3416]	; 7194 <.text+0x7194>
    6438:	e15a0003 	cmp	sl, r3
    643c:	1a000008 	bne	6464 <__ieee754_pow+0x1e0>
    6440:	e3590000 	cmp	r9, #0	; 0x0
    6444:	a58d503c 	strge	r5, [sp, #60]
    6448:	a58d6040 	strge	r6, [sp, #64]
    644c:	aa00034c 	bge	7184 <__ieee754_pow+0xf00>
    6450:	e59f0d3c 	ldr	r0, [pc, #3388]	; 7194 <.text+0x7194>
    6454:	e1a02005 	mov	r2, r5
    6458:	e1a03006 	mov	r3, r6
    645c:	e3a01000 	mov	r1, #0	; 0x0
    6460:	ea00003b 	b	6554 <__ieee754_pow+0x2d0>
    6464:	e35c0101 	cmp	ip, #1073741824	; 0x40000000
    6468:	01a00005 	moveq	r0, r5
    646c:	01a01006 	moveq	r1, r6
    6470:	0a00004b 	beq	65a4 <__ieee754_pow+0x320>
    6474:	e59f3d28 	ldr	r3, [pc, #3368]	; 71a4 <.text+0x71a4>
    6478:	e15c0003 	cmp	ip, r3
    647c:	1a000006 	bne	649c <__ieee754_pow+0x218>
    6480:	e35b0000 	cmp	fp, #0	; 0x0
    6484:	ba000004 	blt	649c <__ieee754_pow+0x218>
    6488:	e1a00005 	mov	r0, r5
    648c:	e1a01006 	mov	r1, r6
    6490:	e28dd07c 	add	sp, sp, #124	; 0x7c
    6494:	e8bd4ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6498:	ea00037b 	b	728c <__ieee754_sqrt>
    649c:	e1a00005 	mov	r0, r5
    64a0:	e1a01006 	mov	r1, r6
    64a4:	eb000404 	bl	74bc <fabs>
    64a8:	e59d2070 	ldr	r2, [sp, #112]
    64ac:	e3520000 	cmp	r2, #0	; 0x0
    64b0:	1a00001a 	bne	6520 <__ieee754_pow+0x29c>
    64b4:	e59d304c 	ldr	r3, [sp, #76]
    64b8:	e3540000 	cmp	r4, #0	; 0x0
    64bc:	03833001 	orreq	r3, r3, #1	; 0x1
    64c0:	e3530000 	cmp	r3, #0	; 0x0
    64c4:	1a000002 	bne	64d4 <__ieee754_pow+0x250>
    64c8:	e59f3cc4 	ldr	r3, [pc, #3268]	; 7194 <.text+0x7194>
    64cc:	e1540003 	cmp	r4, r3
    64d0:	1a000012 	bne	6520 <__ieee754_pow+0x29c>
    64d4:	e3590000 	cmp	r9, #0	; 0x0
    64d8:	b1a02000 	movlt	r2, r0
    64dc:	b1a03001 	movlt	r3, r1
    64e0:	b59f0cac 	ldrlt	r0, [pc, #3244]	; 7194 <.text+0x7194>
    64e4:	b3a01000 	movlt	r1, #0	; 0x0
    64e8:	bb000744 	bllt	8200 <__aeabi_ddiv>
    64ec:	e35b0000 	cmp	fp, #0	; 0x0
    64f0:	aa00031e 	bge	7170 <__ieee754_pow+0xeec>
    64f4:	e2843103 	add	r3, r4, #-1073741824	; 0xc0000000
    64f8:	e59d406c 	ldr	r4, [sp, #108]
    64fc:	e2833601 	add	r3, r3, #1048576	; 0x100000
    6500:	e1934004 	orrs	r4, r3, r4
    6504:	0a00000d 	beq	6540 <__ieee754_pow+0x2bc>
    6508:	e59dc06c 	ldr	ip, [sp, #108]
    650c:	e35c0001 	cmp	ip, #1	; 0x1
    6510:	1a000316 	bne	7170 <__ieee754_pow+0xeec>
    6514:	e2803102 	add	r3, r0, #-2147483648	; 0x80000000
    6518:	e1a04001 	mov	r4, r1
    651c:	ea00001b 	b	6590 <__ieee754_pow+0x30c>
    6520:	e1a03fab 	mov	r3, fp, lsr #31
    6524:	e59d206c 	ldr	r2, [sp, #108]
    6528:	e2433001 	sub	r3, r3, #1	; 0x1
    652c:	e58d3050 	str	r3, [sp, #80]
    6530:	e1933002 	orrs	r3, r3, r2
    6534:	1a000008 	bne	655c <__ieee754_pow+0x2d8>
    6538:	e1a00005 	mov	r0, r5
    653c:	e1a01006 	mov	r1, r6
    6540:	e1a02000 	mov	r2, r0
    6544:	e1a03001 	mov	r3, r1
    6548:	eb000593 	bl	7b9c <__aeabi_dsub>
    654c:	e1a02000 	mov	r2, r0
    6550:	e1a03001 	mov	r3, r1
    6554:	eb000729 	bl	8200 <__aeabi_ddiv>
    6558:	ea000304 	b	7170 <__ieee754_pow+0xeec>
    655c:	e59f3c44 	ldr	r3, [pc, #3140]	; 71a8 <.text+0x71a8>
    6560:	e15a0003 	cmp	sl, r3
    6564:	da000074 	ble	673c <__ieee754_pow+0x4b8>
    6568:	e2833621 	add	r3, r3, #34603008	; 0x2100000
    656c:	e15a0003 	cmp	sl, r3
    6570:	da000011 	ble	65bc <__ieee754_pow+0x338>
    6574:	e2433341 	sub	r3, r3, #67108865	; 0x4000001
    6578:	e1540003 	cmp	r4, r3
    657c:	ca00000b 	bgt	65b0 <__ieee754_pow+0x32c>
    6580:	e3590000 	cmp	r9, #0	; 0x0
    6584:	ba000004 	blt	659c <__ieee754_pow+0x318>
    6588:	e3a03000 	mov	r3, #0	; 0x0
    658c:	e3a04000 	mov	r4, #0	; 0x0
    6590:	e58d303c 	str	r3, [sp, #60]
    6594:	e58d4040 	str	r4, [sp, #64]
    6598:	ea0002f9 	b	7184 <__ieee754_pow+0xf00>
    659c:	e59f0c08 	ldr	r0, [pc, #3080]	; 71ac <.text+0x71ac>
    65a0:	e59f1c08 	ldr	r1, [pc, #3080]	; 71b0 <.text+0x71b0>
    65a4:	e1a02000 	mov	r2, r0
    65a8:	e1a03001 	mov	r3, r1
    65ac:	ea0002eb 	b	7160 <__ieee754_pow+0xedc>
    65b0:	e3590000 	cmp	r9, #0	; 0x0
    65b4:	da0002eb 	ble	7168 <__ieee754_pow+0xee4>
    65b8:	eafffff7 	b	659c <__ieee754_pow+0x318>
    65bc:	e59f3bf0 	ldr	r3, [pc, #3056]	; 71b4 <.text+0x71b4>
    65c0:	e1540003 	cmp	r4, r3
    65c4:	ca000006 	bgt	65e4 <__ieee754_pow+0x360>
    65c8:	e3590000 	cmp	r9, #0	; 0x0
    65cc:	bafffff2 	blt	659c <__ieee754_pow+0x318>
    65d0:	e3a01000 	mov	r1, #0	; 0x0
    65d4:	e3a02000 	mov	r2, #0	; 0x0
    65d8:	e58d103c 	str	r1, [sp, #60]
    65dc:	e58d2040 	str	r2, [sp, #64]
    65e0:	ea0002e7 	b	7184 <__ieee754_pow+0xf00>
    65e4:	e59f3ba8 	ldr	r3, [pc, #2984]	; 7194 <.text+0x7194>
    65e8:	e1540003 	cmp	r4, r3
    65ec:	da000006 	ble	660c <__ieee754_pow+0x388>
    65f0:	e3590000 	cmp	r9, #0	; 0x0
    65f4:	caffffe8 	bgt	659c <__ieee754_pow+0x318>
    65f8:	e3a02000 	mov	r2, #0	; 0x0
    65fc:	e3a03000 	mov	r3, #0	; 0x0
    6600:	e58d203c 	str	r2, [sp, #60]
    6604:	e58d3040 	str	r3, [sp, #64]
    6608:	ea0002dd 	b	7184 <__ieee754_pow+0xf00>
    660c:	e59f2b80 	ldr	r2, [pc, #2944]	; 7194 <.text+0x7194>
    6610:	e3a03000 	mov	r3, #0	; 0x0
    6614:	eb000560 	bl	7b9c <__aeabi_dsub>
    6618:	e59f2b98 	ldr	r2, [pc, #2968]	; 71b8 <.text+0x71b8>
    661c:	e3a03206 	mov	r3, #1610612736	; 0x60000000
    6620:	e1a04000 	mov	r4, r0
    6624:	e1a05001 	mov	r5, r1
    6628:	eb000659 	bl	7f94 <__aeabi_dmul>
    662c:	e59f2b88 	ldr	r2, [pc, #2952]	; 71bc <.text+0x71bc>
    6630:	e1a0a000 	mov	sl, r0
    6634:	e1a0b001 	mov	fp, r1
    6638:	e1a00004 	mov	r0, r4
    663c:	e1a01005 	mov	r1, r5
    6640:	e59f3b78 	ldr	r3, [pc, #2936]	; 71c0 <.text+0x71c0>
    6644:	eb000652 	bl	7f94 <__aeabi_dmul>
    6648:	e1a02004 	mov	r2, r4
    664c:	e1a03005 	mov	r3, r5
    6650:	e1a08000 	mov	r8, r0
    6654:	e1a09001 	mov	r9, r1
    6658:	e1a00004 	mov	r0, r4
    665c:	e1a01005 	mov	r1, r5
    6660:	eb00064b 	bl	7f94 <__aeabi_dmul>
    6664:	e59f2b58 	ldr	r2, [pc, #2904]	; 71c4 <.text+0x71c4>
    6668:	e1a06000 	mov	r6, r0
    666c:	e1a07001 	mov	r7, r1
    6670:	e1a00004 	mov	r0, r4
    6674:	e1a01005 	mov	r1, r5
    6678:	e3a03000 	mov	r3, #0	; 0x0
    667c:	eb000644 	bl	7f94 <__aeabi_dmul>
    6680:	e59f2b40 	ldr	r2, [pc, #2880]	; 71c8 <.text+0x71c8>
    6684:	e59f3b40 	ldr	r3, [pc, #2880]	; 71cc <.text+0x71cc>
    6688:	eb000544 	bl	7ba0 <__adddf3>
    668c:	e1a02000 	mov	r2, r0
    6690:	e1a03001 	mov	r3, r1
    6694:	e1a00004 	mov	r0, r4
    6698:	e1a01005 	mov	r1, r5
    669c:	eb00063c 	bl	7f94 <__aeabi_dmul>
    66a0:	e1a02000 	mov	r2, r0
    66a4:	e1a03001 	mov	r3, r1
    66a8:	e59f0af4 	ldr	r0, [pc, #2804]	; 71a4 <.text+0x71a4>
    66ac:	e3a01000 	mov	r1, #0	; 0x0
    66b0:	eb000539 	bl	7b9c <__aeabi_dsub>
    66b4:	e1a02000 	mov	r2, r0
    66b8:	e1a03001 	mov	r3, r1
    66bc:	e1a00006 	mov	r0, r6
    66c0:	e1a01007 	mov	r1, r7
    66c4:	eb000632 	bl	7f94 <__aeabi_dmul>
    66c8:	e59f2b00 	ldr	r2, [pc, #2816]	; 71d0 <.text+0x71d0>
    66cc:	e59f3b00 	ldr	r3, [pc, #2816]	; 71d4 <.text+0x71d4>
    66d0:	eb00062f 	bl	7f94 <__aeabi_dmul>
    66d4:	e1a02000 	mov	r2, r0
    66d8:	e1a03001 	mov	r3, r1
    66dc:	e1a00008 	mov	r0, r8
    66e0:	e1a01009 	mov	r1, r9
    66e4:	eb00052d 	bl	7ba0 <__adddf3>
    66e8:	e1a05000 	mov	r5, r0
    66ec:	e1a06001 	mov	r6, r1
    66f0:	e1a02005 	mov	r2, r5
    66f4:	e1a03006 	mov	r3, r6
    66f8:	e1a0000a 	mov	r0, sl
    66fc:	e1a0100b 	mov	r1, fp
    6700:	eb000526 	bl	7ba0 <__adddf3>
    6704:	e3a04000 	mov	r4, #0	; 0x0
    6708:	e1a03000 	mov	r3, r0
    670c:	e58d305c 	str	r3, [sp, #92]
    6710:	e58d4060 	str	r4, [sp, #96]
    6714:	e1a0200a 	mov	r2, sl
    6718:	e1a0300b 	mov	r3, fp
    671c:	e28d005c 	add	r0, sp, #92	; 0x5c
    6720:	e8900003 	ldmia	r0, {r0, r1}
    6724:	eb00051c 	bl	7b9c <__aeabi_dsub>
    6728:	e1a02000 	mov	r2, r0
    672c:	e1a03001 	mov	r3, r1
    6730:	e1a00005 	mov	r0, r5
    6734:	e1a01006 	mov	r1, r6
    6738:	ea000149 	b	6c64 <__ieee754_pow+0x9e0>
    673c:	e3540601 	cmp	r4, #1048576	; 0x100000
    6740:	a3a03000 	movge	r3, #0	; 0x0
    6744:	aa000004 	bge	675c <__ieee754_pow+0x4d8>
    6748:	e3a03000 	mov	r3, #0	; 0x0
    674c:	e59f2a84 	ldr	r2, [pc, #2692]	; 71d8 <.text+0x71d8>
    6750:	eb00060f 	bl	7f94 <__aeabi_dmul>
    6754:	e3e03034 	mvn	r3, #52	; 0x34
    6758:	e1a04000 	mov	r4, r0
    675c:	e0832a44 	add	r2, r3, r4, asr #20
    6760:	e3c4c4ff 	bic	ip, r4, #-16777216	; 0xff000000
    6764:	e59f3a70 	ldr	r3, [pc, #2672]	; 71dc <.text+0x71dc>
    6768:	e3ccc60f 	bic	ip, ip, #15728640	; 0xf00000
    676c:	e2422fff 	sub	r2, r2, #1020	; 0x3fc
    6770:	e38c45ff 	orr	r4, ip, #1069547520	; 0x3fc00000
    6774:	e2422003 	sub	r2, r2, #3	; 0x3
    6778:	e15c0003 	cmp	ip, r3
    677c:	e58d2074 	str	r2, [sp, #116]
    6780:	e3844603 	orr	r4, r4, #3145728	; 0x300000
    6784:	da000007 	ble	67a8 <__ieee754_pow+0x524>
    6788:	e59f3a50 	ldr	r3, [pc, #2640]	; 71e0 <.text+0x71e0>
    678c:	e15c0003 	cmp	ip, r3
    6790:	d3a05001 	movle	r5, #1	; 0x1
    6794:	da000004 	ble	67ac <__ieee754_pow+0x528>
    6798:	e59d3074 	ldr	r3, [sp, #116]
    679c:	e2833001 	add	r3, r3, #1	; 0x1
    67a0:	e58d3074 	str	r3, [sp, #116]
    67a4:	e2444601 	sub	r4, r4, #1048576	; 0x100000
    67a8:	e3a05000 	mov	r5, #0	; 0x0
    67ac:	e59f3a30 	ldr	r3, [pc, #2608]	; 71e4 <.text+0x71e4>
    67b0:	e1a0c185 	mov	ip, r5, lsl #3
    67b4:	e08c3003 	add	r3, ip, r3
    67b8:	e89300c0 	ldmia	r3, {r6, r7}
    67bc:	e1a02001 	mov	r2, r1
    67c0:	e1a09002 	mov	r9, r2
    67c4:	e1a03007 	mov	r3, r7
    67c8:	e1a00004 	mov	r0, r4
    67cc:	e1a01002 	mov	r1, r2
    67d0:	e1a02006 	mov	r2, r6
    67d4:	e58dc038 	str	ip, [sp, #56]
    67d8:	eb0004ef 	bl	7b9c <__aeabi_dsub>
    67dc:	e1a02006 	mov	r2, r6
    67e0:	e58d0030 	str	r0, [sp, #48]
    67e4:	e58d1034 	str	r1, [sp, #52]
    67e8:	e1a03007 	mov	r3, r7
    67ec:	e1a00004 	mov	r0, r4
    67f0:	e1a01009 	mov	r1, r9
    67f4:	eb0004e9 	bl	7ba0 <__adddf3>
    67f8:	e1a02000 	mov	r2, r0
    67fc:	e1a03001 	mov	r3, r1
    6800:	e59f098c 	ldr	r0, [pc, #2444]	; 7194 <.text+0x7194>
    6804:	e3a01000 	mov	r1, #0	; 0x0
    6808:	eb00067c 	bl	8200 <__aeabi_ddiv>
    680c:	e58d0028 	str	r0, [sp, #40]
    6810:	e58d102c 	str	r1, [sp, #44]
    6814:	e28d2028 	add	r2, sp, #40	; 0x28
    6818:	e892000c 	ldmia	r2, {r2, r3}
    681c:	e28d0030 	add	r0, sp, #48	; 0x30
    6820:	e8900003 	ldmia	r0, {r0, r1}
    6824:	eb0005da 	bl	7f94 <__aeabi_dmul>
    6828:	e58d0020 	str	r0, [sp, #32]
    682c:	e58d1024 	str	r1, [sp, #36]
    6830:	e1a08004 	mov	r8, r4
    6834:	e1a010c4 	mov	r1, r4, asr #1
    6838:	e28d3020 	add	r3, sp, #32	; 0x20
    683c:	e8930018 	ldmia	r3, {r3, r4}
    6840:	e3a0c000 	mov	ip, #0	; 0x0
    6844:	e58d3044 	str	r3, [sp, #68]
    6848:	e58d4048 	str	r4, [sp, #72]
    684c:	e1a02905 	mov	r2, r5, lsl #18
    6850:	e58dc048 	str	ip, [sp, #72]
    6854:	e28da044 	add	sl, sp, #68	; 0x44
    6858:	e89a0c00 	ldmia	sl, {sl, fp}
    685c:	e3811202 	orr	r1, r1, #536870912	; 0x20000000
    6860:	e2822702 	add	r2, r2, #524288	; 0x80000
    6864:	e3a04000 	mov	r4, #0	; 0x0
    6868:	e0813002 	add	r3, r1, r2
    686c:	e1a05004 	mov	r5, r4
    6870:	e1a02003 	mov	r2, r3
    6874:	e1a04003 	mov	r4, r3
    6878:	e1a0000a 	mov	r0, sl
    687c:	e1a03005 	mov	r3, r5
    6880:	e1a0100b 	mov	r1, fp
    6884:	eb0005c2 	bl	7f94 <__aeabi_dmul>
    6888:	e1a02000 	mov	r2, r0
    688c:	e1a03001 	mov	r3, r1
    6890:	e28d0030 	add	r0, sp, #48	; 0x30
    6894:	e8900003 	ldmia	r0, {r0, r1}
    6898:	eb0004bf 	bl	7b9c <__aeabi_dsub>
    689c:	e1a02006 	mov	r2, r6
    68a0:	e58d0018 	str	r0, [sp, #24]
    68a4:	e58d101c 	str	r1, [sp, #28]
    68a8:	e1a03007 	mov	r3, r7
    68ac:	e1a00004 	mov	r0, r4
    68b0:	e1a01005 	mov	r1, r5
    68b4:	eb0004b8 	bl	7b9c <__aeabi_dsub>
    68b8:	e1a02000 	mov	r2, r0
    68bc:	e1a03001 	mov	r3, r1
    68c0:	e1a00008 	mov	r0, r8
    68c4:	e1a01009 	mov	r1, r9
    68c8:	eb0004b3 	bl	7b9c <__aeabi_dsub>
    68cc:	e1a02000 	mov	r2, r0
    68d0:	e1a03001 	mov	r3, r1
    68d4:	e1a0000a 	mov	r0, sl
    68d8:	e1a0100b 	mov	r1, fp
    68dc:	eb0005ac 	bl	7f94 <__aeabi_dmul>
    68e0:	e1a02000 	mov	r2, r0
    68e4:	e1a03001 	mov	r3, r1
    68e8:	e28d0018 	add	r0, sp, #24	; 0x18
    68ec:	e8900003 	ldmia	r0, {r0, r1}
    68f0:	eb0004a9 	bl	7b9c <__aeabi_dsub>
    68f4:	e1a02000 	mov	r2, r0
    68f8:	e1a03001 	mov	r3, r1
    68fc:	e28d0028 	add	r0, sp, #40	; 0x28
    6900:	e8900003 	ldmia	r0, {r0, r1}
    6904:	eb0005a2 	bl	7f94 <__aeabi_dmul>
    6908:	e58d0010 	str	r0, [sp, #16]
    690c:	e58d1014 	str	r1, [sp, #20]
    6910:	e28d0020 	add	r0, sp, #32	; 0x20
    6914:	e8900003 	ldmia	r0, {r0, r1}
    6918:	e1a02000 	mov	r2, r0
    691c:	e1a03001 	mov	r3, r1
    6920:	eb00059b 	bl	7f94 <__aeabi_dmul>
    6924:	e1a04000 	mov	r4, r0
    6928:	e1a05001 	mov	r5, r1
    692c:	e1a02004 	mov	r2, r4
    6930:	e1a03005 	mov	r3, r5
    6934:	eb000596 	bl	7f94 <__aeabi_dmul>
    6938:	e59f28a8 	ldr	r2, [pc, #2216]	; 71e8 <.text+0x71e8>
    693c:	e1a06000 	mov	r6, r0
    6940:	e1a07001 	mov	r7, r1
    6944:	e1a00004 	mov	r0, r4
    6948:	e1a01005 	mov	r1, r5
    694c:	e59f3898 	ldr	r3, [pc, #2200]	; 71ec <.text+0x71ec>
    6950:	eb00058f 	bl	7f94 <__aeabi_dmul>
    6954:	e59f2894 	ldr	r2, [pc, #2196]	; 71f0 <.text+0x71f0>
    6958:	e59f3894 	ldr	r3, [pc, #2196]	; 71f4 <.text+0x71f4>
    695c:	eb00048f 	bl	7ba0 <__adddf3>
    6960:	e1a02000 	mov	r2, r0
    6964:	e1a03001 	mov	r3, r1
    6968:	e1a00004 	mov	r0, r4
    696c:	e1a01005 	mov	r1, r5
    6970:	eb000587 	bl	7f94 <__aeabi_dmul>
    6974:	e59f287c 	ldr	r2, [pc, #2172]	; 71f8 <.text+0x71f8>
    6978:	e59f387c 	ldr	r3, [pc, #2172]	; 71fc <.text+0x71fc>
    697c:	eb000487 	bl	7ba0 <__adddf3>
    6980:	e1a02000 	mov	r2, r0
    6984:	e1a03001 	mov	r3, r1
    6988:	e1a00004 	mov	r0, r4
    698c:	e1a01005 	mov	r1, r5
    6990:	eb00057f 	bl	7f94 <__aeabi_dmul>
    6994:	e59f282c 	ldr	r2, [pc, #2092]	; 71c8 <.text+0x71c8>
    6998:	e59f3860 	ldr	r3, [pc, #2144]	; 7200 <.text+0x7200>
    699c:	eb00047f 	bl	7ba0 <__adddf3>
    69a0:	e1a02000 	mov	r2, r0
    69a4:	e1a03001 	mov	r3, r1
    69a8:	e1a00004 	mov	r0, r4
    69ac:	e1a01005 	mov	r1, r5
    69b0:	eb000577 	bl	7f94 <__aeabi_dmul>
    69b4:	e59f2848 	ldr	r2, [pc, #2120]	; 7204 <.text+0x7204>
    69b8:	e59f3848 	ldr	r3, [pc, #2120]	; 7208 <.text+0x7208>
    69bc:	eb000477 	bl	7ba0 <__adddf3>
    69c0:	e1a02000 	mov	r2, r0
    69c4:	e1a03001 	mov	r3, r1
    69c8:	e1a00004 	mov	r0, r4
    69cc:	e1a01005 	mov	r1, r5
    69d0:	eb00056f 	bl	7f94 <__aeabi_dmul>
    69d4:	e59f2830 	ldr	r2, [pc, #2096]	; 720c <.text+0x720c>
    69d8:	e59f3830 	ldr	r3, [pc, #2096]	; 7210 <.text+0x7210>
    69dc:	eb00046f 	bl	7ba0 <__adddf3>
    69e0:	e1a02000 	mov	r2, r0
    69e4:	e1a03001 	mov	r3, r1
    69e8:	e1a00006 	mov	r0, r6
    69ec:	e1a01007 	mov	r1, r7
    69f0:	eb000567 	bl	7f94 <__aeabi_dmul>
    69f4:	e28d2020 	add	r2, sp, #32	; 0x20
    69f8:	e892000c 	ldmia	r2, {r2, r3}
    69fc:	e1a04000 	mov	r4, r0
    6a00:	e1a05001 	mov	r5, r1
    6a04:	e1a0000a 	mov	r0, sl
    6a08:	e1a0100b 	mov	r1, fp
    6a0c:	eb000463 	bl	7ba0 <__adddf3>
    6a10:	e1a02000 	mov	r2, r0
    6a14:	e1a03001 	mov	r3, r1
    6a18:	e28d0010 	add	r0, sp, #16	; 0x10
    6a1c:	e8900003 	ldmia	r0, {r0, r1}
    6a20:	eb00055b 	bl	7f94 <__aeabi_dmul>
    6a24:	e1a02000 	mov	r2, r0
    6a28:	e1a03001 	mov	r3, r1
    6a2c:	e1a00004 	mov	r0, r4
    6a30:	e1a01005 	mov	r1, r5
    6a34:	eb000459 	bl	7ba0 <__adddf3>
    6a38:	e1a0200a 	mov	r2, sl
    6a3c:	e58d0008 	str	r0, [sp, #8]
    6a40:	e58d100c 	str	r1, [sp, #12]
    6a44:	e1a0300b 	mov	r3, fp
    6a48:	e1a0000a 	mov	r0, sl
    6a4c:	e1a0100b 	mov	r1, fp
    6a50:	eb00054f 	bl	7f94 <__aeabi_dmul>
    6a54:	e59f27b8 	ldr	r2, [pc, #1976]	; 7214 <.text+0x7214>
    6a58:	e3a03000 	mov	r3, #0	; 0x0
    6a5c:	e1a08000 	mov	r8, r0
    6a60:	e1a09001 	mov	r9, r1
    6a64:	eb00044d 	bl	7ba0 <__adddf3>
    6a68:	e28d2008 	add	r2, sp, #8	; 0x8
    6a6c:	e892000c 	ldmia	r2, {r2, r3}
    6a70:	eb00044a 	bl	7ba0 <__adddf3>
    6a74:	e1a03000 	mov	r3, r0
    6a78:	e59d0048 	ldr	r0, [sp, #72]
    6a7c:	e1a05000 	mov	r5, r0
    6a80:	e1a04003 	mov	r4, r3
    6a84:	e1a02003 	mov	r2, r3
    6a88:	e1a0000a 	mov	r0, sl
    6a8c:	e1a03005 	mov	r3, r5
    6a90:	e1a0100b 	mov	r1, fp
    6a94:	eb00053e 	bl	7f94 <__aeabi_dmul>
    6a98:	e1a02004 	mov	r2, r4
    6a9c:	e1a0a000 	mov	sl, r0
    6aa0:	e1a0b001 	mov	fp, r1
    6aa4:	e1a03005 	mov	r3, r5
    6aa8:	e28d0010 	add	r0, sp, #16	; 0x10
    6aac:	e8900003 	ldmia	r0, {r0, r1}
    6ab0:	eb000537 	bl	7f94 <__aeabi_dmul>
    6ab4:	e59f2758 	ldr	r2, [pc, #1880]	; 7214 <.text+0x7214>
    6ab8:	e1a06000 	mov	r6, r0
    6abc:	e1a07001 	mov	r7, r1
    6ac0:	e1a00004 	mov	r0, r4
    6ac4:	e1a01005 	mov	r1, r5
    6ac8:	e3a03000 	mov	r3, #0	; 0x0
    6acc:	eb000432 	bl	7b9c <__aeabi_dsub>
    6ad0:	e1a02008 	mov	r2, r8
    6ad4:	e1a03009 	mov	r3, r9
    6ad8:	eb00042f 	bl	7b9c <__aeabi_dsub>
    6adc:	e1a02000 	mov	r2, r0
    6ae0:	e1a03001 	mov	r3, r1
    6ae4:	e28d0008 	add	r0, sp, #8	; 0x8
    6ae8:	e8900003 	ldmia	r0, {r0, r1}
    6aec:	eb00042a 	bl	7b9c <__aeabi_dsub>
    6af0:	e28d2020 	add	r2, sp, #32	; 0x20
    6af4:	e892000c 	ldmia	r2, {r2, r3}
    6af8:	eb000525 	bl	7f94 <__aeabi_dmul>
    6afc:	e1a02000 	mov	r2, r0
    6b00:	e1a03001 	mov	r3, r1
    6b04:	e1a00006 	mov	r0, r6
    6b08:	e1a01007 	mov	r1, r7
    6b0c:	eb000423 	bl	7ba0 <__adddf3>
    6b10:	e1a08000 	mov	r8, r0
    6b14:	e1a09001 	mov	r9, r1
    6b18:	e1a02008 	mov	r2, r8
    6b1c:	e1a03009 	mov	r3, r9
    6b20:	e1a0000a 	mov	r0, sl
    6b24:	e1a0100b 	mov	r1, fp
    6b28:	eb00041c 	bl	7ba0 <__adddf3>
    6b2c:	e1a03000 	mov	r3, r0
    6b30:	e1a04003 	mov	r4, r3
    6b34:	e59d1048 	ldr	r1, [sp, #72]
    6b38:	e59f26d8 	ldr	r2, [pc, #1752]	; 7218 <.text+0x7218>
    6b3c:	e3a0320e 	mov	r3, #-536870912	; 0xe0000000
    6b40:	e1a00004 	mov	r0, r4
    6b44:	e1a05001 	mov	r5, r1
    6b48:	eb000511 	bl	7f94 <__aeabi_dmul>
    6b4c:	e59f26c8 	ldr	r2, [pc, #1736]	; 721c <.text+0x721c>
    6b50:	e88d0003 	stmia	sp, {r0, r1}
    6b54:	e59f36c4 	ldr	r3, [pc, #1732]	; 7220 <.text+0x7220>
    6b58:	e1a00004 	mov	r0, r4
    6b5c:	e1a01005 	mov	r1, r5
    6b60:	eb00050b 	bl	7f94 <__aeabi_dmul>
    6b64:	e1a0200a 	mov	r2, sl
    6b68:	e1a06000 	mov	r6, r0
    6b6c:	e1a07001 	mov	r7, r1
    6b70:	e1a00004 	mov	r0, r4
    6b74:	e1a01005 	mov	r1, r5
    6b78:	e1a0300b 	mov	r3, fp
    6b7c:	eb000406 	bl	7b9c <__aeabi_dsub>
    6b80:	e1a02000 	mov	r2, r0
    6b84:	e1a03001 	mov	r3, r1
    6b88:	e1a00008 	mov	r0, r8
    6b8c:	e1a01009 	mov	r1, r9
    6b90:	eb000401 	bl	7b9c <__aeabi_dsub>
    6b94:	e59f267c 	ldr	r2, [pc, #1660]	; 7218 <.text+0x7218>
    6b98:	e59f3684 	ldr	r3, [pc, #1668]	; 7224 <.text+0x7224>
    6b9c:	eb0004fc 	bl	7f94 <__aeabi_dmul>
    6ba0:	e1a02000 	mov	r2, r0
    6ba4:	e1a03001 	mov	r3, r1
    6ba8:	e1a00006 	mov	r0, r6
    6bac:	e1a01007 	mov	r1, r7
    6bb0:	eb0003fa 	bl	7ba0 <__adddf3>
    6bb4:	e59d2038 	ldr	r2, [sp, #56]
    6bb8:	e59f3668 	ldr	r3, [pc, #1640]	; 7228 <.text+0x7228>
    6bbc:	e0823003 	add	r3, r2, r3
    6bc0:	e893000c 	ldmia	r3, {r2, r3}
    6bc4:	eb0003f5 	bl	7ba0 <__adddf3>
    6bc8:	e1a09000 	mov	r9, r0
    6bcc:	e59d0074 	ldr	r0, [sp, #116]
    6bd0:	e1a0a001 	mov	sl, r1
    6bd4:	eb0004b3 	bl	7ea8 <__aeabi_i2d>
    6bd8:	e59d4038 	ldr	r4, [sp, #56]
    6bdc:	e59f3648 	ldr	r3, [pc, #1608]	; 722c <.text+0x722c>
    6be0:	e0843003 	add	r3, r4, r3
    6be4:	e8930180 	ldmia	r3, {r7, r8}
    6be8:	e1a05000 	mov	r5, r0
    6bec:	e1a06001 	mov	r6, r1
    6bf0:	e1a02009 	mov	r2, r9
    6bf4:	e1a0300a 	mov	r3, sl
    6bf8:	e89d0003 	ldmia	sp, {r0, r1}
    6bfc:	eb0003e7 	bl	7ba0 <__adddf3>
    6c00:	e1a02007 	mov	r2, r7
    6c04:	e1a03008 	mov	r3, r8
    6c08:	eb0003e4 	bl	7ba0 <__adddf3>
    6c0c:	e1a02005 	mov	r2, r5
    6c10:	e1a03006 	mov	r3, r6
    6c14:	eb0003e1 	bl	7ba0 <__adddf3>
    6c18:	e59dc048 	ldr	ip, [sp, #72]
    6c1c:	e1a03000 	mov	r3, r0
    6c20:	e1a0400c 	mov	r4, ip
    6c24:	e58d305c 	str	r3, [sp, #92]
    6c28:	e58d4060 	str	r4, [sp, #96]
    6c2c:	e1a02005 	mov	r2, r5
    6c30:	e1a03006 	mov	r3, r6
    6c34:	e28d005c 	add	r0, sp, #92	; 0x5c
    6c38:	e8900003 	ldmia	r0, {r0, r1}
    6c3c:	eb0003d6 	bl	7b9c <__aeabi_dsub>
    6c40:	e1a02007 	mov	r2, r7
    6c44:	e1a03008 	mov	r3, r8
    6c48:	eb0003d3 	bl	7b9c <__aeabi_dsub>
    6c4c:	e89d000c 	ldmia	sp, {r2, r3}
    6c50:	eb0003d1 	bl	7b9c <__aeabi_dsub>
    6c54:	e1a02000 	mov	r2, r0
    6c58:	e1a03001 	mov	r3, r1
    6c5c:	e1a00009 	mov	r0, r9
    6c60:	e1a0100a 	mov	r1, sl
    6c64:	eb0003cc 	bl	7b9c <__aeabi_dsub>
    6c68:	e1a08000 	mov	r8, r0
    6c6c:	e59d006c 	ldr	r0, [sp, #108]
    6c70:	e1a09001 	mov	r9, r1
    6c74:	e59d1050 	ldr	r1, [sp, #80]
    6c78:	e2403001 	sub	r3, r0, #1	; 0x1
    6c7c:	e1911003 	orrs	r1, r1, r3
    6c80:	059f25a8 	ldreq	r2, [pc, #1448]	; 7230 <.text+0x7230>
    6c84:	03a03000 	moveq	r3, #0	; 0x0
    6c88:	058d2064 	streq	r2, [sp, #100]
    6c8c:	058d3068 	streq	r3, [sp, #104]
    6c90:	159f34fc 	ldrne	r3, [pc, #1276]	; 7194 <.text+0x7194>
    6c94:	13a04000 	movne	r4, #0	; 0x0
    6c98:	158d3064 	strne	r3, [sp, #100]
    6c9c:	158d4068 	strne	r4, [sp, #104]
    6ca0:	e28d303c 	add	r3, sp, #60	; 0x3c
    6ca4:	e8930018 	ldmia	r3, {r3, r4}
    6ca8:	e3a04000 	mov	r4, #0	; 0x0
    6cac:	e1a06003 	mov	r6, r3
    6cb0:	e1a02003 	mov	r2, r3
    6cb4:	e28d003c 	add	r0, sp, #60	; 0x3c
    6cb8:	e8900003 	ldmia	r0, {r0, r1}
    6cbc:	e1a03004 	mov	r3, r4
    6cc0:	eb0003b5 	bl	7b9c <__aeabi_dsub>
    6cc4:	e28d205c 	add	r2, sp, #92	; 0x5c
    6cc8:	e892000c 	ldmia	r2, {r2, r3}
    6ccc:	eb0004b0 	bl	7f94 <__aeabi_dmul>
    6cd0:	e1a07004 	mov	r7, r4
    6cd4:	e1a02008 	mov	r2, r8
    6cd8:	e1a03009 	mov	r3, r9
    6cdc:	e1a04000 	mov	r4, r0
    6ce0:	e1a05001 	mov	r5, r1
    6ce4:	e28d003c 	add	r0, sp, #60	; 0x3c
    6ce8:	e8900003 	ldmia	r0, {r0, r1}
    6cec:	eb0004a8 	bl	7f94 <__aeabi_dmul>
    6cf0:	e1a02000 	mov	r2, r0
    6cf4:	e1a03001 	mov	r3, r1
    6cf8:	e1a00004 	mov	r0, r4
    6cfc:	e1a01005 	mov	r1, r5
    6d00:	eb0003a6 	bl	7ba0 <__adddf3>
    6d04:	e28d205c 	add	r2, sp, #92	; 0x5c
    6d08:	e892000c 	ldmia	r2, {r2, r3}
    6d0c:	e58d0054 	str	r0, [sp, #84]
    6d10:	e58d1058 	str	r1, [sp, #88]
    6d14:	e1a00006 	mov	r0, r6
    6d18:	e1a01007 	mov	r1, r7
    6d1c:	eb00049c 	bl	7f94 <__aeabi_dmul>
    6d20:	e1a08000 	mov	r8, r0
    6d24:	e1a09001 	mov	r9, r1
    6d28:	e1a03009 	mov	r3, r9
    6d2c:	e28d0054 	add	r0, sp, #84	; 0x54
    6d30:	e8900003 	ldmia	r0, {r0, r1}
    6d34:	e1a02008 	mov	r2, r8
    6d38:	eb000398 	bl	7ba0 <__adddf3>
    6d3c:	e59f34f0 	ldr	r3, [pc, #1264]	; 7234 <.text+0x7234>
    6d40:	e1500003 	cmp	r0, r3
    6d44:	e1a06000 	mov	r6, r0
    6d48:	e1a07001 	mov	r7, r1
    6d4c:	e1a0a000 	mov	sl, r0
    6d50:	da00001e 	ble	6dd0 <__ieee754_pow+0xb4c>
    6d54:	e28034bf 	add	r3, r0, #-1090519040	; 0xbf000000
    6d58:	e2833607 	add	r3, r3, #7340032	; 0x700000
    6d5c:	e1933007 	orrs	r3, r3, r7
    6d60:	1a000012 	bne	6db0 <__ieee754_pow+0xb2c>
    6d64:	e59f24cc 	ldr	r2, [pc, #1228]	; 7238 <.text+0x7238>
    6d68:	e59f3464 	ldr	r3, [pc, #1124]	; 71d4 <.text+0x71d4>
    6d6c:	e28d0054 	add	r0, sp, #84	; 0x54
    6d70:	e8900003 	ldmia	r0, {r0, r1}
    6d74:	eb000389 	bl	7ba0 <__adddf3>
    6d78:	e1a02008 	mov	r2, r8
    6d7c:	e1a04000 	mov	r4, r0
    6d80:	e1a05001 	mov	r5, r1
    6d84:	e1a03009 	mov	r3, r9
    6d88:	e1a00006 	mov	r0, r6
    6d8c:	e1a01007 	mov	r1, r7
    6d90:	eb000381 	bl	7b9c <__aeabi_dsub>
    6d94:	e1a02000 	mov	r2, r0
    6d98:	e1a03001 	mov	r3, r1
    6d9c:	e1a00004 	mov	r0, r4
    6da0:	e1a01005 	mov	r1, r5
    6da4:	eb000596 	bl	8404 <__gedf2>
    6da8:	e3500000 	cmp	r0, #0	; 0x0
    6dac:	da000024 	ble	6e44 <__ieee754_pow+0xbc0>
    6db0:	e59f23f4 	ldr	r2, [pc, #1012]	; 71ac <.text+0x71ac>
    6db4:	e59f33f4 	ldr	r3, [pc, #1012]	; 71b0 <.text+0x71b0>
    6db8:	e28d0064 	add	r0, sp, #100	; 0x64
    6dbc:	e8900003 	ldmia	r0, {r0, r1}
    6dc0:	eb000473 	bl	7f94 <__aeabi_dmul>
    6dc4:	e59f23e0 	ldr	r2, [pc, #992]	; 71ac <.text+0x71ac>
    6dc8:	e59f33e0 	ldr	r3, [pc, #992]	; 71b0 <.text+0x71b0>
    6dcc:	ea0000e3 	b	7160 <__ieee754_pow+0xedc>
    6dd0:	e59f3464 	ldr	r3, [pc, #1124]	; 723c <.text+0x723c>
    6dd4:	e3c04102 	bic	r4, r0, #-2147483648	; 0x80000000
    6dd8:	e1540003 	cmp	r4, r3
    6ddc:	da000018 	ble	6e44 <__ieee754_pow+0xbc0>
    6de0:	e59f3458 	ldr	r3, [pc, #1112]	; 7240 <.text+0x7240>
    6de4:	e0803003 	add	r3, r0, r3
    6de8:	e1933007 	orrs	r3, r3, r7
    6dec:	1a00000c 	bne	6e24 <__ieee754_pow+0xba0>
    6df0:	e1a02008 	mov	r2, r8
    6df4:	e1a03009 	mov	r3, r9
    6df8:	e1a00006 	mov	r0, r6
    6dfc:	e1a01007 	mov	r1, r7
    6e00:	eb000365 	bl	7b9c <__aeabi_dsub>
    6e04:	e1a03001 	mov	r3, r1
    6e08:	e1a02000 	mov	r2, r0
    6e0c:	e28d0054 	add	r0, sp, #84	; 0x54
    6e10:	e8900003 	ldmia	r0, {r0, r1}
    6e14:	eb00057c 	bl	840c <__ledf2>
    6e18:	e3500000 	cmp	r0, #0	; 0x0
    6e1c:	c1a03a44 	movgt	r3, r4, asr #20
    6e20:	ca00000e 	bgt	6e60 <__ieee754_pow+0xbdc>
    6e24:	e59f2418 	ldr	r2, [pc, #1048]	; 7244 <.text+0x7244>
    6e28:	e59f3418 	ldr	r3, [pc, #1048]	; 7248 <.text+0x7248>
    6e2c:	e28d0064 	add	r0, sp, #100	; 0x64
    6e30:	e8900003 	ldmia	r0, {r0, r1}
    6e34:	eb000456 	bl	7f94 <__aeabi_dmul>
    6e38:	e59f2404 	ldr	r2, [pc, #1028]	; 7244 <.text+0x7244>
    6e3c:	e59f3404 	ldr	r3, [pc, #1028]	; 7248 <.text+0x7248>
    6e40:	ea0000c6 	b	7160 <__ieee754_pow+0xedc>
    6e44:	e59f3358 	ldr	r3, [pc, #856]	; 71a4 <.text+0x71a4>
    6e48:	e3ca2102 	bic	r2, sl, #-2147483648	; 0x80000000
    6e4c:	e1520003 	cmp	r2, r3
    6e50:	d3a04000 	movle	r4, #0	; 0x0
    6e54:	d58d4078 	strle	r4, [sp, #120]
    6e58:	da00001c 	ble	6ed0 <__ieee754_pow+0xc4c>
    6e5c:	e1a03a42 	mov	r3, r2, asr #20
    6e60:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    6e64:	e2433002 	sub	r3, r3, #2	; 0x2
    6e68:	e3a02601 	mov	r2, #1048576	; 0x100000
    6e6c:	e08a2352 	add	r2, sl, r2, asr r3
    6e70:	e3c23102 	bic	r3, r2, #-2147483648	; 0x80000000
    6e74:	e1a03a43 	mov	r3, r3, asr #20
    6e78:	e59f13cc 	ldr	r1, [pc, #972]	; 724c <.text+0x724c>
    6e7c:	e2433fff 	sub	r3, r3, #1020	; 0x3fc
    6e80:	e2433003 	sub	r3, r3, #3	; 0x3
    6e84:	e1c24351 	bic	r4, r2, r1, asr r3
    6e88:	e3c224ff 	bic	r2, r2, #-16777216	; 0xff000000
    6e8c:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
    6e90:	e2633014 	rsb	r3, r3, #20	; 0x14
    6e94:	e3822601 	orr	r2, r2, #1048576	; 0x100000
    6e98:	e1a02352 	mov	r2, r2, asr r3
    6e9c:	e58d2078 	str	r2, [sp, #120]
    6ea0:	e35a0000 	cmp	sl, #0	; 0x0
    6ea4:	b59dc078 	ldrlt	ip, [sp, #120]
    6ea8:	e3a05000 	mov	r5, #0	; 0x0
    6eac:	b26cc000 	rsblt	ip, ip, #0	; 0x0
    6eb0:	e1a00008 	mov	r0, r8
    6eb4:	e1a01009 	mov	r1, r9
    6eb8:	e1a02004 	mov	r2, r4
    6ebc:	e1a03005 	mov	r3, r5
    6ec0:	b58dc078 	strlt	ip, [sp, #120]
    6ec4:	eb000334 	bl	7b9c <__aeabi_dsub>
    6ec8:	e1a08000 	mov	r8, r0
    6ecc:	e1a09001 	mov	r9, r1
    6ed0:	e1a02008 	mov	r2, r8
    6ed4:	e1a03009 	mov	r3, r9
    6ed8:	e28d0054 	add	r0, sp, #84	; 0x54
    6edc:	e8900003 	ldmia	r0, {r0, r1}
    6ee0:	eb00032e 	bl	7ba0 <__adddf3>
    6ee4:	e3a04000 	mov	r4, #0	; 0x0
    6ee8:	e1a05004 	mov	r5, r4
    6eec:	e1a01005 	mov	r1, r5
    6ef0:	e59f2358 	ldr	r2, [pc, #856]	; 7250 <.text+0x7250>
    6ef4:	e3a03000 	mov	r3, #0	; 0x0
    6ef8:	e1a04000 	mov	r4, r0
    6efc:	eb000424 	bl	7f94 <__aeabi_dmul>
    6f00:	e1a02008 	mov	r2, r8
    6f04:	e1a0a000 	mov	sl, r0
    6f08:	e1a0b001 	mov	fp, r1
    6f0c:	e1a03009 	mov	r3, r9
    6f10:	e1a00004 	mov	r0, r4
    6f14:	e1a01005 	mov	r1, r5
    6f18:	eb00031f 	bl	7b9c <__aeabi_dsub>
    6f1c:	e1a02000 	mov	r2, r0
    6f20:	e1a03001 	mov	r3, r1
    6f24:	e28d0054 	add	r0, sp, #84	; 0x54
    6f28:	e8900003 	ldmia	r0, {r0, r1}
    6f2c:	eb00031a 	bl	7b9c <__aeabi_dsub>
    6f30:	e59f231c 	ldr	r2, [pc, #796]	; 7254 <.text+0x7254>
    6f34:	e59f331c 	ldr	r3, [pc, #796]	; 7258 <.text+0x7258>
    6f38:	eb000415 	bl	7f94 <__aeabi_dmul>
    6f3c:	e59f2318 	ldr	r2, [pc, #792]	; 725c <.text+0x725c>
    6f40:	e1a06000 	mov	r6, r0
    6f44:	e1a07001 	mov	r7, r1
    6f48:	e1a00004 	mov	r0, r4
    6f4c:	e1a01005 	mov	r1, r5
    6f50:	e59f3308 	ldr	r3, [pc, #776]	; 7260 <.text+0x7260>
    6f54:	eb00040e 	bl	7f94 <__aeabi_dmul>
    6f58:	e1a02000 	mov	r2, r0
    6f5c:	e1a03001 	mov	r3, r1
    6f60:	e1a00006 	mov	r0, r6
    6f64:	e1a01007 	mov	r1, r7
    6f68:	eb00030c 	bl	7ba0 <__adddf3>
    6f6c:	e1a04000 	mov	r4, r0
    6f70:	e1a05001 	mov	r5, r1
    6f74:	e1a02004 	mov	r2, r4
    6f78:	e1a03005 	mov	r3, r5
    6f7c:	e1a0000a 	mov	r0, sl
    6f80:	e1a0100b 	mov	r1, fp
    6f84:	eb000305 	bl	7ba0 <__adddf3>
    6f88:	e1a0200a 	mov	r2, sl
    6f8c:	e1a0300b 	mov	r3, fp
    6f90:	e1a08000 	mov	r8, r0
    6f94:	e1a09001 	mov	r9, r1
    6f98:	eb0002ff 	bl	7b9c <__aeabi_dsub>
    6f9c:	e1a02000 	mov	r2, r0
    6fa0:	e1a03001 	mov	r3, r1
    6fa4:	e1a00004 	mov	r0, r4
    6fa8:	e1a01005 	mov	r1, r5
    6fac:	eb0002fa 	bl	7b9c <__aeabi_dsub>
    6fb0:	e1a02008 	mov	r2, r8
    6fb4:	e1a0a000 	mov	sl, r0
    6fb8:	e1a0b001 	mov	fp, r1
    6fbc:	e1a03009 	mov	r3, r9
    6fc0:	e1a00008 	mov	r0, r8
    6fc4:	e1a01009 	mov	r1, r9
    6fc8:	eb0003f1 	bl	7f94 <__aeabi_dmul>
    6fcc:	e59f2290 	ldr	r2, [pc, #656]	; 7264 <.text+0x7264>
    6fd0:	e59f3290 	ldr	r3, [pc, #656]	; 7268 <.text+0x7268>
    6fd4:	e1a04000 	mov	r4, r0
    6fd8:	e1a05001 	mov	r5, r1
    6fdc:	eb0003ec 	bl	7f94 <__aeabi_dmul>
    6fe0:	e59f2284 	ldr	r2, [pc, #644]	; 726c <.text+0x726c>
    6fe4:	e59f3284 	ldr	r3, [pc, #644]	; 7270 <.text+0x7270>
    6fe8:	eb0002eb 	bl	7b9c <__aeabi_dsub>
    6fec:	e1a02000 	mov	r2, r0
    6ff0:	e1a03001 	mov	r3, r1
    6ff4:	e1a00004 	mov	r0, r4
    6ff8:	e1a01005 	mov	r1, r5
    6ffc:	eb0003e4 	bl	7f94 <__aeabi_dmul>
    7000:	e59f226c 	ldr	r2, [pc, #620]	; 7274 <.text+0x7274>
    7004:	e59f326c 	ldr	r3, [pc, #620]	; 7278 <.text+0x7278>
    7008:	eb0002e4 	bl	7ba0 <__adddf3>
    700c:	e1a02000 	mov	r2, r0
    7010:	e1a03001 	mov	r3, r1
    7014:	e1a00004 	mov	r0, r4
    7018:	e1a01005 	mov	r1, r5
    701c:	eb0003dc 	bl	7f94 <__aeabi_dmul>
    7020:	e59f2254 	ldr	r2, [pc, #596]	; 727c <.text+0x727c>
    7024:	e59f3254 	ldr	r3, [pc, #596]	; 7280 <.text+0x7280>
    7028:	eb0002db 	bl	7b9c <__aeabi_dsub>
    702c:	e1a02000 	mov	r2, r0
    7030:	e1a03001 	mov	r3, r1
    7034:	e1a00004 	mov	r0, r4
    7038:	e1a01005 	mov	r1, r5
    703c:	eb0003d4 	bl	7f94 <__aeabi_dmul>
    7040:	e59f223c 	ldr	r2, [pc, #572]	; 7284 <.text+0x7284>
    7044:	e59f323c 	ldr	r3, [pc, #572]	; 7288 <.text+0x7288>
    7048:	eb0002d4 	bl	7ba0 <__adddf3>
    704c:	e1a02000 	mov	r2, r0
    7050:	e1a03001 	mov	r3, r1
    7054:	e1a00004 	mov	r0, r4
    7058:	e1a01005 	mov	r1, r5
    705c:	eb0003cc 	bl	7f94 <__aeabi_dmul>
    7060:	e1a02000 	mov	r2, r0
    7064:	e1a03001 	mov	r3, r1
    7068:	e1a00008 	mov	r0, r8
    706c:	e1a01009 	mov	r1, r9
    7070:	eb0002c9 	bl	7b9c <__aeabi_dsub>
    7074:	e1a04000 	mov	r4, r0
    7078:	e1a05001 	mov	r5, r1
    707c:	e1a02004 	mov	r2, r4
    7080:	e1a03005 	mov	r3, r5
    7084:	e1a00008 	mov	r0, r8
    7088:	e1a01009 	mov	r1, r9
    708c:	eb0003c0 	bl	7f94 <__aeabi_dmul>
    7090:	e3a02101 	mov	r2, #1073741824	; 0x40000000
    7094:	e1a06000 	mov	r6, r0
    7098:	e1a07001 	mov	r7, r1
    709c:	e1a00004 	mov	r0, r4
    70a0:	e1a01005 	mov	r1, r5
    70a4:	e3a03000 	mov	r3, #0	; 0x0
    70a8:	eb0002bb 	bl	7b9c <__aeabi_dsub>
    70ac:	e1a02000 	mov	r2, r0
    70b0:	e1a03001 	mov	r3, r1
    70b4:	e1a00006 	mov	r0, r6
    70b8:	e1a01007 	mov	r1, r7
    70bc:	eb00044f 	bl	8200 <__aeabi_ddiv>
    70c0:	e1a0200a 	mov	r2, sl
    70c4:	e1a04000 	mov	r4, r0
    70c8:	e1a05001 	mov	r5, r1
    70cc:	e1a0300b 	mov	r3, fp
    70d0:	e1a00008 	mov	r0, r8
    70d4:	e1a01009 	mov	r1, r9
    70d8:	eb0003ad 	bl	7f94 <__aeabi_dmul>
    70dc:	e1a02000 	mov	r2, r0
    70e0:	e1a03001 	mov	r3, r1
    70e4:	e1a0000a 	mov	r0, sl
    70e8:	e1a0100b 	mov	r1, fp
    70ec:	eb0002ab 	bl	7ba0 <__adddf3>
    70f0:	e1a02000 	mov	r2, r0
    70f4:	e1a03001 	mov	r3, r1
    70f8:	e1a00004 	mov	r0, r4
    70fc:	e1a01005 	mov	r1, r5
    7100:	eb0002a5 	bl	7b9c <__aeabi_dsub>
    7104:	e1a02008 	mov	r2, r8
    7108:	e1a03009 	mov	r3, r9
    710c:	eb0002a2 	bl	7b9c <__aeabi_dsub>
    7110:	e1a02000 	mov	r2, r0
    7114:	e1a03001 	mov	r3, r1
    7118:	e59f0074 	ldr	r0, [pc, #116]	; 7194 <.text+0x7194>
    711c:	e3a01000 	mov	r1, #0	; 0x0
    7120:	eb00029d 	bl	7b9c <__aeabi_dsub>
    7124:	e59dc078 	ldr	ip, [sp, #120]
    7128:	e0802a0c 	add	r2, r0, ip, lsl #20
    712c:	e1a03a42 	mov	r3, r2, asr #20
    7130:	e3530000 	cmp	r3, #0	; 0x0
    7134:	e1a04001 	mov	r4, r1
    7138:	ca000004 	bgt	7150 <__ieee754_pow+0xecc>
    713c:	e1a0200c 	mov	r2, ip
    7140:	eb00015e 	bl	76c0 <scalbn>
    7144:	e1a02000 	mov	r2, r0
    7148:	e1a03001 	mov	r3, r1
    714c:	ea000001 	b	7158 <__ieee754_pow+0xed4>
    7150:	e1a04001 	mov	r4, r1
    7154:	e1a03001 	mov	r3, r1
    7158:	e28d0064 	add	r0, sp, #100	; 0x64
    715c:	e8900003 	ldmia	r0, {r0, r1}
    7160:	eb00038b 	bl	7f94 <__aeabi_dmul>
    7164:	ea000001 	b	7170 <__ieee754_pow+0xeec>
    7168:	e3a00000 	mov	r0, #0	; 0x0
    716c:	e3a01000 	mov	r1, #0	; 0x0
    7170:	e58d003c 	str	r0, [sp, #60]
    7174:	e58d1040 	str	r1, [sp, #64]
    7178:	ea000001 	b	7184 <__ieee754_pow+0xf00>
    717c:	e58d806c 	str	r8, [sp, #108]
    7180:	eafffc92 	b	63d0 <__ieee754_pow+0x14c>
    7184:	e28d003c 	add	r0, sp, #60	; 0x3c
    7188:	e8900003 	ldmia	r0, {r0, r1}
    718c:	e28dd07c 	add	sp, sp, #124	; 0x7c
    7190:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7194:	3ff00000 	svccc	0x00f00000	; IMB
    7198:	7ff00000 	svcvc	0x00f00000	; IMB
    719c:	433fffff 	teqmip	pc, #1020	; 0x3fc
    71a0:	3fefffff 	svccc	0x00efffff
    71a4:	3fe00000 	svccc	0x00e00000
    71a8:	41e00000 	mvnmi	r0, r0
    71ac:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
    71b0:	8800759c 	stmhida	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    71b4:	3feffffe 	svccc	0x00effffe
    71b8:	3ff71547 	svccc	0x00f71547
    71bc:	3e54ae0b 	cdpcc	14, 5, cr10, cr4, cr11, {0}
    71c0:	f85ddf44 	undefined instruction 0xf85ddf44
    71c4:	bfd00000 	svclt	0x00d00000
    71c8:	3fd55555 	svccc	0x00d55555
    71cc:	55555555 	ldrplb	r5, [r5, #-1365]
    71d0:	bff71547 	svclt	0x00f71547
    71d4:	652b82fe 	strvs	r8, [fp, #-766]!
    71d8:	43400000 	movtmi	r0, #0	; 0x0
    71dc:	0003988e 	andeq	r9, r3, lr, lsl #17
    71e0:	000bb679 	andeq	fp, fp, r9, ror r6
    71e4:	00008714 	andeq	r8, r0, r4, lsl r7
    71e8:	3fca7e28 	svccc	0x00ca7e28
    71ec:	4a454eef 	bmi	115adb0 <_etext+0x1151e60>
    71f0:	3fcd864a 	svccc	0x00cd864a
    71f4:	93c9db65 	bicls	sp, r9, #103424	; 0x19400
    71f8:	3fd17460 	svccc	0x00d17460
    71fc:	a91d4101 	ldmgedb	sp, {r0, r8, lr}
    7200:	518f264d 	orrpl	r2, pc, sp, asr #12
    7204:	3fdb6db6 	svccc	0x00db6db6
    7208:	db6fabff 	blle	1bf220c <_etext+0x1be92bc>
    720c:	3fe33333 	svccc	0x00e33333
    7210:	33333303 	teqcc	r3, #201326592	; 0xc000000
    7214:	40080000 	andmi	r0, r8, r0
    7218:	3feec709 	svccc	0x00eec709
    721c:	be3e2fe0 	cdplt	15, 3, cr2, cr14, cr0, {7}
    7220:	145b01f5 	ldrneb	r0, [fp], #-501
    7224:	dc3a03fd 	ldcle	3, cr0, [sl], #-1012
    7228:	00008724 	andeq	r8, r0, r4, lsr #14
    722c:	00008734 	andeq	r8, r0, r4, lsr r7
    7230:	bff00000 	svclt	0x00f00000	; IMB
    7234:	408fffff 	strmid	pc, [pc], pc
    7238:	3c971547 	cfldr32cc	mvfx1, [r7], {71}
    723c:	4090cbff 	ldrmish	ip, [r0], pc
    7240:	3f6f3400 	svccc	0x006f3400
    7244:	01a56e1f 	moveq	r6, pc, lsl lr
    7248:	c2f8f359 	rscgts	pc, r8, #1677721601	; 0x64000001
    724c:	000fffff 	streqd	pc, [pc], -pc
    7250:	3fe62e43 	svccc	0x00e62e43
    7254:	3fe62e42 	svccc	0x00e62e42
    7258:	fefa39ef 	cdp2	9, 15, cr3, cr10, cr15, {7}
    725c:	be205c61 	cdplt	12, 2, cr5, cr0, cr1, {3}
    7260:	0ca86c39 	stceq	12, cr6, [r8], #228
    7264:	3e663769 	cdpcc	7, 6, cr3, cr6, cr9, {3}
    7268:	72bea4d0 	adcvcs	sl, lr, #-805306368	; 0xd0000000
    726c:	3ebbbd41 	cdpcc	13, 11, cr11, cr11, cr1, {2}
    7270:	c5d26bf1 	ldrgtb	r6, [r2, #3057]
    7274:	3f11566a 	svccc	0x0011566a
    7278:	af25de2c 	svcge	0x0025de2c
    727c:	3f66c16c 	svccc	0x0066c16c
    7280:	16bebd93 	ssatne	fp, #31, r3, LSL #27
    7284:	3fc55555 	svccc	0x00c55555
    7288:	5555553e 	ldrplb	r5, [r5, #-1342]

0000728c <__ieee754_sqrt>:
    728c:	e59f2224 	ldr	r2, [pc, #548]	; 74b8 <.text+0x74b8>
    7290:	e59fc220 	ldr	ip, [pc, #544]	; 74b8 <.text+0x74b8>
    7294:	e0002002 	and	r2, r0, r2
    7298:	e152000c 	cmp	r2, ip
    729c:	e92d4df0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    72a0:	e1a0c001 	mov	ip, r1
    72a4:	e1a05000 	mov	r5, r0
    72a8:	e1a06001 	mov	r6, r1
    72ac:	e1a04001 	mov	r4, r1
    72b0:	e1a0e000 	mov	lr, r0
    72b4:	e3a0a000 	mov	sl, #0	; 0x0
    72b8:	e3a0b000 	mov	fp, #0	; 0x0
    72bc:	1a000008 	bne	72e4 <__ieee754_sqrt+0x58>
    72c0:	e1a02000 	mov	r2, r0
    72c4:	e1a03001 	mov	r3, r1
    72c8:	eb000331 	bl	7f94 <__aeabi_dmul>
    72cc:	e1a02000 	mov	r2, r0
    72d0:	e1a03001 	mov	r3, r1
    72d4:	e1a00005 	mov	r0, r5
    72d8:	e1a01006 	mov	r1, r6
    72dc:	eb00022f 	bl	7ba0 <__adddf3>
    72e0:	ea00000c 	b	7318 <__ieee754_sqrt+0x8c>
    72e4:	e3500000 	cmp	r0, #0	; 0x0
    72e8:	ca00000d 	bgt	7324 <__ieee754_sqrt+0x98>
    72ec:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
    72f0:	e1933001 	orrs	r3, r3, r1
    72f4:	0a00006c 	beq	74ac <__ieee754_sqrt+0x220>
    72f8:	e3500000 	cmp	r0, #0	; 0x0
    72fc:	0a000008 	beq	7324 <__ieee754_sqrt+0x98>
    7300:	e1a02000 	mov	r2, r0
    7304:	e1a03001 	mov	r3, r1
    7308:	eb000223 	bl	7b9c <__aeabi_dsub>
    730c:	e1a02000 	mov	r2, r0
    7310:	e1a03001 	mov	r3, r1
    7314:	eb0003b9 	bl	8200 <__aeabi_ddiv>
    7318:	e1a05000 	mov	r5, r0
    731c:	e1a06001 	mov	r6, r1
    7320:	ea000061 	b	74ac <__ieee754_sqrt+0x220>
    7324:	e1b02a4e 	movs	r2, lr, asr #20
    7328:	0a000003 	beq	733c <__ieee754_sqrt+0xb0>
    732c:	ea00000f 	b	7370 <__ieee754_sqrt+0xe4>
    7330:	e1a0e5ac 	mov	lr, ip, lsr #11
    7334:	e2422015 	sub	r2, r2, #21	; 0x15
    7338:	e1a0ca8c 	mov	ip, ip, lsl #21
    733c:	e35e0000 	cmp	lr, #0	; 0x0
    7340:	0afffffa 	beq	7330 <__ieee754_sqrt+0xa4>
    7344:	e3a01000 	mov	r1, #0	; 0x0
    7348:	ea000001 	b	7354 <__ieee754_sqrt+0xc8>
    734c:	e1a0e08e 	mov	lr, lr, lsl #1
    7350:	e2811001 	add	r1, r1, #1	; 0x1
    7354:	e31e0601 	tst	lr, #1048576	; 0x100000
    7358:	0afffffb 	beq	734c <__ieee754_sqrt+0xc0>
    735c:	e2613020 	rsb	r3, r1, #32	; 0x20
    7360:	e18ee33c 	orr	lr, lr, ip, lsr r3
    7364:	e1a0c11c 	mov	ip, ip, lsl r1
    7368:	e0613002 	rsb	r3, r1, r2
    736c:	e2832001 	add	r2, r3, #1	; 0x1
    7370:	e2428fff 	sub	r8, r2, #1020	; 0x3fc
    7374:	e3ce34ff 	bic	r3, lr, #-16777216	; 0xff000000
    7378:	e3c3360f 	bic	r3, r3, #15728640	; 0xf00000
    737c:	e2488003 	sub	r8, r8, #3	; 0x3
    7380:	e3832601 	orr	r2, r3, #1048576	; 0x100000
    7384:	e3180001 	tst	r8, #1	; 0x1
    7388:	10823fac 	addne	r3, r2, ip, lsr #31
    738c:	10822003 	addne	r2, r2, r3
    7390:	11a0c08c 	movne	ip, ip, lsl #1
    7394:	e3a05000 	mov	r5, #0	; 0x0
    7398:	e0823fac 	add	r3, r2, ip, lsr #31
    739c:	e1a0108c 	mov	r1, ip, lsl #1
    73a0:	e0822003 	add	r2, r2, r3
    73a4:	e3a00602 	mov	r0, #2097152	; 0x200000
    73a8:	e1a0e005 	mov	lr, r5
    73ac:	e1a0c005 	mov	ip, r5
    73b0:	e08e3000 	add	r3, lr, r0
    73b4:	e1530002 	cmp	r3, r2
    73b8:	d0632002 	rsble	r2, r3, r2
    73bc:	e28cc001 	add	ip, ip, #1	; 0x1
    73c0:	d083e000 	addle	lr, r3, r0
    73c4:	d0855000 	addle	r5, r5, r0
    73c8:	e0823fa1 	add	r3, r2, r1, lsr #31
    73cc:	e35c0016 	cmp	ip, #22	; 0x16
    73d0:	e0822003 	add	r2, r2, r3
    73d4:	e1a01081 	mov	r1, r1, lsl #1
    73d8:	e1a000a0 	mov	r0, r0, lsr #1
    73dc:	1afffff3 	bne	73b0 <__ieee754_sqrt+0x124>
    73e0:	e3a0c000 	mov	ip, #0	; 0x0
    73e4:	e3a06102 	mov	r6, #-2147483648	; 0x80000000
    73e8:	e1a0400c 	mov	r4, ip
    73ec:	e1a0700c 	mov	r7, ip
    73f0:	e15e0002 	cmp	lr, r2
    73f4:	13a03000 	movne	r3, #0	; 0x0
    73f8:	03a03001 	moveq	r3, #1	; 0x1
    73fc:	e0840006 	add	r0, r4, r6
    7400:	ba000004 	blt	7418 <__ieee754_sqrt+0x18c>
    7404:	e1500001 	cmp	r0, r1
    7408:	83a03000 	movhi	r3, #0	; 0x0
    740c:	92033001 	andls	r3, r3, #1	; 0x1
    7410:	e3530000 	cmp	r3, #0	; 0x0
    7414:	0a00000b 	beq	7448 <__ieee754_sqrt+0x1bc>
    7418:	e3500000 	cmp	r0, #0	; 0x0
    741c:	e0804006 	add	r4, r0, r6
    7420:	e1a0300e 	mov	r3, lr
    7424:	aa000001 	bge	7430 <__ieee754_sqrt+0x1a4>
    7428:	e3540000 	cmp	r4, #0	; 0x0
    742c:	a28e3001 	addge	r3, lr, #1	; 0x1
    7430:	e1510000 	cmp	r1, r0
    7434:	e06e2002 	rsb	r2, lr, r2
    7438:	32422001 	subcc	r2, r2, #1	; 0x1
    743c:	e1a0e003 	mov	lr, r3
    7440:	e0601001 	rsb	r1, r0, r1
    7444:	e08cc006 	add	ip, ip, r6
    7448:	e2877001 	add	r7, r7, #1	; 0x1
    744c:	e0823fa1 	add	r3, r2, r1, lsr #31
    7450:	e3570020 	cmp	r7, #32	; 0x20
    7454:	e0822003 	add	r2, r2, r3
    7458:	e1a01081 	mov	r1, r1, lsl #1
    745c:	e1a060a6 	mov	r6, r6, lsr #1
    7460:	1affffe2 	bne	73f0 <__ieee754_sqrt+0x164>
    7464:	e1922001 	orrs	r2, r2, r1
    7468:	0a000004 	beq	7480 <__ieee754_sqrt+0x1f4>
    746c:	e37c0001 	cmn	ip, #1	; 0x1
    7470:	120c3001 	andne	r3, ip, #1	; 0x1
    7474:	02855001 	addeq	r5, r5, #1	; 0x1
    7478:	028cc001 	addeq	ip, ip, #1	; 0x1
    747c:	108cc003 	addne	ip, ip, r3
    7480:	e1a030c5 	mov	r3, r5, asr #1
    7484:	e28335ff 	add	r3, r3, #1069547520	; 0x3fc00000
    7488:	e1a010ac 	mov	r1, ip, lsr #1
    748c:	e3150001 	tst	r5, #1	; 0x1
    7490:	e2833602 	add	r3, r3, #2097152	; 0x200000
    7494:	e1a020c8 	mov	r2, r8, asr #1
    7498:	13811102 	orrne	r1, r1, #-2147483648	; 0x80000000
    749c:	e083aa02 	add	sl, r3, r2, lsl #20
    74a0:	e1a0b001 	mov	fp, r1
    74a4:	e1a0500a 	mov	r5, sl
    74a8:	e1a06001 	mov	r6, r1
    74ac:	e1a00005 	mov	r0, r5
    74b0:	e1a01006 	mov	r1, r6
    74b4:	e8bd8df0 	ldmia	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    74b8:	7ff00000 	svcvc	0x00f00000	; IMB

000074bc <fabs>:
    74bc:	e92d4010 	stmdb	sp!, {r4, lr}
    74c0:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
    74c4:	e1a04001 	mov	r4, r1
    74c8:	e1a00003 	mov	r0, r3
    74cc:	e1a01004 	mov	r1, r4
    74d0:	e8bd8010 	ldmia	sp!, {r4, pc}

000074d4 <finite>:
    74d4:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    74d8:	e2800102 	add	r0, r0, #-2147483648	; 0x80000000
    74dc:	e2800601 	add	r0, r0, #1048576	; 0x100000
    74e0:	e1a00fa0 	mov	r0, r0, lsr #31
    74e4:	e12fff1e 	bx	lr

000074e8 <isnan>:
    74e8:	e2613000 	rsb	r3, r1, #0	; 0x0
    74ec:	e1833001 	orr	r3, r3, r1
    74f0:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    74f4:	e1800fa3 	orr	r0, r0, r3, lsr #31
    74f8:	e260047f 	rsb	r0, r0, #2130706432	; 0x7f000000
    74fc:	e280060f 	add	r0, r0, #15728640	; 0xf00000
    7500:	e1a00fa0 	mov	r0, r0, lsr #31
    7504:	e12fff1e 	bx	lr

00007508 <matherr>:
    7508:	e3a00000 	mov	r0, #0	; 0x0
    750c:	e12fff1e 	bx	lr

00007510 <rint>:
    7510:	e1a03a40 	mov	r3, r0, asr #20
    7514:	e92d4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7518:	e1a03a83 	mov	r3, r3, lsl #21
    751c:	e1a03aa3 	mov	r3, r3, lsr #21
    7520:	e243cfff 	sub	ip, r3, #1020	; 0x3fc
    7524:	e24cc003 	sub	ip, ip, #3	; 0x3
    7528:	e35c0013 	cmp	ip, #19	; 0x13
    752c:	e24dd008 	sub	sp, sp, #8	; 0x8
    7530:	e1a06000 	mov	r6, r0
    7534:	e1a07001 	mov	r7, r1
    7538:	e1a04000 	mov	r4, r0
    753c:	e1a05001 	mov	r5, r1
    7540:	e1a08000 	mov	r8, r0
    7544:	e1a0e001 	mov	lr, r1
    7548:	e3a0a000 	mov	sl, #0	; 0x0
    754c:	e3a0b000 	mov	fp, #0	; 0x0
    7550:	e1a09fa0 	mov	r9, r0, lsr #31
    7554:	ca000030 	bgt	761c <rint+0x10c>
    7558:	e35c0000 	cmp	ip, #0	; 0x0
    755c:	aa00001f 	bge	75e0 <rint+0xd0>
    7560:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
    7564:	e1933001 	orrs	r3, r3, r1
    7568:	0a00004e 	beq	76a8 <rint+0x198>
    756c:	e3c024ff 	bic	r2, r0, #-16777216	; 0xff000000
    7570:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
    7574:	e1812002 	orr	r2, r1, r2
    7578:	e2623000 	rsb	r3, r2, #0	; 0x0
    757c:	e59f1134 	ldr	r1, [pc, #308]	; 76b8 <.text+0x76b8>
    7580:	e1822003 	orr	r2, r2, r3
    7584:	e0811189 	add	r1, r1, r9, lsl #3
    7588:	e1a008a0 	mov	r0, r0, lsr #17
    758c:	e1a02622 	mov	r2, r2, lsr #12
    7590:	e8910060 	ldmia	r1, {r5, r6}
    7594:	e1a00880 	mov	r0, r0, lsl #17
    7598:	e2022702 	and	r2, r2, #524288	; 0x80000
    759c:	e1803002 	orr	r3, r0, r2
    75a0:	e1a02003 	mov	r2, r3
    75a4:	e1a01006 	mov	r1, r6
    75a8:	e1a03007 	mov	r3, r7
    75ac:	e1a00005 	mov	r0, r5
    75b0:	eb00017a 	bl	7ba0 <__adddf3>
    75b4:	e88d0003 	stmia	sp, {r0, r1}
    75b8:	e1a03006 	mov	r3, r6
    75bc:	e1a02005 	mov	r2, r5
    75c0:	e89d0003 	ldmia	sp, {r0, r1}
    75c4:	eb000174 	bl	7b9c <__aeabi_dsub>
    75c8:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
    75cc:	e1a04001 	mov	r4, r1
    75d0:	e1831f89 	orr	r1, r3, r9, lsl #31
    75d4:	e1a06001 	mov	r6, r1
    75d8:	e1a07004 	mov	r7, r4
    75dc:	ea000031 	b	76a8 <rint+0x198>
    75e0:	e59f30d4 	ldr	r3, [pc, #212]	; 76bc <.text+0x76bc>
    75e4:	e1a02c53 	mov	r2, r3, asr ip
    75e8:	e0003002 	and	r3, r0, r2
    75ec:	e1933001 	orrs	r3, r3, r1
    75f0:	0a00002c 	beq	76a8 <rint+0x198>
    75f4:	e1a020a2 	mov	r2, r2, lsr #1
    75f8:	e0003002 	and	r3, r0, r2
    75fc:	e1933001 	orrs	r3, r3, r1
    7600:	0a000017 	beq	7664 <rint+0x154>
    7604:	e35c0013 	cmp	ip, #19	; 0x13
    7608:	11c02002 	bicne	r2, r0, r2
    760c:	13a03802 	movne	r3, #131072	; 0x20000
    7610:	11828c53 	orrne	r8, r2, r3, asr ip
    7614:	03a0e101 	moveq	lr, #1073741824	; 0x40000000
    7618:	ea000011 	b	7664 <rint+0x154>
    761c:	e35c0033 	cmp	ip, #51	; 0x33
    7620:	da000005 	ble	763c <rint+0x12c>
    7624:	e35c0b01 	cmp	ip, #1024	; 0x400
    7628:	1a00001e 	bne	76a8 <rint+0x198>
    762c:	e1a02000 	mov	r2, r0
    7630:	e1a03001 	mov	r3, r1
    7634:	eb000159 	bl	7ba0 <__adddf3>
    7638:	ea000018 	b	76a0 <rint+0x190>
    763c:	e24c1014 	sub	r1, ip, #20	; 0x14
    7640:	e3e03000 	mvn	r3, #0	; 0x0
    7644:	e1a03133 	mov	r3, r3, lsr r1
    7648:	e1170003 	tst	r7, r3
    764c:	0a000015 	beq	76a8 <rint+0x198>
    7650:	e1a030a3 	mov	r3, r3, lsr #1
    7654:	e1170003 	tst	r7, r3
    7658:	11c72003 	bicne	r2, r7, r3
    765c:	13a03101 	movne	r3, #1073741824	; 0x40000000
    7660:	1182e153 	orrne	lr, r2, r3, asr r1
    7664:	e59f304c 	ldr	r3, [pc, #76]	; 76b8 <.text+0x76b8>
    7668:	e0833189 	add	r3, r3, r9, lsl #3
    766c:	e8930030 	ldmia	r3, {r4, r5}
    7670:	e1a02008 	mov	r2, r8
    7674:	e1a0300e 	mov	r3, lr
    7678:	e1a00004 	mov	r0, r4
    767c:	e1a01005 	mov	r1, r5
    7680:	e1a0b00e 	mov	fp, lr
    7684:	eb000145 	bl	7ba0 <__adddf3>
    7688:	e88d0003 	stmia	sp, {r0, r1}
    768c:	e1a02004 	mov	r2, r4
    7690:	e1a03005 	mov	r3, r5
    7694:	e89d0003 	ldmia	sp, {r0, r1}
    7698:	e1a0a008 	mov	sl, r8
    769c:	eb00013e 	bl	7b9c <__aeabi_dsub>
    76a0:	e1a06000 	mov	r6, r0
    76a4:	e1a07001 	mov	r7, r1
    76a8:	e1a00006 	mov	r0, r6
    76ac:	e1a01007 	mov	r1, r7
    76b0:	e28dd008 	add	sp, sp, #8	; 0x8
    76b4:	e8bd8ff0 	ldmia	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    76b8:	00008748 	andeq	r8, r0, r8, asr #14
    76bc:	000fffff 	streqd	pc, [pc], -pc

000076c0 <scalbn>:
    76c0:	e59f3158 	ldr	r3, [pc, #344]	; 7820 <.text+0x7820>
    76c4:	e0003003 	and	r3, r0, r3
    76c8:	e1a0ca43 	mov	ip, r3, asr #20
    76cc:	e35c0000 	cmp	ip, #0	; 0x0
    76d0:	e92d41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    76d4:	e1a06000 	mov	r6, r0
    76d8:	e1a07001 	mov	r7, r1
    76dc:	e1a05001 	mov	r5, r1
    76e0:	e1a0e000 	mov	lr, r0
    76e4:	e1a08002 	mov	r8, r2
    76e8:	e1a04001 	mov	r4, r1
    76ec:	1a000012 	bne	773c <scalbn+0x7c>
    76f0:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
    76f4:	e1944003 	orrs	r4, r4, r3
    76f8:	0a000045 	beq	7814 <scalbn+0x154>
    76fc:	e3a03000 	mov	r3, #0	; 0x0
    7700:	e59f211c 	ldr	r2, [pc, #284]	; 7824 <.text+0x7824>
    7704:	eb000222 	bl	7f94 <__aeabi_dmul>
    7708:	e59f3118 	ldr	r3, [pc, #280]	; 7828 <.text+0x7828>
    770c:	e1a07001 	mov	r7, r1
    7710:	e1580003 	cmp	r8, r3
    7714:	e1a06000 	mov	r6, r0
    7718:	e1a01000 	mov	r1, r0
    771c:	b1a00006 	movlt	r0, r6
    7720:	b1a01007 	movlt	r1, r7
    7724:	ba00002b 	blt	77d8 <scalbn+0x118>
    7728:	e59f30f0 	ldr	r3, [pc, #240]	; 7820 <.text+0x7820>
    772c:	e0013003 	and	r3, r1, r3
    7730:	e1a03a43 	mov	r3, r3, asr #20
    7734:	e1a0e001 	mov	lr, r1
    7738:	e243c036 	sub	ip, r3, #54	; 0x36
    773c:	e59f30e8 	ldr	r3, [pc, #232]	; 782c <.text+0x782c>
    7740:	e15c0003 	cmp	ip, r3
    7744:	1a000005 	bne	7760 <scalbn+0xa0>
    7748:	e1a00006 	mov	r0, r6
    774c:	e1a01007 	mov	r1, r7
    7750:	e1a02006 	mov	r2, r6
    7754:	e1a03007 	mov	r3, r7
    7758:	eb000110 	bl	7ba0 <__adddf3>
    775c:	ea00002a 	b	780c <scalbn+0x14c>
    7760:	e59f30c8 	ldr	r3, [pc, #200]	; 7830 <.text+0x7830>
    7764:	e08c1008 	add	r1, ip, r8
    7768:	e1510003 	cmp	r1, r3
    776c:	ca00000c 	bgt	77a4 <scalbn+0xe4>
    7770:	e3510000 	cmp	r1, #0	; 0x0
    7774:	da000005 	ble	7790 <scalbn+0xd0>
    7778:	e3ce247f 	bic	r2, lr, #2130706432	; 0x7f000000
    777c:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
    7780:	e1823a01 	orr	r3, r2, r1, lsl #20
    7784:	e1a04007 	mov	r4, r7
    7788:	e1a06003 	mov	r6, r3
    778c:	ea000020 	b	7814 <scalbn+0x154>
    7790:	e3710036 	cmn	r1, #54	; 0x36
    7794:	ca000012 	bgt	77e4 <scalbn+0x124>
    7798:	e59f3094 	ldr	r3, [pc, #148]	; 7834 <.text+0x7834>
    779c:	e1580003 	cmp	r8, r3
    77a0:	da000007 	ble	77c4 <scalbn+0x104>
    77a4:	e1a02006 	mov	r2, r6
    77a8:	e1a03007 	mov	r3, r7
    77ac:	e59f0084 	ldr	r0, [pc, #132]	; 7838 <.text+0x7838>
    77b0:	e59f1084 	ldr	r1, [pc, #132]	; 783c <.text+0x783c>
    77b4:	eb000024 	bl	784c <copysign>
    77b8:	e59f2078 	ldr	r2, [pc, #120]	; 7838 <.text+0x7838>
    77bc:	e59f3078 	ldr	r3, [pc, #120]	; 783c <.text+0x783c>
    77c0:	ea000010 	b	7808 <scalbn+0x148>
    77c4:	e1a02006 	mov	r2, r6
    77c8:	e1a03007 	mov	r3, r7
    77cc:	e59f006c 	ldr	r0, [pc, #108]	; 7840 <.text+0x7840>
    77d0:	e59f106c 	ldr	r1, [pc, #108]	; 7844 <.text+0x7844>
    77d4:	eb00001c 	bl	784c <copysign>
    77d8:	e59f2060 	ldr	r2, [pc, #96]	; 7840 <.text+0x7840>
    77dc:	e59f3060 	ldr	r3, [pc, #96]	; 7844 <.text+0x7844>
    77e0:	ea000008 	b	7808 <scalbn+0x148>
    77e4:	e3ce247f 	bic	r2, lr, #2130706432	; 0x7f000000
    77e8:	e3c2260f 	bic	r2, r2, #15728640	; 0xf00000
    77ec:	e2811036 	add	r1, r1, #54	; 0x36
    77f0:	e1823a01 	orr	r3, r2, r1, lsl #20
    77f4:	e59f204c 	ldr	r2, [pc, #76]	; 7848 <.text+0x7848>
    77f8:	e1a00003 	mov	r0, r3
    77fc:	e1a04007 	mov	r4, r7
    7800:	e1a01007 	mov	r1, r7
    7804:	e3a03000 	mov	r3, #0	; 0x0
    7808:	eb0001e1 	bl	7f94 <__aeabi_dmul>
    780c:	e1a06000 	mov	r6, r0
    7810:	e1a07001 	mov	r7, r1
    7814:	e1a00006 	mov	r0, r6
    7818:	e1a01007 	mov	r1, r7
    781c:	e8bd81f0 	ldmia	sp!, {r4, r5, r6, r7, r8, pc}
    7820:	7ff00000 	svcvc	0x00f00000	; IMB
    7824:	43500000 	cmpmi	r0, #0	; 0x0
    7828:	ffff3cb0 	undefined instruction 0xffff3cb0
    782c:	000007ff 	streqd	r0, [r0], -pc
    7830:	000007fe 	streqd	r0, [r0], -lr
    7834:	0000c350 	andeq	ip, r0, r0, asr r3
    7838:	7e37e43c 	mrcvc	4, 1, lr, cr7, cr12, {1}
    783c:	8800759c 	stmhida	r0, {r2, r3, r4, r7, r8, sl, ip, sp, lr}
    7840:	01a56e1f 	moveq	r6, pc, lsl lr
    7844:	c2f8f359 	rscgts	pc, r8, #1677721601	; 0x64000001
    7848:	3c900000 	ldccc	0, cr0, [r0], {0}

0000784c <copysign>:
    784c:	e92d4010 	stmdb	sp!, {r4, lr}
    7850:	e3c03102 	bic	r3, r0, #-2147483648	; 0x80000000
    7854:	e2022102 	and	r2, r2, #-2147483648	; 0x80000000
    7858:	e1a04001 	mov	r4, r1
    785c:	e1830002 	orr	r0, r3, r2
    7860:	e8bd8010 	ldmia	sp!, {r4, pc}

00007864 <__errno>:
    7864:	e59f3004 	ldr	r3, [pc, #4]	; 7870 <.text+0x7870>
    7868:	e5930000 	ldr	r0, [r3]
    786c:	e12fff1e 	bx	lr
    7870:	4000000c 	andmi	r0, r0, ip

00007874 <__aeabi_uidiv>:
    7874:	e2512001 	subs	r2, r1, #1	; 0x1
    7878:	012fff1e 	bxeq	lr
    787c:	3a000036 	bcc	795c <__aeabi_uidiv+0xe8>
    7880:	e1500001 	cmp	r0, r1
    7884:	9a000022 	bls	7914 <__aeabi_uidiv+0xa0>
    7888:	e1110002 	tst	r1, r2
    788c:	0a000023 	beq	7920 <__aeabi_uidiv+0xac>
    7890:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    7894:	01a01181 	moveq	r1, r1, lsl #3
    7898:	03a03008 	moveq	r3, #8	; 0x8
    789c:	13a03001 	movne	r3, #1	; 0x1
    78a0:	e3510201 	cmp	r1, #268435456	; 0x10000000
    78a4:	31510000 	cmpcc	r1, r0
    78a8:	31a01201 	movcc	r1, r1, lsl #4
    78ac:	31a03203 	movcc	r3, r3, lsl #4
    78b0:	3afffffa 	bcc	78a0 <__aeabi_uidiv+0x2c>
    78b4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    78b8:	31510000 	cmpcc	r1, r0
    78bc:	31a01081 	movcc	r1, r1, lsl #1
    78c0:	31a03083 	movcc	r3, r3, lsl #1
    78c4:	3afffffa 	bcc	78b4 <__aeabi_uidiv+0x40>
    78c8:	e3a02000 	mov	r2, #0	; 0x0
    78cc:	e1500001 	cmp	r0, r1
    78d0:	20400001 	subcs	r0, r0, r1
    78d4:	21822003 	orrcs	r2, r2, r3
    78d8:	e15000a1 	cmp	r0, r1, lsr #1
    78dc:	204000a1 	subcs	r0, r0, r1, lsr #1
    78e0:	218220a3 	orrcs	r2, r2, r3, lsr #1
    78e4:	e1500121 	cmp	r0, r1, lsr #2
    78e8:	20400121 	subcs	r0, r0, r1, lsr #2
    78ec:	21822123 	orrcs	r2, r2, r3, lsr #2
    78f0:	e15001a1 	cmp	r0, r1, lsr #3
    78f4:	204001a1 	subcs	r0, r0, r1, lsr #3
    78f8:	218221a3 	orrcs	r2, r2, r3, lsr #3
    78fc:	e3500000 	cmp	r0, #0	; 0x0
    7900:	11b03223 	movnes	r3, r3, lsr #4
    7904:	11a01221 	movne	r1, r1, lsr #4
    7908:	1affffef 	bne	78cc <__aeabi_uidiv+0x58>
    790c:	e1a00002 	mov	r0, r2
    7910:	e12fff1e 	bx	lr
    7914:	03a00001 	moveq	r0, #1	; 0x1
    7918:	13a00000 	movne	r0, #0	; 0x0
    791c:	e12fff1e 	bx	lr
    7920:	e3510801 	cmp	r1, #65536	; 0x10000
    7924:	21a01821 	movcs	r1, r1, lsr #16
    7928:	23a02010 	movcs	r2, #16	; 0x10
    792c:	33a02000 	movcc	r2, #0	; 0x0
    7930:	e3510c01 	cmp	r1, #256	; 0x100
    7934:	21a01421 	movcs	r1, r1, lsr #8
    7938:	22822008 	addcs	r2, r2, #8	; 0x8
    793c:	e3510010 	cmp	r1, #16	; 0x10
    7940:	21a01221 	movcs	r1, r1, lsr #4
    7944:	22822004 	addcs	r2, r2, #4	; 0x4
    7948:	e3510004 	cmp	r1, #4	; 0x4
    794c:	82822003 	addhi	r2, r2, #3	; 0x3
    7950:	908220a1 	addls	r2, r2, r1, lsr #1
    7954:	e1a00230 	mov	r0, r0, lsr r2
    7958:	e12fff1e 	bx	lr
    795c:	e52de008 	str	lr, [sp, #-8]!
    7960:	eb00008a 	bl	7b90 <__aeabi_idiv0>
    7964:	e3a00000 	mov	r0, #0	; 0x0
    7968:	e49df008 	ldr	pc, [sp], #8

0000796c <__aeabi_uidivmod>:
    796c:	e92d4003 	stmdb	sp!, {r0, r1, lr}
    7970:	ebffffbf 	bl	7874 <__aeabi_uidiv>
    7974:	e8bd4006 	ldmia	sp!, {r1, r2, lr}
    7978:	e0030092 	mul	r3, r2, r0
    797c:	e0411003 	sub	r1, r1, r3
    7980:	e12fff1e 	bx	lr

00007984 <__aeabi_idiv>:
    7984:	e3510000 	cmp	r1, #0	; 0x0
    7988:	e020c001 	eor	ip, r0, r1
    798c:	0a000042 	beq	7a9c <__aeabi_idiv+0x118>
    7990:	42611000 	rsbmi	r1, r1, #0	; 0x0
    7994:	e2512001 	subs	r2, r1, #1	; 0x1
    7998:	0a000027 	beq	7a3c <__aeabi_idiv+0xb8>
    799c:	e1b03000 	movs	r3, r0
    79a0:	42603000 	rsbmi	r3, r0, #0	; 0x0
    79a4:	e1530001 	cmp	r3, r1
    79a8:	9a000026 	bls	7a48 <__aeabi_idiv+0xc4>
    79ac:	e1110002 	tst	r1, r2
    79b0:	0a000028 	beq	7a58 <__aeabi_idiv+0xd4>
    79b4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    79b8:	01a01181 	moveq	r1, r1, lsl #3
    79bc:	03a02008 	moveq	r2, #8	; 0x8
    79c0:	13a02001 	movne	r2, #1	; 0x1
    79c4:	e3510201 	cmp	r1, #268435456	; 0x10000000
    79c8:	31510003 	cmpcc	r1, r3
    79cc:	31a01201 	movcc	r1, r1, lsl #4
    79d0:	31a02202 	movcc	r2, r2, lsl #4
    79d4:	3afffffa 	bcc	79c4 <__aeabi_idiv+0x40>
    79d8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    79dc:	31510003 	cmpcc	r1, r3
    79e0:	31a01081 	movcc	r1, r1, lsl #1
    79e4:	31a02082 	movcc	r2, r2, lsl #1
    79e8:	3afffffa 	bcc	79d8 <__aeabi_idiv+0x54>
    79ec:	e3a00000 	mov	r0, #0	; 0x0
    79f0:	e1530001 	cmp	r3, r1
    79f4:	20433001 	subcs	r3, r3, r1
    79f8:	21800002 	orrcs	r0, r0, r2
    79fc:	e15300a1 	cmp	r3, r1, lsr #1
    7a00:	204330a1 	subcs	r3, r3, r1, lsr #1
    7a04:	218000a2 	orrcs	r0, r0, r2, lsr #1
    7a08:	e1530121 	cmp	r3, r1, lsr #2
    7a0c:	20433121 	subcs	r3, r3, r1, lsr #2
    7a10:	21800122 	orrcs	r0, r0, r2, lsr #2
    7a14:	e15301a1 	cmp	r3, r1, lsr #3
    7a18:	204331a1 	subcs	r3, r3, r1, lsr #3
    7a1c:	218001a2 	orrcs	r0, r0, r2, lsr #3
    7a20:	e3530000 	cmp	r3, #0	; 0x0
    7a24:	11b02222 	movnes	r2, r2, lsr #4
    7a28:	11a01221 	movne	r1, r1, lsr #4
    7a2c:	1affffef 	bne	79f0 <__aeabi_idiv+0x6c>
    7a30:	e35c0000 	cmp	ip, #0	; 0x0
    7a34:	42600000 	rsbmi	r0, r0, #0	; 0x0
    7a38:	e12fff1e 	bx	lr
    7a3c:	e13c0000 	teq	ip, r0
    7a40:	42600000 	rsbmi	r0, r0, #0	; 0x0
    7a44:	e12fff1e 	bx	lr
    7a48:	33a00000 	movcc	r0, #0	; 0x0
    7a4c:	01a00fcc 	moveq	r0, ip, asr #31
    7a50:	03800001 	orreq	r0, r0, #1	; 0x1
    7a54:	e12fff1e 	bx	lr
    7a58:	e3510801 	cmp	r1, #65536	; 0x10000
    7a5c:	21a01821 	movcs	r1, r1, lsr #16
    7a60:	23a02010 	movcs	r2, #16	; 0x10
    7a64:	33a02000 	movcc	r2, #0	; 0x0
    7a68:	e3510c01 	cmp	r1, #256	; 0x100
    7a6c:	21a01421 	movcs	r1, r1, lsr #8
    7a70:	22822008 	addcs	r2, r2, #8	; 0x8
    7a74:	e3510010 	cmp	r1, #16	; 0x10
    7a78:	21a01221 	movcs	r1, r1, lsr #4
    7a7c:	22822004 	addcs	r2, r2, #4	; 0x4
    7a80:	e3510004 	cmp	r1, #4	; 0x4
    7a84:	82822003 	addhi	r2, r2, #3	; 0x3
    7a88:	908220a1 	addls	r2, r2, r1, lsr #1
    7a8c:	e35c0000 	cmp	ip, #0	; 0x0
    7a90:	e1a00233 	mov	r0, r3, lsr r2
    7a94:	42600000 	rsbmi	r0, r0, #0	; 0x0
    7a98:	e12fff1e 	bx	lr
    7a9c:	e52de008 	str	lr, [sp, #-8]!
    7aa0:	eb00003a 	bl	7b90 <__aeabi_idiv0>
    7aa4:	e3a00000 	mov	r0, #0	; 0x0
    7aa8:	e49df008 	ldr	pc, [sp], #8

00007aac <__aeabi_idivmod>:
    7aac:	e92d4003 	stmdb	sp!, {r0, r1, lr}
    7ab0:	ebffffb3 	bl	7984 <__aeabi_idiv>
    7ab4:	e8bd4006 	ldmia	sp!, {r1, r2, lr}
    7ab8:	e0030092 	mul	r3, r2, r0
    7abc:	e0411003 	sub	r1, r1, r3
    7ac0:	e12fff1e 	bx	lr

00007ac4 <__umodsi3>:
    7ac4:	e2512001 	subs	r2, r1, #1	; 0x1
    7ac8:	3a00002c 	bcc	7b80 <__umodsi3+0xbc>
    7acc:	11500001 	cmpne	r0, r1
    7ad0:	03a00000 	moveq	r0, #0	; 0x0
    7ad4:	81110002 	tsthi	r1, r2
    7ad8:	00000002 	andeq	r0, r0, r2
    7adc:	912fff1e 	bxls	lr
    7ae0:	e3a02000 	mov	r2, #0	; 0x0
    7ae4:	e3510201 	cmp	r1, #268435456	; 0x10000000
    7ae8:	31510000 	cmpcc	r1, r0
    7aec:	31a01201 	movcc	r1, r1, lsl #4
    7af0:	32822004 	addcc	r2, r2, #4	; 0x4
    7af4:	3afffffa 	bcc	7ae4 <__umodsi3+0x20>
    7af8:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    7afc:	31510000 	cmpcc	r1, r0
    7b00:	31a01081 	movcc	r1, r1, lsl #1
    7b04:	32822001 	addcc	r2, r2, #1	; 0x1
    7b08:	3afffffa 	bcc	7af8 <__umodsi3+0x34>
    7b0c:	e2522003 	subs	r2, r2, #3	; 0x3
    7b10:	ba00000e 	blt	7b50 <__umodsi3+0x8c>
    7b14:	e1500001 	cmp	r0, r1
    7b18:	20400001 	subcs	r0, r0, r1
    7b1c:	e15000a1 	cmp	r0, r1, lsr #1
    7b20:	204000a1 	subcs	r0, r0, r1, lsr #1
    7b24:	e1500121 	cmp	r0, r1, lsr #2
    7b28:	20400121 	subcs	r0, r0, r1, lsr #2
    7b2c:	e15001a1 	cmp	r0, r1, lsr #3
    7b30:	204001a1 	subcs	r0, r0, r1, lsr #3
    7b34:	e3500001 	cmp	r0, #1	; 0x1
    7b38:	e1a01221 	mov	r1, r1, lsr #4
    7b3c:	a2522004 	subges	r2, r2, #4	; 0x4
    7b40:	aafffff3 	bge	7b14 <__umodsi3+0x50>
    7b44:	e3120003 	tst	r2, #3	; 0x3
    7b48:	13300000 	teqne	r0, #0	; 0x0
    7b4c:	0a00000a 	beq	7b7c <__umodsi3+0xb8>
    7b50:	e3720002 	cmn	r2, #2	; 0x2
    7b54:	ba000006 	blt	7b74 <__umodsi3+0xb0>
    7b58:	0a000002 	beq	7b68 <__umodsi3+0xa4>
    7b5c:	e1500001 	cmp	r0, r1
    7b60:	20400001 	subcs	r0, r0, r1
    7b64:	e1a010a1 	mov	r1, r1, lsr #1
    7b68:	e1500001 	cmp	r0, r1
    7b6c:	20400001 	subcs	r0, r0, r1
    7b70:	e1a010a1 	mov	r1, r1, lsr #1
    7b74:	e1500001 	cmp	r0, r1
    7b78:	20400001 	subcs	r0, r0, r1
    7b7c:	e12fff1e 	bx	lr
    7b80:	e52de008 	str	lr, [sp, #-8]!
    7b84:	eb000001 	bl	7b90 <__aeabi_idiv0>
    7b88:	e3a00000 	mov	r0, #0	; 0x0
    7b8c:	e49df008 	ldr	pc, [sp], #8

00007b90 <__aeabi_idiv0>:
    7b90:	e12fff1e 	bx	lr

00007b94 <__aeabi_drsub>:
    7b94:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    7b98:	ea000000 	b	7ba0 <__adddf3>

00007b9c <__aeabi_dsub>:
    7b9c:	e2222102 	eor	r2, r2, #-2147483648	; 0x80000000

00007ba0 <__adddf3>:
    7ba0:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7ba4:	e1a04080 	mov	r4, r0, lsl #1
    7ba8:	e1a05082 	mov	r5, r2, lsl #1
    7bac:	e1340005 	teq	r4, r5
    7bb0:	01310003 	teqeq	r1, r3
    7bb4:	1194c001 	orrnes	ip, r4, r1
    7bb8:	1195c003 	orrnes	ip, r5, r3
    7bbc:	11f0cac4 	mvnnes	ip, r4, asr #21
    7bc0:	11f0cac5 	mvnnes	ip, r5, asr #21
    7bc4:	0a000086 	beq	7de4 <__adddf3+0x244>
    7bc8:	e1a04aa4 	mov	r4, r4, lsr #21
    7bcc:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    7bd0:	b2655000 	rsblt	r5, r5, #0	; 0x0
    7bd4:	da000006 	ble	7bf4 <__adddf3+0x54>
    7bd8:	e0844005 	add	r4, r4, r5
    7bdc:	e0213003 	eor	r3, r1, r3
    7be0:	e0202002 	eor	r2, r0, r2
    7be4:	e0231001 	eor	r1, r3, r1
    7be8:	e0220000 	eor	r0, r2, r0
    7bec:	e0213003 	eor	r3, r1, r3
    7bf0:	e0202002 	eor	r2, r0, r2
    7bf4:	e3550036 	cmp	r5, #54	; 0x36
    7bf8:	88bd8030 	ldmhiia	sp!, {r4, r5, pc}
    7bfc:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    7c00:	e1a00600 	mov	r0, r0, lsl #12
    7c04:	e3a0c601 	mov	ip, #1048576	; 0x100000
    7c08:	e18c0620 	orr	r0, ip, r0, lsr #12
    7c0c:	0a000001 	beq	7c18 <__adddf3+0x78>
    7c10:	e2711000 	rsbs	r1, r1, #0	; 0x0
    7c14:	e2e00000 	rsc	r0, r0, #0	; 0x0
    7c18:	e3120102 	tst	r2, #-2147483648	; 0x80000000
    7c1c:	e1a02602 	mov	r2, r2, lsl #12
    7c20:	e18c2622 	orr	r2, ip, r2, lsr #12
    7c24:	0a000001 	beq	7c30 <__adddf3+0x90>
    7c28:	e2733000 	rsbs	r3, r3, #0	; 0x0
    7c2c:	e2e22000 	rsc	r2, r2, #0	; 0x0
    7c30:	e1340005 	teq	r4, r5
    7c34:	0a000064 	beq	7dcc <__adddf3+0x22c>
    7c38:	e2444001 	sub	r4, r4, #1	; 0x1
    7c3c:	e275e020 	rsbs	lr, r5, #32	; 0x20
    7c40:	ba000005 	blt	7c5c <__adddf3+0xbc>
    7c44:	e1a0ce13 	mov	ip, r3, lsl lr
    7c48:	e0911533 	adds	r1, r1, r3, lsr r5
    7c4c:	e2a00000 	adc	r0, r0, #0	; 0x0
    7c50:	e0911e12 	adds	r1, r1, r2, lsl lr
    7c54:	e0b00552 	adcs	r0, r0, r2, asr r5
    7c58:	ea000006 	b	7c78 <__adddf3+0xd8>
    7c5c:	e2455020 	sub	r5, r5, #32	; 0x20
    7c60:	e28ee020 	add	lr, lr, #32	; 0x20
    7c64:	e3530001 	cmp	r3, #1	; 0x1
    7c68:	e1a0ce12 	mov	ip, r2, lsl lr
    7c6c:	238cc002 	orrcs	ip, ip, #2	; 0x2
    7c70:	e0911552 	adds	r1, r1, r2, asr r5
    7c74:	e0b00fc2 	adcs	r0, r0, r2, asr #31
    7c78:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    7c7c:	5a000002 	bpl	7c8c <__adddf3+0xec>
    7c80:	e27cc000 	rsbs	ip, ip, #0	; 0x0
    7c84:	e2f11000 	rscs	r1, r1, #0	; 0x0
    7c88:	e2e00000 	rsc	r0, r0, #0	; 0x0
    7c8c:	e3500601 	cmp	r0, #1048576	; 0x100000
    7c90:	3a00000e 	bcc	7cd0 <__adddf3+0x130>
    7c94:	e3500602 	cmp	r0, #2097152	; 0x200000
    7c98:	3a000006 	bcc	7cb8 <__adddf3+0x118>
    7c9c:	e1b000a0 	movs	r0, r0, lsr #1
    7ca0:	e1b01061 	movs	r1, r1, rrx
    7ca4:	e1a0c06c 	mov	ip, ip, rrx
    7ca8:	e2844001 	add	r4, r4, #1	; 0x1
    7cac:	e1a02a84 	mov	r2, r4, lsl #21
    7cb0:	e3720501 	cmn	r2, #4194304	; 0x400000
    7cb4:	2a000062 	bcs	7e44 <__adddf3+0x2a4>
    7cb8:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    7cbc:	01b0c0a1 	moveqs	ip, r1, lsr #1
    7cc0:	e2b11000 	adcs	r1, r1, #0	; 0x0
    7cc4:	e0a00a04 	adc	r0, r0, r4, lsl #20
    7cc8:	e1800005 	orr	r0, r0, r5
    7ccc:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    7cd0:	e1b0c08c 	movs	ip, ip, lsl #1
    7cd4:	e0b11001 	adcs	r1, r1, r1
    7cd8:	e0a00000 	adc	r0, r0, r0
    7cdc:	e3100601 	tst	r0, #1048576	; 0x100000
    7ce0:	e2444001 	sub	r4, r4, #1	; 0x1
    7ce4:	1afffff3 	bne	7cb8 <__adddf3+0x118>
    7ce8:	e3300000 	teq	r0, #0	; 0x0
    7cec:	13a03014 	movne	r3, #20	; 0x14
    7cf0:	03a03034 	moveq	r3, #52	; 0x34
    7cf4:	01a00001 	moveq	r0, r1
    7cf8:	03a01000 	moveq	r1, #0	; 0x0
    7cfc:	e1a02000 	mov	r2, r0
    7d00:	e3520801 	cmp	r2, #65536	; 0x10000
    7d04:	21a02822 	movcs	r2, r2, lsr #16
    7d08:	22433010 	subcs	r3, r3, #16	; 0x10
    7d0c:	e3520c01 	cmp	r2, #256	; 0x100
    7d10:	21a02422 	movcs	r2, r2, lsr #8
    7d14:	22433008 	subcs	r3, r3, #8	; 0x8
    7d18:	e3520010 	cmp	r2, #16	; 0x10
    7d1c:	21a02222 	movcs	r2, r2, lsr #4
    7d20:	22433004 	subcs	r3, r3, #4	; 0x4
    7d24:	e3520004 	cmp	r2, #4	; 0x4
    7d28:	22433002 	subcs	r3, r3, #2	; 0x2
    7d2c:	304330a2 	subcc	r3, r3, r2, lsr #1
    7d30:	e04331a2 	sub	r3, r3, r2, lsr #3
    7d34:	e2532020 	subs	r2, r3, #32	; 0x20
    7d38:	aa000007 	bge	7d5c <__adddf3+0x1bc>
    7d3c:	e292200c 	adds	r2, r2, #12	; 0xc
    7d40:	da000004 	ble	7d58 <__adddf3+0x1b8>
    7d44:	e282c014 	add	ip, r2, #20	; 0x14
    7d48:	e262200c 	rsb	r2, r2, #12	; 0xc
    7d4c:	e1a01c10 	mov	r1, r0, lsl ip
    7d50:	e1a00230 	mov	r0, r0, lsr r2
    7d54:	ea000004 	b	7d6c <__adddf3+0x1cc>
    7d58:	e2822014 	add	r2, r2, #20	; 0x14
    7d5c:	d262c020 	rsble	ip, r2, #32	; 0x20
    7d60:	e1a00210 	mov	r0, r0, lsl r2
    7d64:	d1800c31 	orrle	r0, r0, r1, lsr ip
    7d68:	d1a01211 	movle	r1, r1, lsl r2
    7d6c:	e0544003 	subs	r4, r4, r3
    7d70:	a0800a04 	addge	r0, r0, r4, lsl #20
    7d74:	a1800005 	orrge	r0, r0, r5
    7d78:	a8bd8030 	ldmgeia	sp!, {r4, r5, pc}
    7d7c:	e1e04004 	mvn	r4, r4
    7d80:	e254401f 	subs	r4, r4, #31	; 0x1f
    7d84:	aa00000d 	bge	7dc0 <__adddf3+0x220>
    7d88:	e294400c 	adds	r4, r4, #12	; 0xc
    7d8c:	ca000005 	bgt	7da8 <__adddf3+0x208>
    7d90:	e2844014 	add	r4, r4, #20	; 0x14
    7d94:	e2642020 	rsb	r2, r4, #32	; 0x20
    7d98:	e1a01431 	mov	r1, r1, lsr r4
    7d9c:	e1811210 	orr	r1, r1, r0, lsl r2
    7da0:	e1850430 	orr	r0, r5, r0, lsr r4
    7da4:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    7da8:	e264400c 	rsb	r4, r4, #12	; 0xc
    7dac:	e2642020 	rsb	r2, r4, #32	; 0x20
    7db0:	e1a01231 	mov	r1, r1, lsr r2
    7db4:	e1811410 	orr	r1, r1, r0, lsl r4
    7db8:	e1a00005 	mov	r0, r5
    7dbc:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    7dc0:	e1a01430 	mov	r1, r0, lsr r4
    7dc4:	e1a00005 	mov	r0, r5
    7dc8:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    7dcc:	e3340000 	teq	r4, #0	; 0x0
    7dd0:	e2222601 	eor	r2, r2, #1048576	; 0x100000
    7dd4:	02200601 	eoreq	r0, r0, #1048576	; 0x100000
    7dd8:	02844001 	addeq	r4, r4, #1	; 0x1
    7ddc:	12455001 	subne	r5, r5, #1	; 0x1
    7de0:	eaffff94 	b	7c38 <__adddf3+0x98>
    7de4:	e1f0cac4 	mvns	ip, r4, asr #21
    7de8:	11f0cac5 	mvnnes	ip, r5, asr #21
    7dec:	0a000018 	beq	7e54 <__adddf3+0x2b4>
    7df0:	e1340005 	teq	r4, r5
    7df4:	01310003 	teqeq	r1, r3
    7df8:	0a000003 	beq	7e0c <__adddf3+0x26c>
    7dfc:	e3340000 	teq	r4, #0	; 0x0
    7e00:	01a00002 	moveq	r0, r2
    7e04:	01a01003 	moveq	r1, r3
    7e08:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    7e0c:	e1300002 	teq	r0, r2
    7e10:	13a00000 	movne	r0, #0	; 0x0
    7e14:	13a01000 	movne	r1, #0	; 0x0
    7e18:	18bd8030 	ldmneia	sp!, {r4, r5, pc}
    7e1c:	e1b0caa4 	movs	ip, r4, lsr #21
    7e20:	1a000003 	bne	7e34 <__adddf3+0x294>
    7e24:	e1b01081 	movs	r1, r1, lsl #1
    7e28:	e0b00000 	adcs	r0, r0, r0
    7e2c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    7e30:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    7e34:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    7e38:	32800601 	addcc	r0, r0, #1048576	; 0x100000
    7e3c:	38bd8030 	ldmccia	sp!, {r4, r5, pc}
    7e40:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    7e44:	e385047f 	orr	r0, r5, #2130706432	; 0x7f000000
    7e48:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
    7e4c:	e3a01000 	mov	r1, #0	; 0x0
    7e50:	e8bd8030 	ldmia	sp!, {r4, r5, pc}
    7e54:	e1f0cac4 	mvns	ip, r4, asr #21
    7e58:	11a00002 	movne	r0, r2
    7e5c:	11a01003 	movne	r1, r3
    7e60:	01f0cac5 	mvneqs	ip, r5, asr #21
    7e64:	11a02000 	movne	r2, r0
    7e68:	11a03001 	movne	r3, r1
    7e6c:	e1914600 	orrs	r4, r1, r0, lsl #12
    7e70:	01935602 	orreqs	r5, r3, r2, lsl #12
    7e74:	01300002 	teqeq	r0, r2
    7e78:	13800702 	orrne	r0, r0, #524288	; 0x80000
    7e7c:	e8bd8030 	ldmia	sp!, {r4, r5, pc}

00007e80 <__aeabi_ui2d>:
    7e80:	e3300000 	teq	r0, #0	; 0x0
    7e84:	03a01000 	moveq	r1, #0	; 0x0
    7e88:	012fff1e 	bxeq	lr
    7e8c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7e90:	e3a04b01 	mov	r4, #1024	; 0x400
    7e94:	e2844032 	add	r4, r4, #50	; 0x32
    7e98:	e3a05000 	mov	r5, #0	; 0x0
    7e9c:	e1a01000 	mov	r1, r0
    7ea0:	e3a00000 	mov	r0, #0	; 0x0
    7ea4:	eaffff8f 	b	7ce8 <__adddf3+0x148>

00007ea8 <__aeabi_i2d>:
    7ea8:	e3300000 	teq	r0, #0	; 0x0
    7eac:	03a01000 	moveq	r1, #0	; 0x0
    7eb0:	012fff1e 	bxeq	lr
    7eb4:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7eb8:	e3a04b01 	mov	r4, #1024	; 0x400
    7ebc:	e2844032 	add	r4, r4, #50	; 0x32
    7ec0:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    7ec4:	42600000 	rsbmi	r0, r0, #0	; 0x0
    7ec8:	e1a01000 	mov	r1, r0
    7ecc:	e3a00000 	mov	r0, #0	; 0x0
    7ed0:	eaffff84 	b	7ce8 <__adddf3+0x148>

00007ed4 <__aeabi_f2d>:
    7ed4:	e1b02080 	movs	r2, r0, lsl #1
    7ed8:	e1a001c2 	mov	r0, r2, asr #3
    7edc:	e1a00060 	mov	r0, r0, rrx
    7ee0:	e1a01e02 	mov	r1, r2, lsl #28
    7ee4:	121234ff 	andnes	r3, r2, #-16777216	; 0xff000000
    7ee8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    7eec:	1220030e 	eorne	r0, r0, #939524096	; 0x38000000
    7ef0:	112fff1e 	bxne	lr
    7ef4:	e3320000 	teq	r2, #0	; 0x0
    7ef8:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    7efc:	012fff1e 	bxeq	lr
    7f00:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7f04:	e3a04d0e 	mov	r4, #896	; 0x380
    7f08:	e2005102 	and	r5, r0, #-2147483648	; 0x80000000
    7f0c:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    7f10:	eaffff74 	b	7ce8 <__adddf3+0x148>

00007f14 <__aeabi_ul2d>:
    7f14:	e1902001 	orrs	r2, r0, r1
    7f18:	012fff1e 	bxeq	lr
    7f1c:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7f20:	e3a05000 	mov	r5, #0	; 0x0
    7f24:	ea000006 	b	7f44 <__aeabi_l2d+0x1c>

00007f28 <__aeabi_l2d>:
    7f28:	e1902001 	orrs	r2, r0, r1
    7f2c:	012fff1e 	bxeq	lr
    7f30:	e92d4030 	stmdb	sp!, {r4, r5, lr}
    7f34:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    7f38:	5a000001 	bpl	7f44 <__aeabi_l2d+0x1c>
    7f3c:	e2700000 	rsbs	r0, r0, #0	; 0x0
    7f40:	e2e11000 	rsc	r1, r1, #0	; 0x0
    7f44:	e3a04b01 	mov	r4, #1024	; 0x400
    7f48:	e2844032 	add	r4, r4, #50	; 0x32
    7f4c:	e1a0c000 	mov	ip, r0
    7f50:	e1a00001 	mov	r0, r1
    7f54:	e1a0100c 	mov	r1, ip
    7f58:	e1b0cb20 	movs	ip, r0, lsr #22
    7f5c:	0affff4a 	beq	7c8c <__adddf3+0xec>
    7f60:	e3a02003 	mov	r2, #3	; 0x3
    7f64:	e1b0c1ac 	movs	ip, ip, lsr #3
    7f68:	12822003 	addne	r2, r2, #3	; 0x3
    7f6c:	e1b0c1ac 	movs	ip, ip, lsr #3
    7f70:	12822003 	addne	r2, r2, #3	; 0x3
    7f74:	e08221ac 	add	r2, r2, ip, lsr #3
    7f78:	e2623020 	rsb	r3, r2, #32	; 0x20
    7f7c:	e1a0c311 	mov	ip, r1, lsl r3
    7f80:	e1a01231 	mov	r1, r1, lsr r2
    7f84:	e1811310 	orr	r1, r1, r0, lsl r3
    7f88:	e1a00230 	mov	r0, r0, lsr r2
    7f8c:	e0844002 	add	r4, r4, r2
    7f90:	eaffff3d 	b	7c8c <__adddf3+0xec>

00007f94 <__aeabi_dmul>:
    7f94:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    7f98:	e3a0c0ff 	mov	ip, #255	; 0xff
    7f9c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    7fa0:	e01c4a20 	ands	r4, ip, r0, lsr #20
    7fa4:	101c5a22 	andnes	r5, ip, r2, lsr #20
    7fa8:	1134000c 	teqne	r4, ip
    7fac:	1135000c 	teqne	r5, ip
    7fb0:	0b00006f 	bleq	8174 <__aeabi_dmul+0x1e0>
    7fb4:	e0844005 	add	r4, r4, r5
    7fb8:	e0206002 	eor	r6, r0, r2
    7fbc:	e1c00a8c 	bic	r0, r0, ip, lsl #21
    7fc0:	e1c22a8c 	bic	r2, r2, ip, lsl #21
    7fc4:	e1915600 	orrs	r5, r1, r0, lsl #12
    7fc8:	11935602 	orrnes	r5, r3, r2, lsl #12
    7fcc:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    7fd0:	e3822601 	orr	r2, r2, #1048576	; 0x100000
    7fd4:	0a00001c 	beq	804c <__aeabi_dmul+0xb8>
    7fd8:	e08ec391 	umull	ip, lr, r1, r3
    7fdc:	e3a05000 	mov	r5, #0	; 0x0
    7fe0:	e0a5e390 	umlal	lr, r5, r0, r3
    7fe4:	e2063102 	and	r3, r6, #-2147483648	; 0x80000000
    7fe8:	e0a5e291 	umlal	lr, r5, r1, r2
    7fec:	e3a06000 	mov	r6, #0	; 0x0
    7ff0:	e0a65290 	umlal	r5, r6, r0, r2
    7ff4:	e33c0000 	teq	ip, #0	; 0x0
    7ff8:	138ee001 	orrne	lr, lr, #1	; 0x1
    7ffc:	e24440ff 	sub	r4, r4, #255	; 0xff
    8000:	e3560c02 	cmp	r6, #512	; 0x200
    8004:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    8008:	2a000002 	bcs	8018 <__aeabi_dmul+0x84>
    800c:	e1b0e08e 	movs	lr, lr, lsl #1
    8010:	e0b55005 	adcs	r5, r5, r5
    8014:	e0a66006 	adc	r6, r6, r6
    8018:	e1830586 	orr	r0, r3, r6, lsl #11
    801c:	e1800aa5 	orr	r0, r0, r5, lsr #21
    8020:	e1a01585 	mov	r1, r5, lsl #11
    8024:	e1811aae 	orr	r1, r1, lr, lsr #21
    8028:	e1a0e58e 	mov	lr, lr, lsl #11
    802c:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    8030:	835c0c07 	cmphi	ip, #1792	; 0x700
    8034:	8a00000f 	bhi	8078 <__aeabi_dmul+0xe4>
    8038:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    803c:	01b0e0a1 	moveqs	lr, r1, lsr #1
    8040:	e2b11000 	adcs	r1, r1, #0	; 0x0
    8044:	e0a00a04 	adc	r0, r0, r4, lsl #20
    8048:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    804c:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    8050:	e1860000 	orr	r0, r6, r0
    8054:	e1811003 	orr	r1, r1, r3
    8058:	e0200002 	eor	r0, r0, r2
    805c:	e05440ac 	subs	r4, r4, ip, lsr #1
    8060:	c074500c 	rsbgts	r5, r4, ip
    8064:	c1800a04 	orrgt	r0, r0, r4, lsl #20
    8068:	c8bd8070 	ldmgtia	sp!, {r4, r5, r6, pc}
    806c:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    8070:	e3a0e000 	mov	lr, #0	; 0x0
    8074:	e2544001 	subs	r4, r4, #1	; 0x1
    8078:	ca000058 	bgt	81e0 <__aeabi_dmul+0x24c>
    807c:	e3740036 	cmn	r4, #54	; 0x36
    8080:	d3a01000 	movle	r1, #0	; 0x0
    8084:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    8088:	d8bd8070 	ldmleia	sp!, {r4, r5, r6, pc}
    808c:	e2644000 	rsb	r4, r4, #0	; 0x0
    8090:	e2544020 	subs	r4, r4, #32	; 0x20
    8094:	aa000018 	bge	80fc <__aeabi_dmul+0x168>
    8098:	e294400c 	adds	r4, r4, #12	; 0xc
    809c:	ca00000b 	bgt	80d0 <__aeabi_dmul+0x13c>
    80a0:	e2844014 	add	r4, r4, #20	; 0x14
    80a4:	e2645020 	rsb	r5, r4, #32	; 0x20
    80a8:	e1a03511 	mov	r3, r1, lsl r5
    80ac:	e1a01431 	mov	r1, r1, lsr r4
    80b0:	e1811510 	orr	r1, r1, r0, lsl r5
    80b4:	e2002102 	and	r2, r0, #-2147483648	; 0x80000000
    80b8:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
    80bc:	e0911fa3 	adds	r1, r1, r3, lsr #31
    80c0:	e0a20430 	adc	r0, r2, r0, lsr r4
    80c4:	e19ee083 	orrs	lr, lr, r3, lsl #1
    80c8:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    80cc:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    80d0:	e264400c 	rsb	r4, r4, #12	; 0xc
    80d4:	e2645020 	rsb	r5, r4, #32	; 0x20
    80d8:	e1a03411 	mov	r3, r1, lsl r4
    80dc:	e1a01531 	mov	r1, r1, lsr r5
    80e0:	e1811410 	orr	r1, r1, r0, lsl r4
    80e4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    80e8:	e0911fa3 	adds	r1, r1, r3, lsr #31
    80ec:	e2a00000 	adc	r0, r0, #0	; 0x0
    80f0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    80f4:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    80f8:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    80fc:	e2645020 	rsb	r5, r4, #32	; 0x20
    8100:	e18ee511 	orr	lr, lr, r1, lsl r5
    8104:	e1a03431 	mov	r3, r1, lsr r4
    8108:	e1833510 	orr	r3, r3, r0, lsl r5
    810c:	e1a01430 	mov	r1, r0, lsr r4
    8110:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    8114:	e1c11430 	bic	r1, r1, r0, lsr r4
    8118:	e0811fa3 	add	r1, r1, r3, lsr #31
    811c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    8120:	01c11fa3 	biceq	r1, r1, r3, lsr #31
    8124:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    8128:	e3340000 	teq	r4, #0	; 0x0
    812c:	1a000008 	bne	8154 <__aeabi_dmul+0x1c0>
    8130:	e2006102 	and	r6, r0, #-2147483648	; 0x80000000
    8134:	e1b01081 	movs	r1, r1, lsl #1
    8138:	e0a00000 	adc	r0, r0, r0
    813c:	e3100601 	tst	r0, #1048576	; 0x100000
    8140:	02444001 	subeq	r4, r4, #1	; 0x1
    8144:	0afffffa 	beq	8134 <__aeabi_dmul+0x1a0>
    8148:	e1800006 	orr	r0, r0, r6
    814c:	e3350000 	teq	r5, #0	; 0x0
    8150:	11a0f00e 	movne	pc, lr
    8154:	e2026102 	and	r6, r2, #-2147483648	; 0x80000000
    8158:	e1b03083 	movs	r3, r3, lsl #1
    815c:	e0a22002 	adc	r2, r2, r2
    8160:	e3120601 	tst	r2, #1048576	; 0x100000
    8164:	02455001 	subeq	r5, r5, #1	; 0x1
    8168:	0afffffa 	beq	8158 <__aeabi_dmul+0x1c4>
    816c:	e1822006 	orr	r2, r2, r6
    8170:	e1a0f00e 	mov	pc, lr
    8174:	e134000c 	teq	r4, ip
    8178:	e00c5a22 	and	r5, ip, r2, lsr #20
    817c:	1135000c 	teqne	r5, ip
    8180:	0a000006 	beq	81a0 <__aeabi_dmul+0x20c>
    8184:	e1916080 	orrs	r6, r1, r0, lsl #1
    8188:	11936082 	orrnes	r6, r3, r2, lsl #1
    818c:	1affffe5 	bne	8128 <__aeabi_dmul+0x194>
    8190:	e0200002 	eor	r0, r0, r2
    8194:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    8198:	e3a01000 	mov	r1, #0	; 0x0
    819c:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    81a0:	e1916080 	orrs	r6, r1, r0, lsl #1
    81a4:	01a01003 	moveq	r1, r3
    81a8:	01a00002 	moveq	r0, r2
    81ac:	11936082 	orrnes	r6, r3, r2, lsl #1
    81b0:	0a00000f 	beq	81f4 <__aeabi_dmul+0x260>
    81b4:	e134000c 	teq	r4, ip
    81b8:	1a000001 	bne	81c4 <__aeabi_dmul+0x230>
    81bc:	e1916600 	orrs	r6, r1, r0, lsl #12
    81c0:	1a00000b 	bne	81f4 <__aeabi_dmul+0x260>
    81c4:	e135000c 	teq	r5, ip
    81c8:	1a000003 	bne	81dc <__aeabi_dmul+0x248>
    81cc:	e1936602 	orrs	r6, r3, r2, lsl #12
    81d0:	11a01003 	movne	r1, r3
    81d4:	11a00002 	movne	r0, r2
    81d8:	1a000005 	bne	81f4 <__aeabi_dmul+0x260>
    81dc:	e0200002 	eor	r0, r0, r2
    81e0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    81e4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    81e8:	e380060f 	orr	r0, r0, #15728640	; 0xf00000
    81ec:	e3a01000 	mov	r1, #0	; 0x0
    81f0:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    81f4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    81f8:	e380073e 	orr	r0, r0, #16252928	; 0xf80000
    81fc:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}

00008200 <__aeabi_ddiv>:
    8200:	e92d4070 	stmdb	sp!, {r4, r5, r6, lr}
    8204:	e3a0c0ff 	mov	ip, #255	; 0xff
    8208:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    820c:	e01c4a20 	ands	r4, ip, r0, lsr #20
    8210:	101c5a22 	andnes	r5, ip, r2, lsr #20
    8214:	1134000c 	teqne	r4, ip
    8218:	1135000c 	teqne	r5, ip
    821c:	0b00005c 	bleq	8394 <__aeabi_ddiv+0x194>
    8220:	e0444005 	sub	r4, r4, r5
    8224:	e020e002 	eor	lr, r0, r2
    8228:	e1935602 	orrs	r5, r3, r2, lsl #12
    822c:	e1a00600 	mov	r0, r0, lsl #12
    8230:	0a00004b 	beq	8364 <__aeabi_ddiv+0x164>
    8234:	e1a02602 	mov	r2, r2, lsl #12
    8238:	e3a05201 	mov	r5, #268435456	; 0x10000000
    823c:	e1852222 	orr	r2, r5, r2, lsr #4
    8240:	e1822c23 	orr	r2, r2, r3, lsr #24
    8244:	e1a03403 	mov	r3, r3, lsl #8
    8248:	e1855220 	orr	r5, r5, r0, lsr #4
    824c:	e1855c21 	orr	r5, r5, r1, lsr #24
    8250:	e1a06401 	mov	r6, r1, lsl #8
    8254:	e20e0102 	and	r0, lr, #-2147483648	; 0x80000000
    8258:	e1550002 	cmp	r5, r2
    825c:	01560003 	cmpeq	r6, r3
    8260:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    8264:	e2844c03 	add	r4, r4, #768	; 0x300
    8268:	2a000001 	bcs	8274 <__aeabi_ddiv+0x74>
    826c:	e1b020a2 	movs	r2, r2, lsr #1
    8270:	e1a03063 	mov	r3, r3, rrx
    8274:	e0566003 	subs	r6, r6, r3
    8278:	e0c55002 	sbc	r5, r5, r2
    827c:	e1b020a2 	movs	r2, r2, lsr #1
    8280:	e1a03063 	mov	r3, r3, rrx
    8284:	e3a01601 	mov	r1, #1048576	; 0x100000
    8288:	e3a0c702 	mov	ip, #524288	; 0x80000
    828c:	e056e003 	subs	lr, r6, r3
    8290:	e0d5e002 	sbcs	lr, r5, r2
    8294:	20466003 	subcs	r6, r6, r3
    8298:	21a0500e 	movcs	r5, lr
    829c:	2181100c 	orrcs	r1, r1, ip
    82a0:	e1b020a2 	movs	r2, r2, lsr #1
    82a4:	e1a03063 	mov	r3, r3, rrx
    82a8:	e056e003 	subs	lr, r6, r3
    82ac:	e0d5e002 	sbcs	lr, r5, r2
    82b0:	20466003 	subcs	r6, r6, r3
    82b4:	21a0500e 	movcs	r5, lr
    82b8:	218110ac 	orrcs	r1, r1, ip, lsr #1
    82bc:	e1b020a2 	movs	r2, r2, lsr #1
    82c0:	e1a03063 	mov	r3, r3, rrx
    82c4:	e056e003 	subs	lr, r6, r3
    82c8:	e0d5e002 	sbcs	lr, r5, r2
    82cc:	20466003 	subcs	r6, r6, r3
    82d0:	21a0500e 	movcs	r5, lr
    82d4:	2181112c 	orrcs	r1, r1, ip, lsr #2
    82d8:	e1b020a2 	movs	r2, r2, lsr #1
    82dc:	e1a03063 	mov	r3, r3, rrx
    82e0:	e056e003 	subs	lr, r6, r3
    82e4:	e0d5e002 	sbcs	lr, r5, r2
    82e8:	20466003 	subcs	r6, r6, r3
    82ec:	21a0500e 	movcs	r5, lr
    82f0:	218111ac 	orrcs	r1, r1, ip, lsr #3
    82f4:	e195e006 	orrs	lr, r5, r6
    82f8:	0a00000d 	beq	8334 <__aeabi_ddiv+0x134>
    82fc:	e1a05205 	mov	r5, r5, lsl #4
    8300:	e1855e26 	orr	r5, r5, r6, lsr #28
    8304:	e1a06206 	mov	r6, r6, lsl #4
    8308:	e1a02182 	mov	r2, r2, lsl #3
    830c:	e1822ea3 	orr	r2, r2, r3, lsr #29
    8310:	e1a03183 	mov	r3, r3, lsl #3
    8314:	e1b0c22c 	movs	ip, ip, lsr #4
    8318:	1affffdb 	bne	828c <__aeabi_ddiv+0x8c>
    831c:	e3100601 	tst	r0, #1048576	; 0x100000
    8320:	1a000006 	bne	8340 <__aeabi_ddiv+0x140>
    8324:	e1800001 	orr	r0, r0, r1
    8328:	e3a01000 	mov	r1, #0	; 0x0
    832c:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    8330:	eaffffd5 	b	828c <__aeabi_ddiv+0x8c>
    8334:	e3100601 	tst	r0, #1048576	; 0x100000
    8338:	01800001 	orreq	r0, r0, r1
    833c:	03a01000 	moveq	r1, #0	; 0x0
    8340:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    8344:	835c0c07 	cmphi	ip, #1792	; 0x700
    8348:	8affff4a 	bhi	8078 <__aeabi_dmul+0xe4>
    834c:	e055c002 	subs	ip, r5, r2
    8350:	0056c003 	subeqs	ip, r6, r3
    8354:	01b0c0a1 	moveqs	ip, r1, lsr #1
    8358:	e2b11000 	adcs	r1, r1, #0	; 0x0
    835c:	e0a00a04 	adc	r0, r0, r4, lsl #20
    8360:	e8bd8070 	ldmia	sp!, {r4, r5, r6, pc}
    8364:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    8368:	e18e0620 	orr	r0, lr, r0, lsr #12
    836c:	e09440ac 	adds	r4, r4, ip, lsr #1
    8370:	c074500c 	rsbgts	r5, r4, ip
    8374:	c1800a04 	orrgt	r0, r0, r4, lsl #20
    8378:	c8bd8070 	ldmgtia	sp!, {r4, r5, r6, pc}
    837c:	e3800601 	orr	r0, r0, #1048576	; 0x100000
    8380:	e3a0e000 	mov	lr, #0	; 0x0
    8384:	e2544001 	subs	r4, r4, #1	; 0x1
    8388:	eaffff3a 	b	8078 <__aeabi_dmul+0xe4>
    838c:	e185e006 	orr	lr, r5, r6
    8390:	eaffff38 	b	8078 <__aeabi_dmul+0xe4>
    8394:	e00c5a22 	and	r5, ip, r2, lsr #20
    8398:	e134000c 	teq	r4, ip
    839c:	0135000c 	teqeq	r5, ip
    83a0:	0affff93 	beq	81f4 <__aeabi_dmul+0x260>
    83a4:	e134000c 	teq	r4, ip
    83a8:	1a000006 	bne	83c8 <__aeabi_ddiv+0x1c8>
    83ac:	e1914600 	orrs	r4, r1, r0, lsl #12
    83b0:	1affff8f 	bne	81f4 <__aeabi_dmul+0x260>
    83b4:	e135000c 	teq	r5, ip
    83b8:	1affff87 	bne	81dc <__aeabi_dmul+0x248>
    83bc:	e1a01003 	mov	r1, r3
    83c0:	e1a00002 	mov	r0, r2
    83c4:	eaffff8a 	b	81f4 <__aeabi_dmul+0x260>
    83c8:	e135000c 	teq	r5, ip
    83cc:	1a000004 	bne	83e4 <__aeabi_ddiv+0x1e4>
    83d0:	e1935602 	orrs	r5, r3, r2, lsl #12
    83d4:	0affff6d 	beq	8190 <__aeabi_dmul+0x1fc>
    83d8:	e1a01003 	mov	r1, r3
    83dc:	e1a00002 	mov	r0, r2
    83e0:	eaffff83 	b	81f4 <__aeabi_dmul+0x260>
    83e4:	e1916080 	orrs	r6, r1, r0, lsl #1
    83e8:	11936082 	orrnes	r6, r3, r2, lsl #1
    83ec:	1affff4d 	bne	8128 <__aeabi_dmul+0x194>
    83f0:	e1914080 	orrs	r4, r1, r0, lsl #1
    83f4:	1affff78 	bne	81dc <__aeabi_dmul+0x248>
    83f8:	e1935082 	orrs	r5, r3, r2, lsl #1
    83fc:	1affff63 	bne	8190 <__aeabi_dmul+0x1fc>
    8400:	eaffff7b 	b	81f4 <__aeabi_dmul+0x260>

00008404 <__gedf2>:
    8404:	e3e0c000 	mvn	ip, #0	; 0x0
    8408:	ea000002 	b	8418 <__cmpdf2+0x4>

0000840c <__ledf2>:
    840c:	e3a0c001 	mov	ip, #1	; 0x1
    8410:	ea000000 	b	8418 <__cmpdf2+0x4>

00008414 <__cmpdf2>:
    8414:	e3a0c001 	mov	ip, #1	; 0x1
    8418:	e50dc004 	str	ip, [sp, #-4]
    841c:	e1a0c080 	mov	ip, r0, lsl #1
    8420:	e1f0cacc 	mvns	ip, ip, asr #21
    8424:	e1a0c082 	mov	ip, r2, lsl #1
    8428:	11f0cacc 	mvnnes	ip, ip, asr #21
    842c:	0a00000d 	beq	8468 <__cmpdf2+0x54>
    8430:	e191c080 	orrs	ip, r1, r0, lsl #1
    8434:	0193c082 	orreqs	ip, r3, r2, lsl #1
    8438:	11300002 	teqne	r0, r2
    843c:	01310003 	teqeq	r1, r3
    8440:	03a00000 	moveq	r0, #0	; 0x0
    8444:	012fff1e 	bxeq	lr
    8448:	e3700000 	cmn	r0, #0	; 0x0
    844c:	e1300002 	teq	r0, r2
    8450:	51500002 	cmppl	r0, r2
    8454:	01510003 	cmpeq	r1, r3
    8458:	21a00fc2 	movcs	r0, r2, asr #31
    845c:	31e00fc2 	mvncc	r0, r2, asr #31
    8460:	e3800001 	orr	r0, r0, #1	; 0x1
    8464:	e12fff1e 	bx	lr
    8468:	e1a0c080 	mov	ip, r0, lsl #1
    846c:	e1f0cacc 	mvns	ip, ip, asr #21
    8470:	1a000001 	bne	847c <__cmpdf2+0x68>
    8474:	e191c600 	orrs	ip, r1, r0, lsl #12
    8478:	1a000004 	bne	8490 <__cmpdf2+0x7c>
    847c:	e1a0c082 	mov	ip, r2, lsl #1
    8480:	e1f0cacc 	mvns	ip, ip, asr #21
    8484:	1affffe9 	bne	8430 <__cmpdf2+0x1c>
    8488:	e193c602 	orrs	ip, r3, r2, lsl #12
    848c:	0affffe7 	beq	8430 <__cmpdf2+0x1c>
    8490:	e51d0004 	ldr	r0, [sp, #-4]
    8494:	e12fff1e 	bx	lr

00008498 <__aeabi_cdrcmple>:
    8498:	e1a0c000 	mov	ip, r0
    849c:	e1a00002 	mov	r0, r2
    84a0:	e1a0200c 	mov	r2, ip
    84a4:	e1a0c001 	mov	ip, r1
    84a8:	e1a01003 	mov	r1, r3
    84ac:	e1a0300c 	mov	r3, ip
    84b0:	eaffffff 	b	84b4 <__aeabi_cdcmpeq>

000084b4 <__aeabi_cdcmpeq>:
    84b4:	e92d4001 	stmdb	sp!, {r0, lr}
    84b8:	ebffffd5 	bl	8414 <__cmpdf2>
    84bc:	e3500000 	cmp	r0, #0	; 0x0
    84c0:	43700000 	cmnmi	r0, #0	; 0x0
    84c4:	e8bd8001 	ldmia	sp!, {r0, pc}

000084c8 <__aeabi_dcmpeq>:
    84c8:	e52de008 	str	lr, [sp, #-8]!
    84cc:	ebfffff8 	bl	84b4 <__aeabi_cdcmpeq>
    84d0:	03a00001 	moveq	r0, #1	; 0x1
    84d4:	13a00000 	movne	r0, #0	; 0x0
    84d8:	e49df008 	ldr	pc, [sp], #8

000084dc <__aeabi_dcmplt>:
    84dc:	e52de008 	str	lr, [sp, #-8]!
    84e0:	ebfffff3 	bl	84b4 <__aeabi_cdcmpeq>
    84e4:	33a00001 	movcc	r0, #1	; 0x1
    84e8:	23a00000 	movcs	r0, #0	; 0x0
    84ec:	e49df008 	ldr	pc, [sp], #8

000084f0 <__aeabi_dcmple>:
    84f0:	e52de008 	str	lr, [sp, #-8]!
    84f4:	ebffffee 	bl	84b4 <__aeabi_cdcmpeq>
    84f8:	93a00001 	movls	r0, #1	; 0x1
    84fc:	83a00000 	movhi	r0, #0	; 0x0
    8500:	e49df008 	ldr	pc, [sp], #8

00008504 <__aeabi_dcmpge>:
    8504:	e52de008 	str	lr, [sp, #-8]!
    8508:	ebffffe2 	bl	8498 <__aeabi_cdrcmple>
    850c:	93a00001 	movls	r0, #1	; 0x1
    8510:	83a00000 	movhi	r0, #0	; 0x0
    8514:	e49df008 	ldr	pc, [sp], #8

00008518 <__aeabi_dcmpgt>:
    8518:	e52de008 	str	lr, [sp, #-8]!
    851c:	ebffffdd 	bl	8498 <__aeabi_cdrcmple>
    8520:	33a00001 	movcc	r0, #1	; 0x1
    8524:	23a00000 	movcs	r0, #0	; 0x0
    8528:	e49df008 	ldr	pc, [sp], #8

0000852c <__aeabi_d2iz>:
    852c:	e1a02080 	mov	r2, r0, lsl #1
    8530:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    8534:	2a00000c 	bcs	856c <__aeabi_d2iz+0x40>
    8538:	5a000009 	bpl	8564 <__aeabi_d2iz+0x38>
    853c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    8540:	e0532ac2 	subs	r2, r3, r2, asr #21
    8544:	9a00000a 	bls	8574 <__aeabi_d2iz+0x48>
    8548:	e1a03580 	mov	r3, r0, lsl #11
    854c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    8550:	e1833aa1 	orr	r3, r3, r1, lsr #21
    8554:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    8558:	e1a00233 	mov	r0, r3, lsr r2
    855c:	12600000 	rsbne	r0, r0, #0	; 0x0
    8560:	e12fff1e 	bx	lr
    8564:	e3a00000 	mov	r0, #0	; 0x0
    8568:	e12fff1e 	bx	lr
    856c:	e1911600 	orrs	r1, r1, r0, lsl #12
    8570:	1a000002 	bne	8580 <__aeabi_d2iz+0x54>
    8574:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    8578:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    857c:	e12fff1e 	bx	lr
    8580:	e3a00000 	mov	r0, #0	; 0x0
    8584:	e12fff1e 	bx	lr

00008588 <__aeabi_d2uiz>:
    8588:	e1b02080 	movs	r2, r0, lsl #1
    858c:	2a00000a 	bcs	85bc <__aeabi_d2uiz+0x34>
    8590:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    8594:	2a00000a 	bcs	85c4 <__aeabi_d2uiz+0x3c>
    8598:	5a000007 	bpl	85bc <__aeabi_d2uiz+0x34>
    859c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    85a0:	e0532ac2 	subs	r2, r3, r2, asr #21
    85a4:	4a000008 	bmi	85cc <__aeabi_d2uiz+0x44>
    85a8:	e1a03580 	mov	r3, r0, lsl #11
    85ac:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    85b0:	e1833aa1 	orr	r3, r3, r1, lsr #21
    85b4:	e1a00233 	mov	r0, r3, lsr r2
    85b8:	e12fff1e 	bx	lr
    85bc:	e3a00000 	mov	r0, #0	; 0x0
    85c0:	e12fff1e 	bx	lr
    85c4:	e1911600 	orrs	r1, r1, r0, lsl #12
    85c8:	1a000001 	bne	85d4 <__aeabi_d2uiz+0x4c>
    85cc:	e3e00000 	mvn	r0, #0	; 0x0
    85d0:	e12fff1e 	bx	lr
    85d4:	e3a00000 	mov	r0, #0	; 0x0
    85d8:	e12fff1e 	bx	lr

000085dc <vscp_deviceURL>:
    85dc:	2e777777 6f727565 72756f73 732e6563     www.eurosource.s
    85ec:	75682f65 305f6b6c 782e3130 00006c6d     e/hulk_001.xml..

000085fc <C.1.2824>:
    85fc:	33323130 37363534 62613938 66656463     0123456789abcdef

0000860c <_ctype_>:
    860c:	20202000 20202020 28282020 20282828     .         ((((( 
    861c:	20202020 20202020 20202020 20202020                     
    862c:	10108820 10101010 10101010 10101010      ...............
    863c:	04040410 04040404 10040404 10101010     ................
    864c:	41411010 41414141 01010101 01010101     ..AAAAAA........
    865c:	01010101 01010101 01010101 10101010     ................
    866c:	42421010 42424242 02020202 02020202     ..BBBBBB........
    867c:	02020202 02020202 02020202 10101010     ................
    868c:	00000020 00000000 00000000 00000000      ...............
	...

00008710 <_global_impure_ptr>:
    8710:	40000010                                ...@

00008714 <bp>:
    8714:	3ff00000 00000000 3ff80000 00000000     ...?.......?....

00008724 <dp_l>:
	...
    872c:	3e4cfdeb 43cfd006                       ..L>...C

00008734 <dp_h>:
	...
    873c:	3fe2b803 40000000                       ...?...@

00008744 <__fdlib_version>:
    8744:	00000001                                ....

00008748 <TWO52>:
    8748:	43300000 00000000 c3300000 00000000     ..0C......0.....
    8758:	74747542 27206e6f 65746e45 002e2772     Button 'Enter'..
    8768:	74747542 27206e6f 6e776f44 00002e27     Button 'Down'...
    8778:	74747542 27206e6f 2e277055 00000000     Button 'Up'.....
    8788:	74747542 27206e6f 77726f46 27647261     Button 'Forward'
    8798:	0000002e 65746157 65682072 72657461     ....Water heater
    87a8:	656c6520 746e656d 4f204220 0000004e      element B ON...
    87b8:	65746157 65682072 72657461 656c6520     Water heater ele
    87c8:	746e656d 4f204220 00004646 65746157     ment B OFF..Wate
    87d8:	65682072 72657461 656c6520 2074656d     r heater elemet 
    87e8:	4e4f2041 00000000 65746157 65682072     A ON....Water he
    87f8:	72657461 656c6520 2074656d 464f2041     ater elemet A OF
    8808:	00000046 6e727546 20656361 74616568     F...Furnace heat
    8818:	4f207265 0000004e 6e727546 20656361     er ON...Furnace 
    8828:	74616568 4f207265 00004646 6f746f4d     heater OFF..Moto
    8838:	20422072 00004e4f 6f746f4d 20422072     r B ON..Motor B 
    8848:	0046464f 6f746f4d 20412072 00004e4f     OFF.Motor A ON..
    8858:	6f746f4d 20412072 0046464f 206e6146     Motor A OFF.Fan 
    8868:	00004e4f 206e6146 0046464f 74696e49     ON..Fan OFF.Init
    8878:	70704520 006d6f72 00000d43 000d305a      Epprom.C...Z0..
    8888:	000d3653 00000d4f 68740a0d 55482065     S6..O.....the HU
    8898:	49204b4c 000a0d49 6e6f4328 6c6f7274     LK II...(Control
    88a8:	726f6620 61656820 6f632074 726f666d      for heat comfor
    88b8:	20402074 656d6f68 0a0d292e 00000a0d     t @ home.)......
    88c8:	74617473 75665f65 63616e72 203d2065     state_furnace = 
    88d8:	4e525546 5f454341 54415453 54535f45     FURNACE_STATE_ST
    88e8:	00545241 74617473 65685f65 72657461     ART.state_heater
    88f8:	48203d20 45544145 54535f52 5f455441      = HEATER_STATE_
    8908:	54534552 00000000 74530a0d 20657461     REST......State 
    8918:	75422030 6e6f7474 65725020 64657373     0 Button Pressed
    8928:	000a0d21 74747542 27206e6f 63726f46     !...Button 'Forc
    8938:	6f4d2065 20726f74 2e276e4f 00000000     e Motor On'.....
    8948:	4c494146 20455255 00002020 72616c41     FAILURE   ..Alar
    8958:	4e4f206d 00000000 2046464f 20202020     m ON....OFF     
    8968:	00002020 2d455250 54534552 00002020       ..PRE-REST  ..
    8978:	42207254 6d695420 74756f65 203e3d20     Tr B Timeout => 
    8988:	74617473 75665f65 63616e72 203d2065     state_furnace = 
    8998:	4e525546 5f454341 54415453 45525f45     FURNACE_STATE_RE
    89a8:	00005453 54534552 20202020 00002020     ST..REST      ..
    89b8:	706d6574 776f6c20 203e3d20 74617473     temp low => stat
    89c8:	75665f65 63616e72 203d2065 4e525546     e_furnace = FURN
    89d8:	5f454341 54415453 52505f45 41545345     ACE_STATE_PRESTA
    89e8:	00005452 61736944 64656c62 203e3d20     RT..Disabled => 
    89f8:	74617473 75665f65 63616e72 203d2065     state_furnace = 
    8a08:	4e525546 5f454341 54415453 464f5f45     FURNACE_STATE_OF
    8a18:	00000046 53455250 54524154 00002020     F...PRESTART  ..
    8a28:	65726946 74656420 65746365 3e3d2064     Fire detected =>
    8a38:	61747320 665f6574 616e7275 3d206563      state_furnace =
    8a48:	52554620 4543414e 4154535f 465f4554      FURNACE_STATE_F
    8a58:	44455249 43455445 00000054 6c657566     IREDETECT...fuel
    8a68:	616f6c20 6f642064 3d20656e 7473203e      load done => st
    8a78:	5f657461 6e727566 20656361 5546203d     ate_furnace = FU
    8a88:	43414e52 54535f45 5f455441 52415453     RNACE_STATE_STAR
    8a98:	00000054 706d6574 67696820 3e3d2068     T...temp high =>
    8aa8:	61747320 665f6574 616e7275 3d206563      state_furnace =
    8ab8:	52554620 4543414e 4154535f 505f4554      FURNACE_STATE_P
    8ac8:	41574552 00005449 63616544 61766974     REWAIT..Deactiva
    8ad8:	20646574 73203e3d 65746174 7275665f     ted => state_fur
    8ae8:	6563616e 46203d20 414e5255 535f4543     nace = FURNACE_S
    8af8:	45544154 4552505f 54494157 00000000     TATE_PREWAIT....
    8b08:	65726946 74656420 65746365 3e3d2064     Fire detected =>
    8b18:	61747320 665f6574 616e7275 3d206563      state_furnace =
    8b28:	52554620 4543414e 4154535f 415f4554      FURNACE_STATE_A
    8b38:	56495443 00000045 75746572 66206e72     CTIVE...return f
    8b48:	206d6f72 65726966 74656420 65746365     rom fire detecte
    8b58:	3e3d2064 61747320 665f6574 616e7275     d => state_furna
    8b68:	3d206563 52554620 4543414e 4154535f     ce = FURNACE_STA
    8b78:	535f4554 54524154 00000000 52415453     TE_START....STAR
    8b88:	20202054 00002020 6e727546 20656361     T     ..Furnace 
    8b98:	706d6574 61657220 64656863 0000002e     temp reached....
    8ba8:	74617473 75665f65 63616e72 203d2065     state_furnace = 
    8bb8:	4e525546 5f454341 54415453 52505f45     FURNACE_STATE_PR
    8bc8:	49415745 00000054 746f6e41 20726568     EWAIT...Another 
    8bd8:	74736572 2e747261 00000000 616e6946     restart.....Fina
    8be8:	6572206c 72617473 74612074 706d6574     l restart attemp
    8bf8:	00002e74 74617473 75665f65 63616e72     t...state_furnac
    8c08:	203d2065 4e525546 5f454341 54415453     e = FURNACE_STAT
    8c18:	41465f45 52554c49 00000045 6e727546     E_FAILURE...Furn
    8c28:	20656361 61736964 64656c62 0000002e     ace disabled....
    8c38:	57455250 20544941 00002020 42207254     PREWAIT   ..Tr B
    8c48:	6d695420 74756f65 203e3d20 74617473      Timeout => stat
    8c58:	75665f65 63616e72 203d2065 4e525546     e_furnace = FURN
    8c68:	5f454341 54415453 41575f45 00005449     ACE_STATE_WAIT..
    8c78:	54494157 20202020 00002020 706d6554     WAIT      ..Temp
    8c88:	776f4c20 203e3d20 74617473 75665f65      Low => state_fu
    8c98:	63616e72 203d2065 4e525546 5f454341     rnace = FURNACE_
    8ca8:	54415453 52505f45 41545345 00005452     STATE_PRESTART..
    8cb8:	206e6146 656d6954 2074756f 73203e3d     Fan Timeout => s
    8cc8:	65746174 7275665f 6563616e 46203d20     tate_furnace = F
    8cd8:	414e5255 535f4543 45544154 4552505f     URNACE_STATE_PRE
    8ce8:	54534552 00000000 49544341 20204556     REST....ACTIVE  
    8cf8:	00002020 74617473 75665f65 63616e72       ..state_furnac
    8d08:	203d2065 4e525546 5f454341 54415453     e = FURNACE_STAT
    8d18:	494c5f45 53544847 54554f5f 00000000     E_LIGHTS_OUT....
    8d28:	4847494c 4f205354 00005455 74736552     LIGHTS OUT..Rest
    8d38:	00000000 74617473 65685f65 72657461     ....state_heater
    8d48:	48203d20 45544145 54535f52 5f455441      = HEATER_STATE_
    8d58:	4c5f4e4f 4c455645 00000031 74617473     ON_LEVEL1...stat
    8d68:	65685f65 72657461 48203d20 45544145     e_heater = HEATE
    8d78:	54535f52 5f455441 0046464f 74617473     R_STATE_OFF.stat
    8d88:	65685f65 72657461 48203d20 45544145     e_heater = HEATE
    8d98:	54535f52 5f455441 4c5f4e4f 4c455645     R_STATE_ON_LEVEL
    8da8:	00000032 20656874 4b4c5548 00494920     2...the HULK II.
    8db8:	2e302e30 00000035 4b4c5548 0000203a     0.0.5...HULK: ..
    8dc8:	706d6554 74756f20 0000203a 00000043     Temp out: ..C...
    8dd8:	706d6554 74657220 3a6e7275 00000020     Temp return: ...
    8de8:	706d6554 2e725420 00203a42 74616548     Temp Tr.B: .Heat
    8df8:	203a7265 00000000 706d6554 726f6320     er: ....Temp cor
    8e08:	00203a65 706d6554 74617720 203a7265     e: .Temp water: 
    8e18:	00000000 65726946 76656c20 203a6c65     ....Fire level: 
    8e28:	00000000 2e666552 76656c20 203a6c65     ....Ref. level: 
    8e38:	00000000 73657250 6e652073 20726574     ....Press enter 
    8e48:	00726f66 666e6f63 73206769 65746174     for.config state
    8e58:	0000002e 3a676663 746f4820 74617720     ....cfg: Hot wat
    8e68:	00007265 70746553 746e696f 00000020     er..Setpoint ...
    8e78:	00002043 0000002a 3a676663 6e727546     C ..*...cfg:Furn
    8e88:	20656361 706d6574 00000000 00004320     ace temp.... C..
    8e98:	3a676663 6c6c6946 6d697420 00000065     cfg:Fill time...
    8ea8:	00002073 3a676663 202e7254 6e652042     s ..cfg:Tr. B en
    8eb8:	00000064 3a676663 206e6146 00646e65     d...cfg:Fan end.
    8ec8:	0000206d 3a676663 74736572 20747261     m ..cfg:restart 
    8ed8:	2e6f2e74 00000000 3a676663 65722023     t.o.....cfg:# re
    8ee8:	72617473 00007374 3a676663 72754620     starts..cfg: Fur
    8ef8:	6563616e 00000000 62616e65 2064656c     nace....enabled 
    8f08:	0000203d 3a676663 61654820 00726574     = ..cfg: Heater.
    8f18:	3a676663 616c4120 00006d72 73657250     cfg: Alarm..Pres
    8f28:	6e452073 20726574 00006f74 7661656c     s Enter to..leav
    8f38:	6f632065 6769666e 0000002e 00000030     e config....0...
    8f48:	0000000d 00776f70                       ....pow.
